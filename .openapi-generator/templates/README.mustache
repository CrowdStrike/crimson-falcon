# Crimson Falcon - The CrowdStrike Falcon SDK for Ruby

[![Gem Version](https://badge.fury.io/rb/crimson-falcon.svg)](https://badge.fury.io/rb/crimson-falcon)

*Empower* your Ruby applications with the robust capabilities of the CrowdStrike Falcon platform,
using the Crimson Falcon SDK. This sophisticated Ruby gem, designed to align with the CrowdStrike
API Specification, facilitates smooth and efficient interaction with a wide range of API endpoints
within your Falcon environment. Utilizing this SDK allows for seamless integration, operational
consistency, and enhanced functionality in your cybersecurity workflows.

## Installation

### From RubyGems

To install from RubyGems, use the following command:

```shell
gem install {{{gemName}}}
```

Add this to the Gemfile:
<!-- x-release-please-start-version -->
```ruby
    gem '{{{gemName}}}', '~> {{{gemVersion}}}'
```
<!-- x-release-please-end -->
### From Source to Gem: Building the Ruby Code

To build the Ruby code into a gem:

```shell
gem build {{{gemName}}}.gemspec
```

Then install the gem locally:
<!-- x-release-please-start-version -->
```shell
gem install ./{{{gemName}}}-{{{gemVersion}}}.gem
```
<!-- x-release-please-end -->
Finally, add this to the Gemfile:
<!-- x-release-please-start-version -->
```ruby
    gem '{{{gemName}}}', '~> {{{gemVersion}}}'
```
<!-- x-release-please-end -->
### Install from Git

If the Ruby gem is hosted at a git repository: <https://{{gitHost}}/{{gitUserId}}{{^gitUserId}}YOUR_GIT_USERNAME{{/gitUserId}}/{{gitRepoId}}{{^gitRepoId}}YOUR_GIT_REPO{{/gitRepoId}}>, then add the following in the Gemfile:

```ruby
    # Example
    gem 'crimson-falcon', :git => 'https://github.com/CrowdStrike/crimson-falcon.git'
```

## Getting Started

Eager to take flight? Follow the [installation](#installation) process, and then launch into the following code:

```ruby
# Load the gem
require '{{{gemName}}}'

# Setup authorization
Falcon.configure do |config|
  config.client_id = "Your_Client_ID"
  config.client_secret = "Your_Client_Secret"
  config.cloud = "us-1" # or "us-2", "eu-1", "us-gov1"
end

# Create a new API instance
api_instance = Falcon::AlertsApi.new
opts = {
  # Integer | The starting point for the return, `0` implies the latest detection.
  # The `offset` parameter assists in paginating results.
  offset: 0,
  # Integer | The maximum count of detections in this response (default: 100; max: 10000).
  # Works in tandem with the `offset` for pagination.
  limit: 25,
  # String | Sort detections in `asc` (ascending) or `desc` (descending) order.
  # Example: `status|asc` or `status|desc`.
  sort: 'Sort_Criteria',
  # String | Filter detections using a query in Falcon Query Language (FQL).
  # An asterisk wildcard `*` includes all results. See API docs for more details.
  filter: 'Filter_Criteria',
  # String | Search all detection metadata for the provided string
  q: 'Query_String'
}

begin
  # Retrieves all Alerts ids that match a given query
  result = api_instance.get_queries_alerts_v1(opts)
  p result
rescue Falcon::ApiError => e
  puts "Exception when calling AlertsApi->get_queries_alerts_v1: #{e}"
end
```

Welcome aboard the Crimson Falcon! Fly high, code with grace.

## Crimson Falcon API Docs

> :recycle: ***API Docs are automatically generated from the CrowdStrike API specification.*** :recycle:

---
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
**Class**: `{{moduleName}}::{{classname}}`

- **Operation**: [**{{operationId}}**]({{apiDocPath}}{{classname}}.md#{{operationId}})
- **{{httpMethod}}**: {{path}}
- **Description**: {{summary}}

---
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}
