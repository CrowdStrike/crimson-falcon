# Crimson Falcon - The CrowdStrike Falcon SDK for Ruby

[![Gem Version](https://badge.fury.io/rb/crimson-falcon.svg)](https://badge.fury.io/rb/crimson-falcon)

Welcome to Crimson Falcon, the Ruby SDK for the CrowdStrike Falcon Platform. This is where the power of the CrowdStrike Falcon Platform meets the elegance and simplicity of Ruby.

"Why Ruby?" you might ask.

Well, Ruby is a dynamic, open source programming language with a focus on simplicity and productivity. It has an elegant syntax that is natural to read and easy to write. It's unique balance of simplicity, productivity, and just sheer fun, makes coding feel less like a task and more like a hobby. It's like your favorite pair of comfy shoes - familiar, comfortable, and always reliable. :wink:

That's what we aim to achieve with Crimson Falcon - a tool that brings together the robust capabilities of CrowdStrike Falcon with the friendly charm of Ruby.

Ready to bring some fun to your cybersecurity game with Ruby and Crimson Falcon? Let's jump right in!

- [Installation](#installation)
- [Getting Started](#getting-started)
- [Contribute to Crimson Falcon](#contribute-to-crimson-falcon)
- [Crimson Falcon API Docs](#crimson-falcon-api-docs)

## Installation

### From RubyGems (*This is the way*)

To install from RubyGems, use the following command:

```shell
gem install {{{gemName}}}
```

Add this to the Gemfile:
<!-- x-release-please-start-version -->
```ruby
    gem '{{{gemName}}}', '~> {{{gemVersion}}}'
```
<!-- x-release-please-end -->
### From Source to Gem: Building the Ruby Code

To build the Ruby code into a gem:

```shell
gem build {{{gemName}}}.gemspec
```

Then install the gem locally:
<!-- x-release-please-start-version -->
```shell
gem install ./{{{gemName}}}-{{{gemVersion}}}.gem
```
<!-- x-release-please-end -->
Finally, add this to the Gemfile:
<!-- x-release-please-start-version -->
```ruby
    gem '{{{gemName}}}', '~> {{{gemVersion}}}'
```
<!-- x-release-please-end -->
### Install from Git

If the Ruby gem is hosted at a git repository: <https://{{gitHost}}/{{gitUserId}}{{^gitUserId}}YOUR_GIT_USERNAME{{/gitUserId}}/{{gitRepoId}}{{^gitRepoId}}YOUR_GIT_REPO{{/gitRepoId}}>, then add the following in the Gemfile:

```ruby
    # Example
    gem 'crimson-falcon', :git => 'https://github.com/CrowdStrike/crimson-falcon.git'
```

## Getting Started

Eager to take flight? Follow the [installation](#installation) process, and then launch into the following code:

```ruby
# Load the gem
require '{{{gemName}}}'

# Setup authorization
Falcon.configure do |config|
  config.client_id = "Your_Client_ID"
  config.client_secret = "Your_Client_Secret"
  config.cloud = "us-1" # or "us-2", "eu-1", "us-gov1"
end

# Create a new API instance
api_instance = Falcon::AlertsApi.new
opts = {
  # Integer | The starting point for the return, `0` implies the latest detection.
  # The `offset` parameter assists in paginating results.
  offset: 0,
  # Integer | The maximum count of detections in this response (default: 100; max: 10000).
  # Works in tandem with the `offset` for pagination.
  limit: 25,
  # String | Sort detections in `asc` (ascending) or `desc` (descending) order.
  # Example: `status|asc` or `status|desc`.
  sort: 'Sort_Criteria',
  # String | Filter detections using a query in Falcon Query Language (FQL).
  # An asterisk wildcard `*` includes all results. See API docs for more details.
  filter: 'Filter_Criteria',
  # String | Search all detection metadata for the provided string
  q: 'Query_String'
}

begin
  # Retrieves all Alerts ids that match a given query
  result = api_instance.get_queries_alerts_v1(opts)
  p result
rescue Falcon::ApiError => e
  puts "Exception when calling AlertsApi->get_queries_alerts_v1: #{e}"
end
```

Welcome aboard the Crimson Falcon! Fly high, code with grace.

## Contribute to Crimson Falcon

We are always excited to have contributions from the community! It's what makes open source truly powerful. If you are looking to help out, that's awesome and we thank you in advance.

To get started, please read our [Contributing Guide](./CONTRIBUTING.md) that explains the development process, the project structure, how to propose bugfixes and improvements, and how to build and test your changes to the project. It's a set of directions that will help establish a baseline of expectation for any contributions.

Please make sure you also follow our [Code of Conduct](./CODE_OF_CONDUCT.md). It outlines our expectations for participant behavior as well as the steps for reporting unacceptable behavior.

We appreciate your interest in our project and look forward to collaborating with you!

## Crimson Falcon API Docs

> :recycle: ***API Docs are automatically generated from the CrowdStrike API specification.*** :recycle:

---
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
**Class**: `{{moduleName}}::{{classname}}`

- **Operation**: [**{{operationId}}**]({{apiDocPath}}{{classname}}.md#{{operationId}})
- **{{httpMethod}}**: {{path}}
- **Description**: {{summary}}

---
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}
