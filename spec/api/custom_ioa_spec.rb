=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'spec_helper'
require 'json'

# Unit tests for Falcon::CustomIoa
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'CustomIoa' do
  before(:all) do
    # run before each test
    @api_instance = Falcon::CustomIoa.new
  end

  after(:all) do
    # run after each test
  end

  describe 'test an instance of CustomIoa' do
    it 'should create an instance of CustomIoa' do
      expect(@api_instance).to be_instance_of(Falcon::CustomIoa)
    end
  end

  # unit tests for create_rule
  # Create a rule within a rule group. Returns the rule.
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [ApiRulesResponse]
  describe 'create_rule test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_rule_group_mixin0
  # Create a rule group for a platform with a name and an optional description. Returns the rule group.
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [ApiRuleGroupsResponse]
  describe 'create_rule_group_mixin0 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_rule_groups_mixin0
  # Delete rule groups by ID.
  # @param ids The IDs of the entities
  # @param [Hash] opts the optional parameters
  # @option opts [String] :comment Explains why the entity is being deleted
  # @return [MsaReplyMetaOnly]
  describe 'delete_rule_groups_mixin0 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_rules_0
  # Delete rules from a rule group by ID.
  # @param rule_group_id The parent rule group
  # @param ids The IDs of the entities
  # @param [Hash] opts the optional parameters
  # @option opts [String] :comment Explains why the entity is being deleted
  # @return [MsaReplyMetaOnly]
  describe 'delete_rules_0 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_patterns
  # Get pattern severities by ID.
  # @param ids The IDs of the entities
  # @param [Hash] opts the optional parameters
  # @return [ApiPatternsResponse]
  describe 'get_patterns test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_platforms_mixin0
  # Get platforms by ID.
  # @param ids The IDs of the entities
  # @param [Hash] opts the optional parameters
  # @return [ApiPlatformsResponse]
  describe 'get_platforms_mixin0 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_rule_groups_mixin0
  # Get rule groups by ID.
  # @param ids The IDs of the entities
  # @param [Hash] opts the optional parameters
  # @return [ApiRuleGroupsResponse]
  describe 'get_rule_groups_mixin0 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_rule_types
  # Get rule types by ID.
  # @param ids The IDs of the entities
  # @param [Hash] opts the optional parameters
  # @return [ApiRuleTypesResponse]
  describe 'get_rule_types test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_rules_get
  # Get rules by ID and optionally with cid and/or version in the following format: &#x60;[cid:]ID[:version]&#x60;.
  # @param body The \&quot;ids\&quot; field contains a list of the rules to retrieve.
  # @param [Hash] opts the optional parameters
  # @return [ApiRulesResponse]
  describe 'get_rules_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_rules_mixin0
  # Get rules by ID and optionally with cid and/or version in the following format: &#x60;[cid:]ID[:version]&#x60;. The max number of IDs is constrained by URL size.
  # @param ids The IDs of the entities
  # @param [Hash] opts the optional parameters
  # @return [ApiRulesResponse]
  describe 'get_rules_mixin0 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for query_patterns
  # Get all pattern severity IDs.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :offset Starting index of overall result set from which to return IDs
  # @option opts [Integer] :limit Number of IDs to return
  # @return [MsaQueryResponse]
  describe 'query_patterns test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for query_platforms_mixin0
  # Get all platform IDs.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :offset Starting index of overall result set from which to return IDs
  # @option opts [Integer] :limit Number of IDs to return
  # @return [MsaQueryResponse]
  describe 'query_platforms_mixin0 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for query_rule_groups_full
  # Find all rule groups matching the query with optional filter.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :sort Possible order by fields: {created_by, created_on, enabled, modified_by, modified_on, name}
  # @option opts [String] :filter FQL query specifying the filter parameters. Filter term criteria: [enabled platform name description rules.action_label rules.name rules.description rules.pattern_severity rules.ruletype_name rules.enabled]. Filter range criteria: created_on, modified_on; use any common date format, such as &#39;2010-05-15T14:55:21.892315096Z&#39;.
  # @option opts [String] :q Match query criteria, which includes all the filter string fields
  # @option opts [String] :offset Starting index of overall result set from which to return IDs
  # @option opts [Integer] :limit Number of IDs to return
  # @return [ApiRuleGroupsResponse]
  describe 'query_rule_groups_full test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for query_rule_groups_mixin0
  # Finds all rule group IDs matching the query with optional filter.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :sort Possible order by fields: {created_by, created_on, enabled, modified_by, modified_on, name}
  # @option opts [String] :filter FQL query specifying the filter parameters. Filter term criteria: [enabled platform name description rules.action_label rules.name rules.description rules.pattern_severity rules.ruletype_name rules.enabled]. Filter range criteria: created_on, modified_on; use any common date format, such as &#39;2010-05-15T14:55:21.892315096Z&#39;.
  # @option opts [String] :q Match query criteria, which includes all the filter string fields
  # @option opts [String] :offset Starting index of overall result set from which to return IDs
  # @option opts [Integer] :limit Number of IDs to return
  # @return [MsaQueryResponse]
  describe 'query_rule_groups_mixin0 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for query_rule_types
  # Get all rule type IDs.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :offset Starting index of overall result set from which to return IDs
  # @option opts [Integer] :limit Number of IDs to return
  # @return [MsaQueryResponse]
  describe 'query_rule_types test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for query_rules_mixin0
  # Finds all rule IDs matching the query with optional filter.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :sort Possible order by fields: {rules.created_by, rules.created_on, rules.current_version.action_label, rules.current_version.description, rules.current_version.modified_by, rules.current_version.modified_on, rules.current_version.name, rules.current_version.pattern_severity, rules.enabled, rules.ruletype_name}
  # @option opts [String] :filter FQL query specifying the filter parameters. Filter term criteria: [enabled platform name description rules.action_label rules.name rules.description rules.pattern_severity rules.ruletype_name rules.enabled]. Filter range criteria: created_on, modified_on; use any common date format, such as &#39;2010-05-15T14:55:21.892315096Z&#39;.
  # @option opts [String] :q Match query criteria, which includes all the filter string fields
  # @option opts [String] :offset Starting index of overall result set from which to return IDs
  # @option opts [Integer] :limit Number of IDs to return
  # @return [MsaQueryResponse]
  describe 'query_rules_mixin0 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_rule_group_mixin0
  # Update a rule group. The following properties can be modified: name, description, enabled.
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [ApiRuleGroupsResponse]
  describe 'update_rule_group_mixin0 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_rules_0
  # Update rules within a rule group. Return the updated rules.
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [ApiRulesResponse]
  describe 'update_rules_0 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_rules_v2
  # Update name, description, enabled or field_values for individual rules within a rule group. The v1 flavor of this call requires the caller to specify the complete state for all the rules in the rule group, instead the v2 flavor will accept the subset of rules in the rule group and apply the attribute updates to the subset of rules in the rule group.Return the updated rules.
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [ApiRulesResponse]
  describe 'update_rules_v2 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for validate
  # Validates field values and checks for matches if a test string is provided.
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [ApiValidationResponseV1]
  describe 'validate test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
