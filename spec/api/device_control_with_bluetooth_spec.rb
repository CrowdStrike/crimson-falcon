=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'spec_helper'
require 'json'

# Unit tests for Falcon::DeviceControlWithBluetooth
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'DeviceControlWithBluetooth' do
  before(:all) do
    # run before each test
    @api_instance = Falcon::DeviceControlWithBluetooth.new
  end

  after(:all) do
    # run after each test
  end

  describe 'test an instance of DeviceControlWithBluetooth' do
    it 'should create an instance of DeviceControlWithBluetooth' do
      expect(@api_instance).to be_instance_of(Falcon::DeviceControlWithBluetooth)
    end
  end

  # unit tests for get_default_device_control_settings
  # Get default device control settings (USB and Bluetooth)
  # @param [Hash] opts the optional parameters
  # @return [DeviceControlRespDefaultSettingV1]
  describe 'get_default_device_control_settings test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_device_control_policies_v2
  # Get device control policies for the given filter criteria. (USB and Bluetooth)
  # @param ids The IDs of the policies to get
  # @param [Hash] opts the optional parameters
  # @return [DevicecontrolapiRespPoliciesV2]
  describe 'get_device_control_policies_v2 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for patch_device_control_policies_classes_v1
  # Update device control policy&#39;s classes (USB and Bluetooth)
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [DevicecontrolapiRespPoliciesV2]
  describe 'patch_device_control_policies_classes_v1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for patch_device_control_policies_v2
  # Update device control policy base (USB and Bluetooth)
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [DevicecontrolapiRespPoliciesV2]
  describe 'patch_device_control_policies_v2 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for post_device_control_policies_v2
  # Create/clone a device control policy (USB and Bluetooth)
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [DevicecontrolapiRespPoliciesV2]
  describe 'post_device_control_policies_v2 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_default_device_control_settings
  # Update the configuration for Default Device Control Settings
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [DeviceControlRespDefaultSettingV1]
  describe 'update_default_device_control_settings test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
