=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'spec_helper'
require 'json'

# Unit tests for Falcon::ContainerImages
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ContainerImages' do
  before(:all) do
    # run before each test
    @api_instance = Falcon::ContainerImages.new
  end

  after(:all) do
    # run after each test
  end

  describe 'test an instance of ContainerImages' do
    it 'should create an instance of ContainerImages' do
      expect(@api_instance).to be_instance_of(Falcon::ContainerImages)
    end
  end

  # unit tests for aggregate_image_assessment_history
  # Image assessment history
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter using a query in Falcon Query Language (FQL). Supported filter fields: - &#x60;cid&#x60; - &#x60;registry&#x60; - &#x60;repository&#x60;
  # @return [ImagesApiImageAssessmentHistory]
  describe 'aggregate_image_assessment_history test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for aggregate_image_count
  # Aggregate count of images
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter images using a query in Falcon Query Language (FQL). Supported filter fields: - &#x60;ai_related&#x60; - &#x60;arch&#x60; - &#x60;base_os&#x60; - &#x60;cid&#x60; - &#x60;container_id&#x60; - &#x60;container_running_status&#x60; - &#x60;cps_rating&#x60; - &#x60;crowdstrike_user&#x60; - &#x60;cve_id&#x60; - &#x60;detection_count&#x60; - &#x60;detection_name&#x60; - &#x60;detection_severity&#x60; - &#x60;first_seen&#x60; - &#x60;image_digest&#x60; - &#x60;image_id&#x60; - &#x60;include_base_image_vuln&#x60; - &#x60;layer_digest&#x60; - &#x60;package_name_version&#x60; - &#x60;registry&#x60; - &#x60;repository&#x60; - &#x60;source&#x60; - &#x60;tag&#x60; - &#x60;vulnerability_count&#x60; - &#x60;vulnerability_severity&#x60;
  # @return [ImagesApiImageCount]
  describe 'aggregate_image_count test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for aggregate_image_count_by_base_os
  # Aggregate count of images grouped by Base OS distribution
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter images using a query in Falcon Query Language (FQL). Supported filter fields: - &#x60;registry&#x60; - &#x60;repository&#x60; - &#x60;tag&#x60;
  # @return [ImagesApiImageCountByBaseOS]
  describe 'aggregate_image_count_by_base_os test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for aggregate_image_count_by_state
  # Aggregate count of images grouped by state
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter images using a query in Falcon Query Language (FQL). Supported filter fields: - &#x60;registry&#x60; - &#x60;repository&#x60; - &#x60;tag&#x60;
  # @return [ImagesApiImageCountByState]
  describe 'aggregate_image_count_by_state test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for combined_base_images
  # Retrieves a list of base images for the provided filter. Maximum page size: 100
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Search base images using a query in Falcon Query Language (FQL). Supported filter fields: - &#x60;image_digest&#x60; - &#x60;image_id&#x60; - &#x60;registry&#x60; - &#x60;repository&#x60; - &#x60;tag&#x60;
  # @return [CoreEntitiesResponse]
  describe 'combined_base_images test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for combined_image_by_vulnerability_count
  # Retrieve top x images with the most vulnerabilities
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter images using a query in Falcon Query Language (FQL). Supported filter fields: - &#x60;registry&#x60; - &#x60;repository&#x60; - &#x60;tag&#x60;
  # @option opts [Integer] :limit The upper-bound on the number of records to retrieve.
  # @option opts [Integer] :offset The fields to sort the records on. **Not supported.**
  # @return [ImagesApiImageByVulnerabilityCount]
  describe 'combined_image_by_vulnerability_count test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for combined_image_detail
  # Maximum offset &#x3D; 10000 - limit
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter images using a query in Falcon Query Language (FQL). Supported filter fields: - &#x60;registry&#x60; - &#x60;repository&#x60; - &#x60;tag&#x60;
  # @option opts [Boolean] :with_config (true/false) include image config, default is false
  # @option opts [String] :sort The fields to sort the records on.
  # @option opts [Integer] :limit The upper-bound on the number of records to retrieve.
  # @option opts [Integer] :offset The offset from where to begin.
  # @return [ImagesApiCustomerAndImage]
  describe 'combined_image_detail test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for combined_image_issues_summary
  # Retrieve image issues summary such as Image detections, Runtime detections, Policies, vulnerabilities
  # @param cid CS Customer ID
  # @param registry Registry
  # @param repository Repository name
  # @param tag Tag name
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :include_base_image_vuln Include base image vulnerabilities.
  # @return [ImagesApiImageIssuesSummary]
  describe 'combined_image_issues_summary test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for combined_image_vulnerability_summary
  # aggregates information about vulnerabilities for an image
  # @param cid CS Customer ID
  # @param registry Registry
  # @param repository Repository name
  # @param tag Tag name
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :include_base_image_vuln Include base image vulnerabilities.
  # @return [ImagesApiImageVulnerabilitiesSummary]
  describe 'combined_image_vulnerability_summary test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_base_images_entities
  # Creates base images using the provided details
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [CoreEntitiesResponse]
  describe 'create_base_images_entities test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_base_images
  # Delete base images by base image uuid
  # @param ids BaseImageIDs
  # @param [Hash] opts the optional parameters
  # @return [CoreEntitiesResponse]
  describe 'delete_base_images test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_combined_images
  # Maximum offset &#x3D; 10000 - limit
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter images using a query in Falcon Query Language (FQL). Supported filter fields: - &#x60;ai_related&#x60; - &#x60;container_id&#x60; - &#x60;container_running_status&#x60; - &#x60;cve_id&#x60; - &#x60;detection_name&#x60; - &#x60;detection_severity&#x60; - &#x60;first_seen&#x60; - &#x60;image_digest&#x60; - &#x60;image_id&#x60; - &#x60;registry&#x60; - &#x60;repository&#x60; - &#x60;tag&#x60; - &#x60;vulnerability_severity&#x60;
  # @option opts [String] :sort The fields to sort the records on. Supported columns: - &#x60;first_seen&#x60; - &#x60;highest_detection_severity&#x60; - &#x60;highest_vulnerability_severity&#x60; - &#x60;image_digest&#x60; - &#x60;image_id&#x60; - &#x60;registry&#x60; - &#x60;repository&#x60; - &#x60;source&#x60; - &#x60;tag&#x60;
  # @option opts [Integer] :limit The upper-bound on the number of records to retrieve.
  # @option opts [Integer] :offset The offset from where to begin.
  # @return [ImagesExtCombinedImagesResponse]
  describe 'get_combined_images test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_combined_images_export
  # Maximum offset &#x3D; 10000 - limit
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter images using a query in Falcon Query Language (FQL). Supported filter fields: - &#x60;ai_related&#x60; - &#x60;arch&#x60; - &#x60;base_os&#x60; - &#x60;cid&#x60; - &#x60;container_id&#x60; - &#x60;container_running_status&#x60; - &#x60;cps_rating&#x60; - &#x60;crowdstrike_user&#x60; - &#x60;cve_id&#x60; - &#x60;detection_count&#x60; - &#x60;detection_name&#x60; - &#x60;detection_severity&#x60; - &#x60;first_seen&#x60; - &#x60;image_digest&#x60; - &#x60;image_id&#x60; - &#x60;include_base_image_vuln&#x60; - &#x60;layer_digest&#x60; - &#x60;package_name_version&#x60; - &#x60;registry&#x60; - &#x60;repository&#x60; - &#x60;source&#x60; - &#x60;tag&#x60; - &#x60;vulnerability_count&#x60; - &#x60;vulnerability_severity&#x60;
  # @option opts [Boolean] :expand_vulnerabilities Expand vulnerabilities details
  # @option opts [Boolean] :expand_detections Expand detections details
  # @option opts [Integer] :limit The upper-bound on the number of records to retrieve.
  # @option opts [Integer] :offset The offset from where to begin.
  # @option opts [String] :sort The fields to sort the records on. Supported columns: - &#x60;base_os&#x60; - &#x60;cid&#x60; - &#x60;detections&#x60; - &#x60;firstScanned&#x60; - &#x60;first_seen&#x60; - &#x60;highest_cps_current_rating&#x60; - &#x60;highest_detection_severity&#x60; - &#x60;highest_vulnerability_severity&#x60; - &#x60;image_digest&#x60; - &#x60;image_id&#x60; - &#x60;last_seen&#x60; - &#x60;layers_with_vulnerabilities&#x60; - &#x60;packages&#x60; - &#x60;registry&#x60; - &#x60;repository&#x60; - &#x60;source&#x60; - &#x60;tag&#x60; - &#x60;vulnerabilities&#x60;
  # @return [ImagesApiCombinedImageExport]
  describe 'read_combined_images_export test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
