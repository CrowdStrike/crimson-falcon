=begin
#CrowdStrike API Specification

#Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and more information about API endpoints that don't yet support OAuth2, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation). To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`. Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.

The version of the OpenAPI document: 2022-10-19T15:57:46Z

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Falcon::ReconApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ReconApi' do
  before do
    # run before each test
    @api_instance = Falcon::ReconApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ReconApi' do
    it 'should create an instance of ReconApi' do
      expect(@api_instance).to be_instance_of(Falcon::ReconApi)
    end
  end

  # unit tests for aggregate_notifications_v1
  # Get notification aggregates as specified via JSON in request body.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [DomainAggregatesResponse]
  describe 'aggregate_notifications_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_actions_v1
  # Create actions for a monitoring rule. Accepts a list of actions that will be attached to the monitoring rule.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [DomainActionEntitiesResponseV1]
  describe 'create_actions_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_rules_v1
  # Create monitoring rules.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [DomainRulesEntitiesResponseV1]
  describe 'create_rules_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_action_v1
  # Delete an action from a monitoring rule based on the action ID.
  # @param id ID of the action.
  # @param [Hash] opts the optional parameters
  # @return [DomainQueryResponse]
  describe 'delete_action_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_notifications_v1
  # Delete notifications based on IDs. Notifications cannot be recovered after they are deleted.
  # @param ids Notifications IDs.
  # @param [Hash] opts the optional parameters
  # @return [DomainNotificationIDResponse]
  describe 'delete_notifications_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_rules_v1
  # Delete monitoring rules.
  # @param ids IDs of rules.
  # @param [Hash] opts the optional parameters
  # @return [DomainRuleQueryResponseV1]
  describe 'delete_rules_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_actions_v1
  # Get actions based on their IDs. IDs can be retrieved using the GET /queries/actions/v1 endpoint.
  # @param ids Action IDs.
  # @param [Hash] opts the optional parameters
  # @return [DomainActionEntitiesResponseV1]
  describe 'get_actions_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_notifications_detailed_translated_v1
  # Get detailed notifications based on their IDs. These include the raw intelligence content that generated the match.This endpoint will return translated notification content. The only target language available is English. A single notification can be translated per request
  # @param ids Notification IDs.
  # @param [Hash] opts the optional parameters
  # @return [DomainNotificationDetailsResponseV1]
  describe 'get_notifications_detailed_translated_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_notifications_detailed_v1
  # Get detailed notifications based on their IDs. These include the raw intelligence content that generated the match.
  # @param ids Notification IDs.
  # @param [Hash] opts the optional parameters
  # @return [DomainNotificationDetailsResponseV1]
  describe 'get_notifications_detailed_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_notifications_translated_v1
  # Get notifications based on their IDs. IDs can be retrieved using the GET /queries/notifications/v1 endpoint. This endpoint will return translated notification content. The only target language available is English.
  # @param ids Notification IDs.
  # @param [Hash] opts the optional parameters
  # @return [DomainNotificationEntitiesResponseV1]
  describe 'get_notifications_translated_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_notifications_v1
  # Get notifications based on their IDs. IDs can be retrieved using the GET /queries/notifications/v1 endpoint.
  # @param ids Notification IDs.
  # @param [Hash] opts the optional parameters
  # @return [DomainNotificationEntitiesResponseV1]
  describe 'get_notifications_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_rules_v1
  # Get monitoring rules based on their IDs. IDs can be retrieved using the GET /queries/rules/v1 endpoint.
  # @param ids IDs of rules.
  # @param [Hash] opts the optional parameters
  # @return [DomainRulesEntitiesResponseV1]
  describe 'get_rules_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for preview_rule_v1
  # Preview rules notification count and distribution. This will return aggregations on: channel, count, site.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [DomainAggregatesResponse]
  describe 'preview_rule_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for query_actions_v1
  # Query actions based on provided criteria. Use the IDs from this response to get the action entities on GET /entities/actions/v1.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :offset Starting index of overall result set from which to return IDs.
  # @option opts [Integer] :limit Number of IDs to return. Offset + limit should NOT be above 10K.
  # @option opts [String] :sort Possible order by fields: created_timestamp, updated_timestamp. Ex: &#39;updated_timestamp|desc&#39;.
  # @option opts [String] :filter FQL query to filter actions by. Possible filter properties are: [id cid user_uuid rule_id type frequency content_format trigger_matchless recipients status created_timestamp updated_timestamp]
  # @option opts [String] :q Free text search across all indexed fields
  # @return [DomainQueryResponse]
  describe 'query_actions_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for query_notifications_v1
  # Query notifications based on provided criteria. Use the IDs from this response to get the notification +entities on GET /entities/notifications/v1, GET /entities/notifications-detailed/v1, +GET /entities/notifications-translated/v1 or GET /entities/notifications-detailed-translated/v1.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :offset Starting index of overall result set from which to return IDs.
  # @option opts [Integer] :limit Number of IDs to return. Offset + limit should NOT be above 10K.
  # @option opts [String] :sort Possible order by fields: &#x60;created_date&#x60;, &#x60;updated_date&#x60;. Ex: &#x60;updated_date|desc&#x60;.
  # @option opts [String] :filter FQL query to filter notifications by. Possible filter properties are: &#x60;typosquatting.parent_domain.unicode_format&#x60;, &#x60;typosquatting.id&#x60;, &#x60;typosquatting.base_domain.whois.name_servers&#x60;, &#x60;rule_id&#x60;, &#x60;item_site&#x60;, &#x60;typosquatting.base_domain.is_registered&#x60;, &#x60;assigned_to_uuid&#x60;, &#x60;rule_priority&#x60;, &#x60;typosquatting.base_domain.punycode_format&#x60;, &#x60;typosquatting.base_domain.id&#x60;, &#x60;rule_name&#x60;, &#x60;typosquatting.unicode_format&#x60;, &#x60;rule_topic&#x60;, &#x60;item_type&#x60;, &#x60;typosquatting.base_domain.whois.registrant.email&#x60;, &#x60;cid&#x60;, &#x60;status&#x60;, &#x60;typosquatting.base_domain.whois.registrar.name&#x60;, &#x60;typosquatting.base_domain.whois.registrar.status&#x60;, &#x60;typosquatting.base_domain.whois.registrant.org&#x60;, &#x60;typosquatting.parent_domain.id&#x60;, &#x60;typosquatting.base_domain.unicode_format&#x60;, &#x60;updated_date&#x60;, &#x60;typosquatting.base_domain.whois.registrant.name&#x60;, &#x60;created_date&#x60;, &#x60;typosquatting.punycode_format&#x60;, &#x60;typosquatting.parent_domain.punycode_format&#x60;, &#x60;id&#x60;, &#x60;user_uuid&#x60;
  # @option opts [String] :q Free text search across all indexed fields.
  # @return [DomainQueryResponse]
  describe 'query_notifications_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for query_rules_v1
  # Query monitoring rules based on provided criteria. Use the IDs from this response to fetch the rules on /entities/rules/v1.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :offset Starting index of overall result set from which to return IDs.
  # @option opts [Integer] :limit Number of IDs to return. Offset + limit should NOT be above 10K.
  # @option opts [String] :sort Possible order by fields: created_timestamp, last_updated_timestamp. Ex: &#x60;last_updated_timestamp|desc&#x60;.
  # @option opts [String] :filter FQL query to filter rules by. Possible filter properties are: &#x60;priority&#x60;, &#x60;permissions&#x60;, &#x60;breach_monitoring_enabled&#x60;, &#x60;substring_matching_enabled&#x60;, &#x60;last_updated_timestamp&#x60;, &#x60;user_uuid&#x60;, &#x60;topic&#x60;, &#x60;status&#x60;, &#x60;filter&#x60;, &#x60;created_timestamp&#x60;, &#x60;id&#x60;, &#x60;cid&#x60;.
  # @option opts [String] :q Free text search across all indexed fields.
  # @return [DomainRuleQueryResponseV1]
  describe 'query_rules_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_action_v1
  # Update an action for a monitoring rule.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [DomainActionEntitiesResponseV1]
  describe 'update_action_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_notifications_v1
  # Update notification status or assignee. Accepts bulk requests
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [DomainNotificationEntitiesResponseV1]
  describe 'update_notifications_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_rules_v1
  # Update monitoring rules.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [DomainRulesEntitiesResponseV1]
  describe 'update_rules_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
