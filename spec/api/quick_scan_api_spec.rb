=begin
#CrowdStrike API Specification

#Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.

The version of the OpenAPI document: 2023-05-30T23:10:32Z

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Falcon::QuickScanApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'QuickScanApi' do
  before do
    # run before each test
    @api_instance = Falcon::QuickScanApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of QuickScanApi' do
    it 'should create an instance of QuickScanApi' do
      expect(@api_instance).to be_instance_of(Falcon::QuickScanApi)
    end
  end

  # unit tests for get_scans
  # Check the status of a volume scan. Time required for analysis increases with the number of samples in a volume but usually it should take less than 1 minute
  # @param ids ID of a submitted scan
  # @param [Hash] opts the optional parameters
  # @return [MlscannerapiScanV1Response]
  describe 'get_scans test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_scans_aggregates
  # Get scans aggregations as specified via json in request body.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_scans_aggregates test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for query_submissions_mixin0
  # Find IDs for submitted scans by providing an FQL filter and paging details. Returns a set of volume IDs that match your criteria.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Optional filter and sort criteria in the form of an FQL query. For more information about FQL queries, see [our FQL documentation in Falcon](https://falcon.crowdstrike.com/support/documentation/45/falcon-query-language-feature-guide).
  # @option opts [String] :offset The offset to start retrieving submissions from.
  # @option opts [Integer] :limit Maximum number of volume IDs to return. Max: 5000.
  # @option opts [String] :sort Sort order: &#x60;asc&#x60; or &#x60;desc&#x60;.
  # @return [MlscannerapiQueryResponse]
  describe 'query_submissions_mixin0 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for scan_samples
  # Submit a volume of files for ml scanning. Time required for analysis increases with the number of samples in a volume but usually it should take less than 1 minute
  # @param body Submit a batch of SHA256s for ml scanning. The samples must have been previously uploaded through &#x60;/samples/entities/samples/v3&#x60;
  # @param [Hash] opts the optional parameters
  # @return [MlscannerapiQueryResponse]
  describe 'scan_samples test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
