=begin
#CrowdStrike API Specification

#Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and more information about API endpoints that don't yet support OAuth2, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation). To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`. Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.

The version of the OpenAPI document: 2022-10-19T15:57:46Z

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Falcon::SensorVisibilityExclusionsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'SensorVisibilityExclusionsApi' do
  before do
    # run before each test
    @api_instance = Falcon::SensorVisibilityExclusionsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of SensorVisibilityExclusionsApi' do
    it 'should create an instance of SensorVisibilityExclusionsApi' do
      expect(@api_instance).to be_instance_of(Falcon::SensorVisibilityExclusionsApi)
    end
  end

  # unit tests for create_sv_exclusions_v1
  # Create the sensor visibility exclusions
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [ResponsesMlExclusionRespV1]
  describe 'create_sv_exclusions_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_sensor_visibility_exclusions_v1
  # Delete the sensor visibility exclusions by id
  # @param ids The ids of the exclusions to delete
  # @param [Hash] opts the optional parameters
  # @option opts [String] :comment Explains why this exclusions was deleted
  # @return [MsaQueryResponse]
  describe 'delete_sensor_visibility_exclusions_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_sensor_visibility_exclusions_v1
  # Get a set of Sensor Visibility Exclusions by specifying their IDs
  # @param ids The ids of the exclusions to retrieve
  # @param [Hash] opts the optional parameters
  # @return [ResponsesSvExclusionRespV1]
  describe 'get_sensor_visibility_exclusions_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for query_sensor_visibility_exclusions_v1
  # Search for sensor visibility exclusions.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter The filter expression that should be used to limit the results.
  # @option opts [Integer] :offset The offset to start retrieving records from
  # @option opts [Integer] :limit The maximum records to return. [1-500]
  # @option opts [String] :sort The sort expression that should be used to sort the results.
  # @return [MsaQueryResponse]
  describe 'query_sensor_visibility_exclusions_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_sensor_visibility_exclusions_v1
  # Update the sensor visibility exclusions
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [ResponsesSvExclusionRespV1]
  describe 'update_sensor_visibility_exclusions_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
