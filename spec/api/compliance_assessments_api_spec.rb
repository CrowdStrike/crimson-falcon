=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'spec_helper'
require 'json'

# Unit tests for Falcon::ComplianceAssessments
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ComplianceAssessments' do
  before do
    # run before each test
    @api_instance = Falcon::ComplianceAssessments.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ComplianceAssessments' do
    it 'should create an instance of ComplianceAssessments' do
      expect(@api_instance).to be_instance_of(Falcon::ComplianceAssessments)
    end
  end

  # unit tests for ext_aggregate_cluster_assessments
  # get the assessments for each cluster
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: cloud_info.cluster_name: Kubernetes cluster name cloud_info.namespace: Kubernetes namespace cid: Customer ID cloud_info.cloud_account_id: Cloud account ID cloud_info.cloud_provider: Cloud provider cloud_info.cloud_region: Cloud region compliance_finding.framework: Compliance finding framework (available values: CIS)
  # @return [DomainAggregateClusterAssessmentsResponse]
  describe 'ext_aggregate_cluster_assessments test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for ext_aggregate_failed_containers_by_rules_path
  # get the containers grouped into rules on which they failed
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: compliance_finding.name: Compliance finding Name cloud_info.namespace: Kubernetes namespace cloud_info.cloud_provider: Cloud provider compliance_finding.framework: Compliance finding framework (available values: CIS) compliance_finding.id: Compliance finding ID image_digest: Image digest (sha256 digest) cloud_info.cloud_region: Cloud region image_registry: Image registry compliance_finding.severity: Compliance finding severity; available values: 4, 3, 2, 1 (4: critical, 3: high, 2: medium, 1:low) image_repository: Image repository cid: Customer ID image_id: Image ID image_tag: Image tag cloud_info.cloud_account_id: Cloud account ID cloud_info.cluster_name: Kubernetes cluster name
  # @return [DomainAggregateFailedAssetsByRulesResponse]
  describe 'ext_aggregate_failed_containers_by_rules_path test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for ext_aggregate_failed_containers_count_by_severity
  # get the failed containers count grouped into severity levels
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: cloud_info.namespace: Kubernetes namespace compliance_finding.framework: Compliance finding framework (available values: CIS) cloud_info.cluster_name: Kubernetes cluster name cloud_info.cloud_provider: Cloud provider image_repository: Image repository cid: Customer ID image_tag: Image tag image_registry: Image registry compliance_finding.severity: Compliance finding severity; available values: 4, 3, 2, 1 (4: critical, 3: high, 2: medium, 1:low) image_digest: Image digest (sha256 digest) cloud_info.cloud_account_id: Cloud account ID cloud_info.cloud_region: Cloud region image_id: Image ID compliance_finding.name: Compliance finding Name compliance_finding.id: Compliance finding ID
  # @return [DomainAggregateFailedAssetCountBySeverityResponse]
  describe 'ext_aggregate_failed_containers_count_by_severity test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for ext_aggregate_failed_images_by_rules_path
  # get the images grouped into rules on which they failed
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: compliance_finding.id: Compliance finding ID compliance_finding.name: Compliance finding Name compliance_finding.framework: Compliance finding framework (available values: CIS) cloud_info.namespace: Kubernetes namespace image_repository: Image repository image_digest: Image digest (sha256 digest) image_tag: Image tag image_id: Image ID image_registry: Image registry cloud_info.cloud_account_id: Cloud account ID cloud_info.cloud_region: Cloud region cid: Customer ID compliance_finding.severity: Compliance finding severity; available values: 4, 3, 2, 1 (4: critical, 3: high, 2: medium, 1:low) cloud_info.cluster_name: Kubernetes cluster name cloud_info.cloud_provider: Cloud provider
  # @return [DomainAggregateFailedAssetsByRulesResponse]
  describe 'ext_aggregate_failed_images_by_rules_path test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for ext_aggregate_failed_images_count_by_severity
  # get the failed images count grouped into severity levels
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: compliance_finding.name: Compliance finding Name image_registry: Image registry cloud_info.cluster_name: Kubernetes cluster name compliance_finding.id: Compliance finding ID image_id: Image ID image_tag: Image tag cloud_info.cloud_account_id: Cloud account ID compliance_finding.severity: Compliance finding severity; available values: 4, 3, 2, 1 (4: critical, 3: high, 2: medium, 1:low) cloud_info.namespace: Kubernetes namespace image_digest: Image digest (sha256 digest) cloud_info.cloud_provider: Cloud provider cloud_info.cloud_region: Cloud region compliance_finding.framework: Compliance finding framework (available values: CIS) image_repository: Image repository cid: Customer ID
  # @return [DomainAggregateFailedAssetCountBySeverityResponse]
  describe 'ext_aggregate_failed_images_count_by_severity test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for ext_aggregate_failed_rules_by_clusters
  # get the failed rules for each cluster grouped into severity levels
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: image_registry: Image registry compliance_finding.framework: Compliance finding framework (available values: CIS) compliance_finding.id: Compliance finding ID image_tag: Image tag compliance_finding.name: Compliance finding Name image_repository: Image repository cloud_info.cluster_name: Kubernetes cluster name image_digest: Image digest (sha256 digest) cloud_info.cloud_provider: Cloud provider image_id: Image ID cloud_info.cloud_region: Cloud region cid: Customer ID compliance_finding.severity: Compliance finding severity; available values: 4, 3, 2, 1 (4: critical, 3: high, 2: medium, 1:low) asset_type: asset type (container, image) cloud_info.cloud_account_id: Cloud account ID
  # @return [DomainAggregateFailedRulesByClustersResponse]
  describe 'ext_aggregate_failed_rules_by_clusters test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for ext_aggregate_failed_rules_by_images
  # get images with failed rules, rule count grouped by severity for each image
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: cloud_info.cloud_account_id: Cloud account ID cloud_info.cloud_provider: Cloud provider cloud_info.cloud_region: Cloud region compliance_finding.severity: Compliance finding severity; available values: 4, 3, 2, 1 (4: critical, 3: high, 2: medium, 1:low) image_repository: Image repository compliance_finding.framework: Compliance finding framework (available values: CIS) image_id: Image ID image_registry: Image registry asset_type: asset type (container, image) compliance_finding.name: Compliance finding Name compliance_finding.id: Compliance finding ID cid: Customer ID image_tag: Image tag cloud_info.namespace: Kubernetes namespace image_digest: Image digest (sha256 digest) cloud_info.cluster_name: Kubernetes cluster name
  # @return [DomainAggregateFailedRulesByImagesResponse]
  describe 'ext_aggregate_failed_rules_by_images test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for ext_aggregate_failed_rules_count_by_severity
  # get the failed rules count grouped into severity levels
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: image_digest: Image digest (sha256 digest) cloud_info.cluster_name: Kubernetes cluster name image_registry: Image registry image_id: Image ID image_tag: Image tag compliance_finding.framework: Compliance finding framework (available values: CIS) image_repository: Image repository compliance_finding.id: Compliance finding ID asset_type: asset type (container, image) cloud_info.cloud_account_id: Cloud account ID cid: Customer ID compliance_finding.severity: Compliance finding severity; available values: 4, 3, 2, 1 (4: critical, 3: high, 2: medium, 1:low) compliance_finding.name: Compliance finding Name cloud_info.cloud_provider: Cloud provider cloud_info.cloud_region: Cloud region
  # @return [DomainAggregateFailedRulesCountBySeverityResponse]
  describe 'ext_aggregate_failed_rules_count_by_severity test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for ext_aggregate_image_assessments
  # get the assessments for each image
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: cid: Customer ID compliance_finding.framework: Compliance finding framework (available values: CIS) image_digest: Image digest (sha256 digest) cloud_info.cloud_provider: Cloud provider cloud_info.namespace: Kubernetes namespace asset_type: asset type (container, image) cloud_info.cloud_region: Cloud region image_registry: Image registry image_repository: Image repository image_id: Image ID image_tag: Image tag cloud_info.cloud_account_id: Cloud account ID cloud_info.cluster_name: Kubernetes cluster name compliance_finding.id: Compliance finding ID compliance_finding.severity: Compliance finding severity; available values: 4, 3, 2, 1 (4: critical, 3: high, 2: medium, 1:low) compliance_finding.name: Compliance finding Name
  # @option opts [String] :after &#39;after&#39; value from the last response. Keep it empty for the first request.
  # @option opts [String] :limit number of images to return in the response after &#39;after&#39; key. Keep it empty for the default number of 10000
  # @return [DomainAggregateImageAssessmentsResponse]
  describe 'ext_aggregate_image_assessments test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for ext_aggregate_rules_assessments
  # get the assessments for each rule
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: cloud_info.cloud_account_id: Cloud account ID cloud_info.cloud_provider: Cloud provider compliance_finding.severity: Compliance finding severity; available values: 4, 3, 2, 1 (4: critical, 3: high, 2: medium, 1:low) image_tag: Image tag compliance_finding.framework: Compliance finding framework (available values: CIS) image_repository: Image repository compliance_finding.id: Compliance finding ID cloud_info.cloud_region: Cloud region image_id: Image ID image_registry: Image registry compliance_finding.name: Compliance finding Name image_digest: Image digest (sha256 digest) cloud_info.cluster_name: Kubernetes cluster name cid: Customer ID
  # @return [DomainAggregateRulesAssessmentsResponse]
  describe 'ext_aggregate_rules_assessments test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for ext_aggregate_rules_by_status
  # get the rules grouped by their statuses
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: cloud_info.cluster_name: Kubernetes cluster name compliance_finding.id: Compliance finding ID cloud_info.cloud_provider: Cloud provider compliance_finding.name: Compliance finding Name compliance_finding.framework: Compliance finding framework (available values: CIS) container_name: Container name container_id: Container ID image_registry: Image registry compliance_finding.severity: Compliance finding severity; available values: 4, 3, 2, 1 (4: critical, 3: high, 2: medium, 1:low) image_digest: Image digest (sha256 digest) image_id: Image ID image_tag: Image tag image_repository: Image repository asset_type: asset type (container, image) cloud_info.cloud_account_id: Cloud account ID cloud_info.cloud_region: Cloud region cid: Customer ID
  # @return [DomainAggregateRulesByStatusResponse]
  describe 'ext_aggregate_rules_by_status test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
