=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'spec_helper'
require 'json'

# Unit tests for Falcon::KubernetesProtectionApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'KubernetesProtectionApi' do
  before do
    # run before each test
    @api_instance = Falcon::KubernetesProtectionApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of KubernetesProtectionApi' do
    it 'should create an instance of KubernetesProtectionApi' do
      expect(@api_instance).to be_instance_of(Falcon::KubernetesProtectionApi)
    end
  end

  # unit tests for create_aws_account
  # Creates a new AWS account in our system for a customer and generates the installation script
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [K8sregCreateAWSAccResp]
  describe 'create_aws_account test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_azure_subscription
  # Creates a new Azure Subscription in our system
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [MsaBaseEntitiesResponse]
  describe 'create_azure_subscription test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_aws_accounts_mixin0
  # Delete AWS accounts.
  # @param ids AWS Account IDs
  # @param [Hash] opts the optional parameters
  # @return [MsaspecMetaInfo]
  describe 'delete_aws_accounts_mixin0 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_azure_subscription
  # Deletes a new Azure Subscription in our system
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :ids Azure Subscription IDs
  # @return [MsaBaseEntitiesResponse]
  describe 'delete_azure_subscription test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for find_containers_by_container_run_time_version
  # Retrieve containers by container_runtime_version
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit The upper-bound on the number of container records to retrieve.
  # @option opts [Integer] :offset It is used to get the offset
  # @option opts [String] :sort Field to sort results by
  # @option opts [String] :filter Retrieve count of Kubernetes containers that match a query in Falcon Query Language (FQL). Supported filters:  agent_id,agent_type,allow_privilege_escalation,cid,cloud_account_id,cloud_name,cloud_region,cluster_id,cluster_name,container_id,container_name,cve_id,detection_name,first_seen,image_detection_count,image_digest,image_has_been_assessed,image_id,image_registry,image_repository,image_tag,image_vulnerability_count,insecure_mount_source,insecure_mount_type,insecure_propagation_mode,interactive_mode,ipv4,ipv6,labels,last_seen,namespace,node_name,node_uid,package_name_version,pod_id,pod_name,port,privileged,root_write_access,run_as_root_group,run_as_root_user,running_status
  # @return [ModelsContainerRuntimePivotResponse]
  describe 'find_containers_by_container_run_time_version test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for find_containers_count_affected_by_zero_day_vulnerabilities
  # Retrieve containers count affected by zero day vulnerabilities
  # @param [Hash] opts the optional parameters
  # @return [CommonCountResponse]
  describe 'find_containers_count_affected_by_zero_day_vulnerabilities test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_aws_accounts_mixin0
  # Provides a list of AWS accounts.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :ids AWS Account IDs
  # @option opts [String] :is_horizon_acct Filter by whether an account originates from Horizon or not
  # @option opts [String] :status Filter by account status
  # @option opts [Integer] :limit Limit returned accounts
  # @option opts [Integer] :offset Offset returned accounts
  # @return [K8sregGetAWSAccountsResp]
  describe 'get_aws_accounts_mixin0 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_azure_install_script
  # Provides the script to run for a given tenant id and subscription IDs
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id Azure Tenant ID
  # @option opts [Array<String>] :subscription_id Azure Subscription IDs
  # @return [K8sregGetAzureBashScriptResp]
  describe 'get_azure_install_script test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_azure_tenant_config
  # Gets the Azure tenant Config
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :ids Azure Tenant IDs
  # @option opts [Integer] :limit Limit returned accounts
  # @option opts [Integer] :offset Offset returned accounts
  # @return [K8sregGetAzureTenantConfigResp]
  describe 'get_azure_tenant_config test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_azure_tenant_ids
  # Provides all the azure subscriptions and tenants
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :ids Azure Tenant IDs
  # @option opts [String] :status Cluster Status
  # @option opts [Integer] :limit Limit returned accounts
  # @option opts [Integer] :offset Offset returned accounts
  # @return [K8sregGetAzureTenantInfoResp]
  describe 'get_azure_tenant_ids test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_clusters
  # Provides the clusters acknowledged by the Kubernetes Protection service
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :cluster_names Cluster name. For EKS it will be cluster ARN.
  # @option opts [Array<String>] :status Cluster Status
  # @option opts [Array<String>] :account_ids Cluster Account id. For EKS it will be AWS account ID.
  # @option opts [Array<String>] :locations Cloud location
  # @option opts [String] :cluster_service Cluster Service
  # @option opts [Integer] :limit Limit returned accounts
  # @option opts [Integer] :offset Offset returned accounts
  # @return [K8sregGetClustersResp]
  describe 'get_clusters test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_combined_cloud_clusters
  # Returns a combined list of provisioned cloud accounts and known kubernetes clusters
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :locations Cloud location
  # @option opts [Array<String>] :ids Cloud Account IDs
  # @option opts [Array<String>] :cluster_service Cluster Service
  # @option opts [Array<String>] :cluster_status Cluster Status
  # @option opts [Integer] :limit Limit returned accounts
  # @option opts [Integer] :offset Offset returned accounts
  # @return [K8sregListClusterCloudResp]
  describe 'get_combined_cloud_clusters test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_helm_values_yaml
  # Provides a sample Helm values.yaml file for a customer to install alongside the agent Helm chart
  # @param cluster_name Cluster name. For EKS it will be cluster ARN.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :is_self_managed_cluster Set to true if the cluster is not managed by a cloud provider, false if it is.
  # @return [Object]
  describe 'get_helm_values_yaml test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_locations
  # Provides the cloud locations acknowledged by the Kubernetes Protection service
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :clouds Cloud Provider
  # @return [K8sregGetLocationsResp]
  describe 'get_locations test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_static_scripts
  # Gets static bash scripts that are used during registration
  # @param [Hash] opts the optional parameters
  # @return [K8sregGetScriptsResp]
  describe 'get_static_scripts test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for group_containers_by_managed
  # Group the containers by Managed
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Retrieve count of Kubernetes containers that match a query in Falcon Query Language (FQL). Supported filters:  agent_id,allow_privilege_escalation,cid,cloud_account_id,cloud_name,cloud_region,cluster_id,cluster_name,container_id,container_name,cve_id,detection_name,first_seen,image_detection_count,image_digest,image_has_been_assessed,image_id,image_registry,image_repository,image_tag,image_vulnerability_count,insecure_mount_source,insecure_mount_type,insecure_propagation_mode,interactive_mode,ipv4,ipv6,labels,last_seen,namespace,node_name,node_uid,pod_id,pod_name,port,privileged,root_write_access,run_as_root_group,run_as_root_user,running_status
  # @return [ModelsContainerCoverageResponseEntity]
  describe 'group_containers_by_managed test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_azure_accounts
  # Provides the azure subscriptions registered to Kubernetes Protection
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :ids Azure Tenant IDs
  # @option opts [Array<String>] :subscription_id Azure Subscription IDs
  # @option opts [String] :status Filter by account status
  # @option opts [String] :is_horizon_acct Filter by whether an account originates from Horizon or not
  # @option opts [Integer] :limit Limit returned accounts
  # @option opts [Integer] :offset Offset returned accounts
  # @return [K8sregGetAzureSubscriptionsResp]
  describe 'list_azure_accounts test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for patch_azure_service_principal
  # Adds the client ID for the given tenant ID to our system
  # @param id Azure Tenant ID
  # @param client_id Azure Client ID
  # @param [Hash] opts the optional parameters
  # @return [K8sregGetAzureTenantConfigResp]
  describe 'patch_azure_service_principal test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_cluster_combined
  # Retrieve kubernetes clusters identified by the provided filter criteria
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Search Kubernetes clusters using a query in Falcon Query Language (FQL). Supported filters:  access,agent_status,cid,cloud_account_id,cloud_name,cloud_region,cluster_id,cluster_name,cluster_status,container_count,kubernetes_version,last_seen,management_status,node_count,pod_count,tags
  # @option opts [Integer] :limit The upper-bound on the number of records to retrieve.
  # @option opts [Integer] :offset The offset from where to begin.
  # @option opts [String] :sort Field to sort results by
  # @return [ModelsClusterEntityResponse]
  describe 'read_cluster_combined test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_cluster_count
  # Retrieve cluster counts
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Retrieve count of Kubernetes clusters that match a query in Falcon Query Language (FQL). Supported filters:  access,agent_status,cid,cloud_account_id,cloud_name,cloud_region,cluster_id,cluster_name,cluster_status,container_count,kubernetes_version,last_seen,management_status,node_count,pod_count,tags
  # @return [CommonCountResponse]
  describe 'read_cluster_count test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_cluster_enrichment
  # Retrieve cluster enrichment data
  # @param cluster_id One or more cluster ids for which to retrieve enrichment info
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Supported filters:  last_seen
  # @return [K8sassetsClusterEnrichmentResponse]
  describe 'read_cluster_enrichment test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_clusters_by_date_range_count
  # Retrieve clusters by date range counts
  # @param [Hash] opts the optional parameters
  # @return [ModelsAggregateValuesByFieldResponse]
  describe 'read_clusters_by_date_range_count test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_clusters_by_kubernetes_version_count
  # Bucket clusters by kubernetes version
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Retrieve count of Kubernetes clusters that match a query in Falcon Query Language (FQL). Supported filters:  access,agent_status,cid,cloud_account_id,cloud_name,cloud_region,cluster_id,cluster_name,cluster_status,container_count,kubernetes_version,last_seen,management_status,node_count,pod_count,tags
  # @return [ModelsAggregateValuesByFieldResponse]
  describe 'read_clusters_by_kubernetes_version_count test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_clusters_by_status_count
  # Bucket clusters by status
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Retrieve count of Kubernetes clusters that match a query in Falcon Query Language (FQL). Supported filters:  access,agent_status,cid,cloud_account_id,cloud_name,cloud_region,cluster_id,cluster_name,cluster_status,container_count,kubernetes_version,last_seen,management_status,node_count,pod_count,tags
  # @return [ModelsAggregateValuesByFieldResponse]
  describe 'read_clusters_by_status_count test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_container_combined
  # Retrieve containers identified by the provided filter criteria
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Search Kubernetes containers using a query in Falcon Query Language (FQL). Supported filters:  agent_id,agent_type,allow_privilege_escalation,cid,cloud_account_id,cloud_name,cloud_region,cluster_id,cluster_name,container_id,container_name,cve_id,detection_name,first_seen,image_detection_count,image_digest,image_has_been_assessed,image_id,image_registry,image_repository,image_tag,image_vulnerability_count,insecure_mount_source,insecure_mount_type,insecure_propagation_mode,interactive_mode,ipv4,ipv6,labels,last_seen,namespace,node_name,node_uid,package_name_version,pod_id,pod_name,port,privileged,root_write_access,run_as_root_group,run_as_root_user,running_status
  # @option opts [Integer] :limit The upper-bound on the number of records to retrieve.
  # @option opts [Integer] :offset The offset from where to begin.
  # @option opts [String] :sort Field to sort results by
  # @return [ModelsContainerEntityResponse]
  describe 'read_container_combined test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_container_count
  # Retrieve container counts
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Retrieve count of Kubernetes containers that match a query in Falcon Query Language (FQL). Supported filters:  agent_id,agent_type,allow_privilege_escalation,cid,cloud_account_id,cloud_name,cloud_region,cluster_id,cluster_name,container_id,container_name,cve_id,detection_name,first_seen,image_detection_count,image_digest,image_has_been_assessed,image_id,image_registry,image_repository,image_tag,image_vulnerability_count,insecure_mount_source,insecure_mount_type,insecure_propagation_mode,interactive_mode,ipv4,ipv6,labels,last_seen,namespace,node_name,node_uid,package_name_version,pod_id,pod_name,port,privileged,root_write_access,run_as_root_group,run_as_root_user,running_status
  # @return [CommonCountResponse]
  describe 'read_container_count test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_container_count_by_registry
  # Retrieve top container image registries
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :under_assessment (true/false) whether to return registries under assessment or not under assessment. If not  provided all registries are considered
  # @option opts [Integer] :limit The upper-bound on the number of records to retrieve.
  # @return [ModelsAPIFilterResponse]
  describe 'read_container_count_by_registry test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_container_enrichment
  # Retrieve container enrichment data
  # @param container_id One or more container ids for which to retrieve enrichment info
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Supported filters:  last_seen
  # @return [K8sassetsContainerEnrichmentResponse]
  describe 'read_container_enrichment test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_container_image_detections_count_by_date
  # Retrieve count of image assessment detections on running containers over a period of time
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Retrieve count of Kubernetes containers that match a query in Falcon Query Language (FQL). Supported filters:  agent_id,agent_type,allow_privilege_escalation,cid,cloud_account_id,cloud_name,cloud_region,cluster_id,cluster_name,container_id,container_name,cve_id,detection_name,first_seen,image_detection_count,image_digest,image_has_been_assessed,image_id,image_registry,image_repository,image_tag,image_vulnerability_count,insecure_mount_source,insecure_mount_type,insecure_propagation_mode,interactive_mode,ipv4,ipv6,labels,last_seen,namespace,node_name,node_uid,package_name_version,pod_id,pod_name,port,privileged,root_write_access,run_as_root_group,run_as_root_user,running_status
  # @return [ModelsAPIFilterResponse]
  describe 'read_container_image_detections_count_by_date test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_container_images_by_most_used
  # Bucket container by image-digest
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Retrieve count of Kubernetes containers that match a query in Falcon Query Language (FQL). Supported filters:  agent_id,agent_type,allow_privilege_escalation,cid,cloud_account_id,cloud_name,cloud_region,cluster_id,cluster_name,container_id,container_name,cve_id,detection_name,first_seen,image_detection_count,image_digest,image_has_been_assessed,image_id,image_registry,image_repository,image_tag,image_vulnerability_count,insecure_mount_source,insecure_mount_type,insecure_propagation_mode,interactive_mode,ipv4,ipv6,labels,last_seen,namespace,node_name,node_uid,package_name_version,pod_id,pod_name,port,privileged,root_write_access,run_as_root_group,run_as_root_user,running_status
  # @return [ModelsAggregateValuesByFieldResponse]
  describe 'read_container_images_by_most_used test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_container_images_by_state
  # Retrieve count of image states running on containers
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter using a query in Falcon Query Language (FQL). Supported filters: cid
  # @return [ModelsAPIFilterResponse]
  describe 'read_container_images_by_state test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_container_vulnerabilities_by_severity_count
  # Retrieve container vulnerabilities by severity counts
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Get vulnerabilities count by severity for container using a query in Falcon Query Language (FQL). Supported filters:  agent_id,agent_type,allow_privilege_escalation,cid,cloud_account_id,cloud_name,cloud_region,cluster_id,cluster_name,container_id,container_name,cve_id,detection_name,first_seen,image_detection_count,image_digest,image_has_been_assessed,image_id,image_registry,image_repository,image_tag,image_vulnerability_count,insecure_mount_source,insecure_mount_type,insecure_propagation_mode,interactive_mode,ipv4,ipv6,labels,last_seen,namespace,node_name,node_uid,package_name_version,pod_id,pod_name,port,privileged,root_write_access,run_as_root_group,run_as_root_user,running_status
  # @return [ModelsAggregateValuesByFieldResponse]
  describe 'read_container_vulnerabilities_by_severity_count test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_containers_by_date_range_count
  # Retrieve containers by date range counts
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Get container counts using a query in Falcon Query Language (FQL). Supported filters:  agent_id,agent_type,allow_privilege_escalation,cid,cloud_account_id,cloud_name,cloud_region,cluster_id,cluster_name,container_id,container_name,cve_id,detection_name,first_seen,image_detection_count,image_digest,image_has_been_assessed,image_id,image_registry,image_repository,image_tag,image_vulnerability_count,insecure_mount_source,insecure_mount_type,insecure_propagation_mode,interactive_mode,ipv4,ipv6,labels,last_seen,namespace,node_name,node_uid,package_name_version,pod_id,pod_name,port,privileged,root_write_access,run_as_root_group,run_as_root_user,running_status
  # @return [ModelsAggregateValuesByFieldResponse]
  describe 'read_containers_by_date_range_count test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_containers_sensor_coverage
  # Bucket containers by agent type and calculate sensor coverage
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Retrieve count of Kubernetes containers that match a query in Falcon Query Language (FQL). Supported filters:  agent_id,agent_type,allow_privilege_escalation,cid,cloud_account_id,cloud_name,cloud_region,cluster_id,cluster_name,container_id,container_name,cve_id,detection_name,first_seen,image_detection_count,image_digest,image_has_been_assessed,image_id,image_registry,image_repository,image_tag,image_vulnerability_count,insecure_mount_source,insecure_mount_type,insecure_propagation_mode,interactive_mode,ipv4,ipv6,labels,last_seen,namespace,node_name,node_uid,package_name_version,pod_id,pod_name,port,privileged,root_write_access,run_as_root_group,run_as_root_user,running_status
  # @return [ModelsAggregateValuesByFieldResponse]
  describe 'read_containers_sensor_coverage test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_deployment_combined
  # Retrieve kubernetes deployments identified by the provided filter criteria
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Search Kubernetes deployments using a query in Falcon Query Language (FQL). Supported filters:  annotations_list,cid,cloud_account_id,cloud_name,cloud_region,cluster_id,cluster_name,deployment_id,deployment_name,first_seen,last_seen,namespace,pod_count
  # @option opts [Integer] :limit The upper-bound on the number of records to retrieve.
  # @option opts [Integer] :offset The offset from where to begin.
  # @option opts [String] :sort Field to sort results by
  # @return [ModelsDeploymentEntityResponse]
  describe 'read_deployment_combined test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_deployment_count
  # Retrieve deployment counts
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Retrieve count of Kubernetes deployments that match a query in Falcon Query Language (FQL). Supported filters:  annotations_list,cid,cloud_account_id,cloud_name,cloud_region,cluster_id,cluster_name,deployment_id,deployment_name,first_seen,last_seen,namespace,pod_count
  # @return [CommonCountResponse]
  describe 'read_deployment_count test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_deployment_enrichment
  # Retrieve deployment enrichment data
  # @param deployment_id One or more deployment ids for which to retrieve enrichment info
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Supported filters:  last_seen
  # @return [K8sassetsDeploymentEnrichmentResponse]
  describe 'read_deployment_enrichment test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_deployments_by_date_range_count
  # Retrieve deployments by date range counts
  # @param [Hash] opts the optional parameters
  # @return [ModelsAggregateValuesByFieldResponse]
  describe 'read_deployments_by_date_range_count test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_distinct_container_image_count
  # Retrieve count of distinct images running on containers
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Search Kubernetes containers using a query in Falcon Query Language (FQL). Supported filters:  agent_id,agent_type,allow_privilege_escalation,cid,cloud_account_id,cloud_name,cloud_region,cluster_id,cluster_name,container_id,container_name,cve_id,detection_name,first_seen,image_detection_count,image_digest,image_has_been_assessed,image_id,image_registry,image_repository,image_tag,image_vulnerability_count,insecure_mount_source,insecure_mount_type,insecure_propagation_mode,interactive_mode,ipv4,ipv6,labels,last_seen,namespace,node_name,node_uid,package_name_version,pod_id,pod_name,port,privileged,root_write_access,run_as_root_group,run_as_root_user,running_status
  # @return [ModelsAPIFilterResponse]
  describe 'read_distinct_container_image_count test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_kubernetes_iom_by_date_range
  # Returns the count of Kubernetes IOMs by the date. by default it&#39;s for 7 days.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter images using a query in Falcon Query Language (FQL). Supported filters: cid,created_timestamp,detect_timestamp,severity
  # @return [K8siomsKubernetesIOMFieldValue]
  describe 'read_kubernetes_iom_by_date_range test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_kubernetes_iom_count
  # Returns the total count of Kubernetes IOMs over the past seven days
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter images using a query in Falcon Query Language (FQL). Supported filters: cid,created_timestamp,detect_timestamp,severity
  # @return [K8siomsKubernetesIOMCountValue]
  describe 'read_kubernetes_iom_count test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_kubernetes_iom_entities
  # Retrieve Kubernetes IOM entities identified by the provided IDs
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :ids Search Kubernetes IOMs by ids - The maximum amount is 100 IDs
  # @return [K8siomsKubernetesIOMEntityResponse]
  describe 'read_kubernetes_iom_entities test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_node_combined
  # Retrieve kubernetes nodes identified by the provided filter criteria
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Search Kubernetes nodes using a query in Falcon Query Language (FQL). Supported filters:  aid,annotations_list,cid,cloud_account_id,cloud_name,cloud_region,cluster_id,cluster_name,container_count,container_runtime_version,first_seen,image_digest,ipv4,last_seen,linux_sensor_coverage,node_name,pod_count
  # @option opts [Integer] :limit The upper-bound on the number of records to retrieve.
  # @option opts [Integer] :offset The offset from where to begin.
  # @option opts [String] :sort Field to sort results by
  # @return [ModelsNodeEntityResponse]
  describe 'read_node_combined test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_node_count
  # Retrieve node counts
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Retrieve count of Kubernetes nodes that match a query in Falcon Query Language (FQL). Supported filters:  aid,annotations_list,cid,cloud_account_id,cloud_name,cloud_region,cluster_id,cluster_name,container_count,container_runtime_version,first_seen,image_digest,ipv4,last_seen,linux_sensor_coverage,node_name,pod_count
  # @return [CommonCountResponse]
  describe 'read_node_count test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_node_enrichment
  # Retrieve node enrichment data
  # @param node_name One or more node names for which to retrieve enrichment info
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Supported filters:  last_seen
  # @return [K8sassetsNodeEnrichmentResponse]
  describe 'read_node_enrichment test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_nodes_by_cloud_count
  # Bucket nodes by cloud providers
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Search Kubernetes nodes using a query in Falcon Query Language (FQL). Supported filters:  aid,annotations_list,cid,cloud_account_id,cloud_name,cloud_region,cluster_id,cluster_name,container_count,container_runtime_version,first_seen,image_digest,ipv4,last_seen,linux_sensor_coverage,node_name,pod_count
  # @return [ModelsAggregateValuesByFieldResponse]
  describe 'read_nodes_by_cloud_count test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_nodes_by_container_engine_version_count
  # Bucket nodes by their container engine version
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Search Kubernetes nodes using a query in Falcon Query Language (FQL). Supported filters:  aid,annotations_list,cid,cloud_account_id,cloud_name,cloud_region,cluster_id,cluster_name,container_count,container_runtime_version,first_seen,image_digest,ipv4,last_seen,linux_sensor_coverage,node_name,pod_count
  # @return [ModelsAggregateValuesByFieldResponse]
  describe 'read_nodes_by_container_engine_version_count test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_nodes_by_date_range_count
  # Retrieve nodes by date range counts
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Search Kubernetes nodes using a query in Falcon Query Language (FQL). Supported filters:  aid,annotations_list,cid,cloud_account_id,cloud_name,cloud_region,cluster_id,cluster_name,container_count,container_runtime_version,first_seen,image_digest,ipv4,last_seen,linux_sensor_coverage,node_name,pod_count
  # @return [ModelsAggregateValuesByFieldResponse]
  describe 'read_nodes_by_date_range_count test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_pod_combined
  # Retrieve kubernetes pods identified by the provided filter criteria
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Search Kubernetes pods using a query in Falcon Query Language (FQL). Supported filters:  agent_id,agent_type,allow_privilege_escalation,annotations_list,cid,cloud_account_id,cloud_name,cloud_region,cluster_id,cluster_name,container_count,ipv4,ipv6,labels,last_seen,namespace,node_name,node_uid,owner_id,owner_type,pod_external_id,pod_id,pod_name,port,privileged,root_write_access,run_as_root_group,run_as_root_user
  # @option opts [Integer] :limit The upper-bound on the number of records to retrieve.
  # @option opts [Integer] :offset The offset from where to begin.
  # @option opts [String] :sort Field to sort results by
  # @return [ModelsPodEntityResponse]
  describe 'read_pod_combined test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_pod_count
  # Retrieve pod counts
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Retrieve count of Kubernetes pods that match a query in Falcon Query Language (FQL). Supported filters:  agent_id,agent_type,allow_privilege_escalation,annotations_list,cid,cloud_account_id,cloud_name,cloud_region,cluster_id,cluster_name,container_count,ipv4,ipv6,labels,last_seen,namespace,node_name,node_uid,owner_id,owner_type,pod_external_id,pod_id,pod_name,port,privileged,root_write_access,run_as_root_group,run_as_root_user
  # @return [CommonCountResponse]
  describe 'read_pod_count test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_pod_enrichment
  # Retrieve pod enrichment data
  # @param pod_id One or more pod ids for which to retrieve enrichment info
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Supported filters:  last_seen
  # @return [K8sassetsPodEnrichmentResponse]
  describe 'read_pod_enrichment test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_pods_by_date_range_count
  # Retrieve pods by date range counts
  # @param [Hash] opts the optional parameters
  # @return [ModelsAggregateValuesByFieldResponse]
  describe 'read_pods_by_date_range_count test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_running_container_images
  # Retrieve images on running containers
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Retrieve list of images on running containers using a query in Falcon Query Language (FQL). Supported filters:  cid,hosts,image_digest,image_has_been_assessed,image_id,image_name,image_registry,image_repository,image_tag,last_seen,running_status
  # @option opts [Integer] :limit The upper-bound on the number of records to retrieve.
  # @option opts [Integer] :offset The offset from where to begin.
  # @option opts [String] :sort Field to sort results by
  # @return [ModelsContainerImage]
  describe 'read_running_container_images test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_vulnerable_container_image_count
  # Retrieve count of vulnerable images running on containers
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Retrieve count of Kubernetes containers that match a query in Falcon Query Language (FQL). Supported filters:  agent_id,agent_type,allow_privilege_escalation,cid,cloud_account_id,cloud_name,cloud_region,cluster_id,cluster_name,container_id,container_name,cve_id,detection_name,first_seen,image_detection_count,image_digest,image_has_been_assessed,image_id,image_registry,image_repository,image_tag,image_vulnerability_count,insecure_mount_source,insecure_mount_type,insecure_propagation_mode,interactive_mode,ipv4,ipv6,labels,last_seen,namespace,node_name,node_uid,package_name_version,pod_id,pod_name,port,privileged,root_write_access,run_as_root_group,run_as_root_user,running_status
  # @return [ModelsAPIFilterResponse]
  describe 'read_vulnerable_container_image_count test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for regenerate_api_key
  # Regenerate API key for docker registry integrations
  # @param [Hash] opts the optional parameters
  # @return [K8sregRegenAPIKeyResp]
  describe 'regenerate_api_key test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for search_and_read_kubernetes_iom_entities
  # Search Kubernetes IOM by the provided search criteria
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Search Kubernetes IOMs using a query in Falcon Query Language (FQL). Supported filters:  cid,cis_id,cluster_id,cluster_name,containers_impacted_count,containers_impacted_ids,detection_type,name,namespace,resource_id,resource_name,resource_type,severity
  # @option opts [Integer] :limit The upper-bound on the number of records to retrieve.
  # @option opts [Integer] :offset The offset from where to begin.
  # @option opts [String] :sort The fields to sort the records on.
  # @return [K8siomsKubernetesIOMEntityResponse]
  describe 'search_and_read_kubernetes_iom_entities test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for search_kubernetes_ioms
  # Search Kubernetes IOMs by the provided search criteria. this endpoint returns a list of Kubernetes IOM UUIDs matching the query
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Search Kubernetes IOMs using a query in Falcon Query Language (FQL). Supported filters:  cid,cis_id,cluster_id,cluster_name,containers_impacted_count,containers_impacted_ids,detection_type,name,namespace,resource_id,resource_name,resource_type,severity
  # @option opts [Integer] :limit The upper-bound on the number of records to retrieve.
  # @option opts [Integer] :offset The offset from where to begin.
  # @option opts [String] :sort The fields to sort the records on.
  # @return [CommonGenericEntityResponseString]
  describe 'search_kubernetes_ioms test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for trigger_scan
  # Triggers a dry run or a full scan of a customer&#39;s kubernetes footprint
  # @param scan_type Scan Type to do
  # @param [Hash] opts the optional parameters
  # @return [MsaBaseEntitiesResponse]
  describe 'trigger_scan test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_aws_account
  # Updates the AWS account per the query parameters provided
  # @param ids AWS Account ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :region Default Region for Account Automation
  # @return [MsaBaseEntitiesResponse]
  describe 'update_aws_account test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
