=begin
#CrowdStrike API Specification

#Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.

The version of the OpenAPI document: 2023-05-30T23:10:32Z

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Falcon::TailoredIntelligenceApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'TailoredIntelligenceApi' do
  before do
    # run before each test
    @api_instance = Falcon::TailoredIntelligenceApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TailoredIntelligenceApi' do
    it 'should create an instance of TailoredIntelligenceApi' do
      expect(@api_instance).to be_instance_of(Falcon::TailoredIntelligenceApi)
    end
  end

  # unit tests for get_events_body
  # Get event body for the provided event ID
  # @param id Return the event body for event id.
  # @param [Hash] opts the optional parameters
  # @return [Array<Integer>]
  describe 'get_events_body test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_events_entities
  # Get events entities for specified ids.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [DomainEventEntitiesResponse]
  describe 'get_events_entities test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_rules_entities
  # Get rules entities for specified ids.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [DomainRuleEntitiesResponse]
  describe 'get_rules_entities test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for query_events
  # Get events ids that match the provided filter criteria.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :offset Starting index of overall result set from which to return ids.
  # @option opts [Integer] :limit Number of ids to return.
  # @option opts [String] :sort Possible order by fields: source_type, created_date, updated_date. Ex: &#39;updated_date|desc&#39;.
  # @option opts [String] :filter FQL query specifying the filter parameters. Special value &#39;*&#39; means to not filter on anything.
  # @option opts [String] :q Match phrase_prefix query criteria; included fields: _all (all filter string fields indexed).
  # @return [DomainQueryResponse]
  describe 'query_events test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for query_rules
  # Get rules ids that match the provided filter criteria.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :offset Starting index of overall result set from which to return ids.
  # @option opts [Integer] :limit Number of ids to return.
  # @option opts [String] :sort Possible order by fields: name, value, rule_type, customer_id, created_date, updated_date. Ex: &#39;updated_date|asc&#39;.
  # @option opts [String] :filter FQL query specifying the filter parameters. Special value &#39;*&#39; means to not filter on anything.
  # @option opts [String] :q Match phrase_prefix query criteria; included fields: _all (all filter string fields indexed).
  # @return [DomainQueryResponse]
  describe 'query_rules test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
