=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'spec_helper'
require 'json'

# Unit tests for Falcon::CorrelationRules
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'CorrelationRules' do
  before(:all) do
    # run before each test
    @api_instance = Falcon::CorrelationRules.new
  end

  after(:all) do
    # run after each test
  end

  describe 'test an instance of CorrelationRules' do
    it 'should create an instance of CorrelationRules' do
      expect(@api_instance).to be_instance_of(Falcon::CorrelationRules)
    end
  end

  # unit tests for aggregates_rule_versions_post_v1
  # Get rules aggregates as specified via json in the request body.
  # @param ids The IDs
  # @param body
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter FQL query specifying the filter parameters
  # @return [ApiAggregatesResponseV1]
  describe 'aggregates_rule_versions_post_v1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for combined_rules_get_v1
  # Find all rules matching the query and filter. Supported filters: customer_id,user_id,user_uuid,status,name,created_on,last_updated_on Supported range filters: created_on,last_updated_on
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter FQL query specifying the filter parameters
  # @option opts [String] :q Match query criteria, which includes all the filter string fields
  # @option opts [String] :sort Rule property to sort on
  # @option opts [Integer] :offset Starting index of overall result set from which to return IDs
  # @option opts [Integer] :limit Number of IDs to return
  # @return [ApiGetEntitiesRulesResponseV1]
  describe 'combined_rules_get_v1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for combined_rules_get_v2
  # Find all rules matching the query and filter. Supported filters: customer_id,user_id,user_uuid,status,name,created_on,last_updated_on Supported range filters: created_on,last_updated_on
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter FQL query specifying the filter parameters
  # @option opts [String] :q Match query criteria, which includes all the filter string fields
  # @option opts [String] :sort Rule property to sort on
  # @option opts [Integer] :offset Starting index of overall result set from which to return IDs
  # @option opts [Integer] :limit Number of IDs to return
  # @return [ApiGetEntitiesRulesResponseV1]
  describe 'combined_rules_get_v2 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for entities_latest_rules_get_v1
  # Retrieve latest rule versions by rule IDs
  # @param rule_ids The rule IDs
  # @param [Hash] opts the optional parameters
  # @return [ApiGetEntitiesRulesResponseV1]
  describe 'entities_latest_rules_get_v1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for entities_rule_versions_delete_v1
  # Delete versions by IDs
  # @param ids The IDs
  # @param [Hash] opts the optional parameters
  # @return [MsaspecQueryResponse]
  describe 'entities_rule_versions_delete_v1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for entities_rule_versions_export_post_v1
  # Export rule versions
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [ApiJobLinkResponseV1]
  describe 'entities_rule_versions_export_post_v1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for entities_rule_versions_import_post_v1
  # Import rule versions
  # @param [Hash] opts the optional parameters
  # @return [ApiGetEntitiesRuleVersionsResponseV1]
  describe 'entities_rule_versions_import_post_v1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for entities_rule_versions_publish_patch_v1
  # Publish existing rule version
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [ApiGetEntitiesRuleVersionsResponseV1]
  describe 'entities_rule_versions_publish_patch_v1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for entities_rules_delete_v1
  # Delete rules by IDs
  # @param ids The IDs
  # @param [Hash] opts the optional parameters
  # @return [MsaspecQueryResponse]
  describe 'entities_rules_delete_v1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for entities_rules_get_v1
  # Retrieve rules by IDs
  # @param ids The IDs
  # @param [Hash] opts the optional parameters
  # @return [ApiGetEntitiesRulesResponseV1]
  describe 'entities_rules_get_v1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for entities_rules_get_v2
  # Retrieve rule versions by IDs
  # @param ids The IDs
  # @param [Hash] opts the optional parameters
  # @return [ApiGetEntitiesRulesResponseV1]
  describe 'entities_rules_get_v2 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for entities_rules_patch_v1
  # Update rules
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [ApiGetEntitiesRulesResponseV1]
  describe 'entities_rules_patch_v1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for entities_rules_post_v1
  # Create rule
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [ApiGetEntitiesRulesResponseV1]
  describe 'entities_rules_post_v1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for queries_rules_get_v1
  # Find all rule IDs matching the query and filter. Supported filters: customer_id,user_id,user_uuid,status,name,created_on,last_updated_on Supported range filters: created_on,last_updated_on
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter FQL query specifying the filter parameters
  # @option opts [String] :q Match query criteria, which includes all the filter string fields
  # @option opts [String] :sort Rule property to sort on
  # @option opts [Integer] :offset Starting index of overall result set from which to return IDs
  # @option opts [Integer] :limit Number of IDs to return
  # @return [MsaspecQueryResponse]
  describe 'queries_rules_get_v1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for queries_rules_get_v2
  # Find all rule version IDs matching the query and filter. Supported filters: customer_id,user_id,user_uuid,status,name,created_on,last_updated_on,state,version,rule_id Supported range filters: created_on,last_updated_on
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter FQL query specifying the filter parameters
  # @option opts [String] :q Match query criteria, which includes all the filter string fields
  # @option opts [String] :sort Rule property to sort on
  # @option opts [Integer] :offset Starting index of overall result set from which to return IDs
  # @option opts [Integer] :limit Number of IDs to return
  # @return [MsaspecQueryResponse]
  describe 'queries_rules_get_v2 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
