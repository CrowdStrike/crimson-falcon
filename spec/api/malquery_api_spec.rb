=begin
#CrowdStrike API Specification

#Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and more information about API endpoints that don't yet support OAuth2, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation). To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`. Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.

The version of the OpenAPI document: 2022-10-19T15:57:46Z

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Falcon::MalqueryApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'MalqueryApi' do
  before do
    # run before each test
    @api_instance = Falcon::MalqueryApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of MalqueryApi' do
    it 'should create an instance of MalqueryApi' do
      expect(@api_instance).to be_instance_of(Falcon::MalqueryApi)
    end
  end

  # unit tests for get_mal_query_download_v1
  # Download a file indexed by MalQuery. Specify the file using its SHA256. Only one file is supported at this time
  # @param ids The file SHA256.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_mal_query_download_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_mal_query_entities_samples_fetch_v1
  # Fetch a zip archive with password &#39;infected&#39; containing the samples. Call this once the /entities/samples-multidownload request has finished processing
  # @param ids Multidownload job id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_mal_query_entities_samples_fetch_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_mal_query_metadata_v1
  # Retrieve indexed files metadata by their hash
  # @param ids The file SHA256.
  # @param [Hash] opts the optional parameters
  # @return [MalquerySampleMetadataResponse]
  describe 'get_mal_query_metadata_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_mal_query_quotas_v1
  # Get information about search and download quotas in your environment
  # @param [Hash] opts the optional parameters
  # @return [MalqueryRateLimitsResponse]
  describe 'get_mal_query_quotas_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_mal_query_request_v1
  # Check the status and results of an asynchronous request, such as hunt or exact-search. Supports a single request id at this time.
  # @param ids Identifier of a MalQuery request
  # @param [Hash] opts the optional parameters
  # @return [MalqueryRequestResponse]
  describe 'get_mal_query_request_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_mal_query_entities_samples_multidownload_v1
  # Schedule samples for download. Use the result id with the /request endpoint to check if the download is ready after which you can call the /entities/samples-fetch to get the zip
  # @param body Download request. See model for more details.
  # @param [Hash] opts the optional parameters
  # @return [MalqueryExternalQueryResponse]
  describe 'post_mal_query_entities_samples_multidownload_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_mal_query_exact_search_v1
  # Search Falcon MalQuery for a combination of hex patterns and strings in order to identify samples based upon file content at byte level granularity. You can filter results on criteria such as file type, file size and first seen date. Returns a request id which can be used with the /request endpoint
  # @param body Exact search parameters. See model for more details.
  # @param [Hash] opts the optional parameters
  # @return [MalqueryExternalQueryResponse]
  describe 'post_mal_query_exact_search_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_mal_query_fuzzy_search_v1
  # Search Falcon MalQuery quickly, but with more potential for false positives. Search for a combination of hex patterns and strings in order to identify samples based upon file content at byte level granularity.
  # @param body Fuzzy search parameters. See model for more details.
  # @param [Hash] opts the optional parameters
  # @return [MalqueryFuzzySearchResponse]
  describe 'post_mal_query_fuzzy_search_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_mal_query_hunt_v1
  # Schedule a YARA-based search for execution. Returns a request id which can be used with the /request endpoint
  # @param body Hunt parameters. See model for more details.
  # @param [Hash] opts the optional parameters
  # @return [MalqueryExternalQueryResponse]
  describe 'post_mal_query_hunt_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
