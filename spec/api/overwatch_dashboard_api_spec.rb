=begin
#CrowdStrike API Specification

#Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and more information about API endpoints that don't yet support OAuth2, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation). To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`. Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.

The version of the OpenAPI document: 2022-10-19T15:57:46Z

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Falcon::OverwatchDashboardApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'OverwatchDashboardApi' do
  before do
    # run before each test
    @api_instance = Falcon::OverwatchDashboardApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of OverwatchDashboardApi' do
    it 'should create an instance of OverwatchDashboardApi' do
      expect(@api_instance).to be_instance_of(Falcon::OverwatchDashboardApi)
    end
  end

  # unit tests for aggregates_detections_global_counts
  # Get the total number of detections pushed across all customers
  # @param filter An FQL filter string
  # @param [Hash] opts the optional parameters
  # @return [MsaFacetsResponse]
  describe 'aggregates_detections_global_counts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for aggregates_events
  # Get aggregate OverWatch detection event info by providing an aggregate query
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [MsaAggregatesResponse]
  describe 'aggregates_events test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for aggregates_events_collections
  # Get OverWatch detection event collection info by providing an aggregate query
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [MsaAggregatesResponse]
  describe 'aggregates_events_collections test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for aggregates_incidents_global_counts
  # Get the total number of incidents pushed across all customers
  # @param filter An FQL filter string
  # @param [Hash] opts the optional parameters
  # @return [MsaFacetsResponse]
  describe 'aggregates_incidents_global_counts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for aggregates_ow_events_global_counts
  # Get the total number of OverWatch events across all customers
  # @param filter An FQL filter string
  # @param [Hash] opts the optional parameters
  # @return [MsaFacetsResponse]
  describe 'aggregates_ow_events_global_counts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
