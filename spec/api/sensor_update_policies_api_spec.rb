=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'spec_helper'
require 'json'

# Unit tests for Falcon::SensorUpdatePolicies
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'SensorUpdatePolicies' do
  before do
    # run before each test
    @api_instance = Falcon::SensorUpdatePolicies.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of SensorUpdatePolicies' do
    it 'should create an instance of SensorUpdatePolicies' do
      expect(@api_instance).to be_instance_of(Falcon::SensorUpdatePolicies)
    end
  end

  # unit tests for create_sensor_update_policies
  # Create Sensor Update Policies by specifying details about the policy to create
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [SensorUpdateRespV1]
  describe 'create_sensor_update_policies test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_sensor_update_policies_v2
  # Create Sensor Update Policies by specifying details about the policy to create with additional support for uninstall protection
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [SensorUpdateRespV2]
  describe 'create_sensor_update_policies_v2 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_sensor_update_policies
  # Delete a set of Sensor Update Policies by specifying their IDs
  # @param ids The IDs of the Sensor Update Policies to delete
  # @param [Hash] opts the optional parameters
  # @return [MsaQueryResponse]
  describe 'delete_sensor_update_policies test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_sensor_update_policies
  # Retrieve a set of Sensor Update Policies by specifying their IDs
  # @param ids The IDs of the Sensor Update Policies to return
  # @param [Hash] opts the optional parameters
  # @return [SensorUpdateRespV1]
  describe 'get_sensor_update_policies test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_sensor_update_policies_v2
  # Retrieve a set of Sensor Update Policies with additional support for uninstall protection by specifying their IDs
  # @param ids The IDs of the Sensor Update Policies to return
  # @param [Hash] opts the optional parameters
  # @return [SensorUpdateRespV2]
  describe 'get_sensor_update_policies_v2 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for perform_sensor_update_policies_action
  # Perform the specified action on the Sensor Update Policies specified in the request
  # @param action_name The action to perform
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [SensorUpdateRespV1]
  describe 'perform_sensor_update_policies_action test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for query_combined_sensor_update_builds
  # Retrieve available builds for use with Sensor Update Policies
  # @param [Hash] opts the optional parameters
  # @option opts [String] :platform The platform to return builds for
  # @option opts [Array<String>] :stage The stages to return builds for
  # @return [SensorUpdateBuildsRespV1]
  describe 'query_combined_sensor_update_builds test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for query_combined_sensor_update_kernels
  # Retrieve kernel compatibility info for Sensor Update Builds
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter The filter expression that should be used to limit the results
  # @option opts [Integer] :offset The offset to start retrieving records from
  # @option opts [Integer] :limit The maximum records to return. [1-500]
  # @return [SensorUpdateKernelsRespV1]
  describe 'query_combined_sensor_update_kernels test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for query_combined_sensor_update_policies
  # Search for Sensor Update Policies in your environment by providing an FQL filter and paging details. Returns a set of Sensor Update Policies which match the filter criteria
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter The filter expression that should be used to limit the results
  # @option opts [Integer] :offset The offset to start retrieving records from
  # @option opts [Integer] :limit The maximum records to return. [1-5000]
  # @option opts [String] :sort The property to sort by
  # @return [SensorUpdateRespV1]
  describe 'query_combined_sensor_update_policies test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for query_combined_sensor_update_policies_v2
  # Search for Sensor Update Policies with additional support for uninstall protection in your environment by providing an FQL filter and paging details. Returns a set of Sensor Update Policies which match the filter criteria
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter The filter expression that should be used to limit the results
  # @option opts [Integer] :offset The offset to start retrieving records from
  # @option opts [Integer] :limit The maximum records to return. [1-5000]
  # @option opts [String] :sort The property to sort by
  # @return [SensorUpdateRespV2]
  describe 'query_combined_sensor_update_policies_v2 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for query_combined_sensor_update_policy_members
  # Search for members of a Sensor Update Policy in your environment by providing an FQL filter and paging details. Returns a set of host details which match the filter criteria
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id The ID of the Sensor Update Policy to search for members of
  # @option opts [String] :filter The filter expression that should be used to limit the results
  # @option opts [Integer] :offset The offset to start retrieving records from
  # @option opts [Integer] :limit The maximum records to return. [1-5000]
  # @option opts [String] :sort The property to sort by
  # @return [BasePolicyMembersRespV1]
  describe 'query_combined_sensor_update_policy_members test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for query_sensor_update_kernels_distinct
  # Retrieve kernel compatibility info for Sensor Update Builds
  # @param distinct_field The field name to get distinct values for
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter The filter expression that should be used to limit the results
  # @option opts [Integer] :offset The offset to start retrieving records from
  # @option opts [Integer] :limit The maximum records to return. [1-500]
  # @return [MsaQueryResponse]
  describe 'query_sensor_update_kernels_distinct test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for query_sensor_update_policies
  # Search for Sensor Update Policies in your environment by providing an FQL filter and paging details. Returns a set of Sensor Update Policy IDs which match the filter criteria
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter The filter expression that should be used to limit the results
  # @option opts [Integer] :offset The offset to start retrieving records from
  # @option opts [Integer] :limit The maximum records to return. [1-5000]
  # @option opts [String] :sort The property to sort by
  # @return [MsaQueryResponse]
  describe 'query_sensor_update_policies test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for query_sensor_update_policy_members
  # Search for members of a Sensor Update Policy in your environment by providing an FQL filter and paging details. Returns a set of Agent IDs which match the filter criteria
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id The ID of the Sensor Update Policy to search for members of
  # @option opts [String] :filter The filter expression that should be used to limit the results
  # @option opts [Integer] :offset The offset to start retrieving records from
  # @option opts [Integer] :limit The maximum records to return. [1-5000]
  # @option opts [String] :sort The property to sort by
  # @return [MsaQueryResponse]
  describe 'query_sensor_update_policy_members test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for reveal_uninstall_token
  # Reveals an uninstall token for a specific device. To retrieve the bulk maintenance token pass the value &#39;MAINTENANCE&#39; as the value for &#39;device_id&#39;
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [UninstallTokenRespV1]
  describe 'reveal_uninstall_token test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for set_sensor_update_policies_precedence
  # Sets the precedence of Sensor Update Policies based on the order of IDs specified in the request. The first ID specified will have the highest precedence and the last ID specified will have the lowest. You must specify all non-Default Policies for a platform when updating precedence
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [MsaQueryResponse]
  describe 'set_sensor_update_policies_precedence test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_sensor_update_policies
  # Update Sensor Update Policies by specifying the ID of the policy and details to update
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [SensorUpdateRespV1]
  describe 'update_sensor_update_policies test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_sensor_update_policies_v2
  # Update Sensor Update Policies by specifying the ID of the policy and details to update with additional support for uninstall protection
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [SensorUpdateRespV2]
  describe 'update_sensor_update_policies_v2 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
