=begin
#CrowdStrike API Specification

#Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and more information about API endpoints that don't yet support OAuth2, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation). To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`. Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.

The version of the OpenAPI document: 2022-10-19T15:57:46Z

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Falcon::IntelApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'IntelApi' do
  before do
    # run before each test
    @api_instance = Falcon::IntelApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of IntelApi' do
    it 'should create an instance of IntelApi' do
      expect(@api_instance).to be_instance_of(Falcon::IntelApi)
    end
  end

  # unit tests for get_intel_actor_entities
  # Retrieve specific actors using their actor IDs.
  # @param ids The IDs of the actors you want to retrieve.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :fields The fields to return, or a predefined set of fields in the form of the collection name surrounded by two underscores like:  \\_\\_\\&lt;collection\\&gt;\\_\\_.  Ex: slug \\_\\_full\\_\\_.  Defaults to \\_\\_basic\\_\\_.
  # @return [DomainActorsResponse]
  describe 'get_intel_actor_entities test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_intel_indicator_entities
  # Retrieve specific indicators using their indicator IDs.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [DomainPublicIndicatorsV3Response]
  describe 'get_intel_indicator_entities test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_intel_report_entities
  # Retrieve specific reports using their report IDs.
  # @param ids The IDs of the reports you want to retrieve.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :fields The fields to return, or a predefined set of fields in the form of the collection name surrounded by two underscores like:  \\_\\_\\&lt;collection\\&gt;\\_\\_.  Ex: slug \\_\\_full\\_\\_.  Defaults to \\_\\_basic\\_\\_.
  # @return [DomainNewsResponse]
  describe 'get_intel_report_entities test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_intel_report_pdf
  # Return a Report PDF attachment
  # @param id The ID of the report you want to download as a PDF.
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_intel_report_pdf test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_intel_rule_entities
  # Retrieve details for rule sets for the specified ids.
  # @param ids The ids of rules to return.
  # @param [Hash] opts the optional parameters
  # @return [DomainRulesResponse]
  describe 'get_intel_rule_entities test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_intel_rule_file
  # Download earlier rule sets.
  # @param id The ID of the rule set.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept Choose the format you want the rule set in.
  # @option opts [String] :format Choose the format you want the rule set in. Valid formats are zip and gzip. Defaults to zip.
  # @return [File]
  describe 'get_intel_rule_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_latest_intel_rule_file
  # Download the latest rule set.
  # @param type The rule news report type. Accepted values:  snort-suricata-master  snort-suricata-update  snort-suricata-changelog  yara-master  yara-update  yara-changelog  common-event-format  netwitness
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept Choose the format you want the rule set in.
  # @option opts [String] :format Choose the format you want the rule set in. Valid formats are zip and gzip. Defaults to zip.
  # @option opts [String] :if_modified_since Download Only if changed since
  # @return [File]
  describe 'get_latest_intel_rule_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for query_intel_actor_entities
  # Get info about actors that match provided FQL filters.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :offset Set the starting row number to return actors from. Defaults to 0.
  # @option opts [Integer] :limit Set the number of actors to return. The value must be between 1 and 5000.
  # @option opts [String] :sort Order fields in ascending or descending order.  Ex: created_date|asc.
  # @option opts [String] :filter Filter your query by specifying FQL filter parameters. Filter parameters include:  actors, actors.id, actors.name, actors.slug, actors.url, created_date, description, id, last_modified_date, motivations, motivations.id, motivations.slug, motivations.value, name, name.raw, short_description, slug, sub_type, sub_type.id, sub_type.name, sub_type.slug, tags, tags.id, tags.slug, tags.value, target_countries, target_countries.id, target_countries.slug, target_countries.value, target_industries, target_industries.id, target_industries.slug, target_industries.value, type, type.id, type.name, type.slug, url.
  # @option opts [String] :q Perform a generic substring search across all fields.
  # @option opts [Array<String>] :fields The fields to return, or a predefined set of fields in the form of the collection name surrounded by two underscores like:  \\_\\_\\&lt;collection\\&gt;\\_\\_.  Ex: slug \\_\\_full\\_\\_.  Defaults to \\_\\_basic\\_\\_.
  # @return [DomainActorsResponse]
  describe 'query_intel_actor_entities test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for query_intel_actor_ids
  # Get actor IDs that match provided FQL filters.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :offset Set the starting row number to return actors IDs from. Defaults to 0.
  # @option opts [Integer] :limit Set the number of actor IDs to return. The value must be between 1 and 5000.
  # @option opts [String] :sort Order fields in ascending or descending order.  Ex: created_date|asc.
  # @option opts [String] :filter Filter your query by specifying FQL filter parameters. Filter parameters include:  actors, actors.id, actors.name, actors.slug, actors.url, created_date, description, id, last_modified_date, motivations, motivations.id, motivations.slug, motivations.value, name, name.raw, short_description, slug, sub_type, sub_type.id, sub_type.name, sub_type.slug, tags, tags.id, tags.slug, tags.value, target_countries, target_countries.id, target_countries.slug, target_countries.value, target_industries, target_industries.id, target_industries.slug, target_industries.value, type, type.id, type.name, type.slug, url.
  # @option opts [String] :q Perform a generic substring search across all fields.
  # @return [MsaQueryResponse]
  describe 'query_intel_actor_ids test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for query_intel_indicator_entities
  # Get info about indicators that match provided FQL filters.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :offset Set the starting row number to return indicators from. Defaults to 0.
  # @option opts [Integer] :limit Set the number of indicators to return. The number must be between 1 and 10000
  # @option opts [String] :sort Order fields in ascending or descending order.  Ex: published_date|asc.
  # @option opts [String] :filter Filter your query by specifying FQL filter parameters. Filter parameters include:  _marker, actors, deleted, domain_types, id, indicator, ip_address_types, kill_chains, labels, labels.created_on, labels.last_valid_on, labels.name, last_updated, malicious_confidence, malware_families, published_date, reports, scope, targets, threat_types, type, vulnerabilities.
  # @option opts [String] :q Perform a generic substring search across all fields.
  # @option opts [Boolean] :include_deleted If true, include both published and deleted indicators in the response. Defaults to false.
  # @option opts [Boolean] :include_relations If true, include related indicators in the response. Defaults to true.
  # @return [DomainPublicIndicatorsV3Response]
  describe 'query_intel_indicator_entities test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for query_intel_indicator_ids
  # Get indicators IDs that match provided FQL filters.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :offset Set the starting row number to return indicator IDs from. Defaults to 0.
  # @option opts [Integer] :limit Set the number of indicator IDs to return. The number must be between 1 and 10000
  # @option opts [String] :sort Order fields in ascending or descending order.  Ex: published_date|asc.
  # @option opts [String] :filter Filter your query by specifying FQL filter parameters. Filter parameters include:  _marker, actors, deleted, domain_types, id, indicator, ip_address_types, kill_chains, labels, labels.created_on, labels.last_valid_on, labels.name, last_updated, malicious_confidence, malware_families, published_date, reports, scope, targets, threat_types, type, vulnerabilities.
  # @option opts [String] :q Perform a generic substring search across all fields.
  # @option opts [Boolean] :include_deleted If true, include both published and deleted indicators in the response. Defaults to false.
  # @option opts [Boolean] :include_relations If true, include related indicators in the response. Defaults to true.
  # @return [MsaQueryResponse]
  describe 'query_intel_indicator_ids test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for query_intel_report_entities
  # Get info about reports that match provided FQL filters.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :offset Set the starting row number to return reports from. Defaults to 0.
  # @option opts [Integer] :limit Set the number of reports to return. The value must be between 1 and 5000.
  # @option opts [String] :sort Order fields in ascending or descending order. Ex: created_date|asc.
  # @option opts [String] :filter Filter your query by specifying FQL filter parameters. Filter parameters include:  actors, actors.id, actors.name, actors.slug, actors.url, created_date, description, id, last_modified_date, motivations, motivations.id, motivations.slug, motivations.value, name, name.raw, short_description, slug, sub_type, sub_type.id, sub_type.name, sub_type.slug, tags, tags.id, tags.slug, tags.value, target_countries, target_countries.id, target_countries.slug, target_countries.value, target_industries, target_industries.id, target_industries.slug, target_industries.value, type, type.id, type.name, type.slug, url.
  # @option opts [String] :q Perform a generic substring search across all fields.
  # @option opts [Array<String>] :fields The fields to return, or a predefined set of fields in the form of the collection name surrounded by two underscores like:  \\_\\_\\&lt;collection\\&gt;\\_\\_.  Ex: slug \\_\\_full\\_\\_.  Defaults to \\_\\_basic\\_\\_.
  # @return [DomainNewsResponse]
  describe 'query_intel_report_entities test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for query_intel_report_ids
  # Get report IDs that match provided FQL filters.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :offset Set the starting row number to return report IDs from. Defaults to 0.
  # @option opts [Integer] :limit Set the number of report IDs to return. The value must be between 1 and 5000.
  # @option opts [String] :sort Order fields in ascending or descending order.  Ex: created_date|asc.
  # @option opts [String] :filter Filter your query by specifying FQL filter parameters. Filter parameters include:  actors, actors.id, actors.name, actors.slug, actors.url, created_date, description, id, last_modified_date, motivations, motivations.id, motivations.slug, motivations.value, name, name.raw, short_description, slug, sub_type, sub_type.id, sub_type.name, sub_type.slug, tags, tags.id, tags.slug, tags.value, target_countries, target_countries.id, target_countries.slug, target_countries.value, target_industries, target_industries.id, target_industries.slug, target_industries.value, type, type.id, type.name, type.slug, url.
  # @option opts [String] :q Perform a generic substring search across all fields.
  # @return [MsaQueryResponse]
  describe 'query_intel_report_ids test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for query_intel_rule_ids
  # Search for rule IDs that match provided filter criteria.
  # @param type The rule news report type. Accepted values:  snort-suricata-master  snort-suricata-update  snort-suricata-changelog  yara-master  yara-update  yara-changelog  common-event-format  netwitness
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :offset Set the starting row number to return reports from. Defaults to 0.
  # @option opts [Integer] :limit The number of rule IDs to return. Defaults to 10.
  # @option opts [String] :sort Order fields in ascending or descending order.  Ex: created_date|asc.
  # @option opts [Array<String>] :name Search by rule title.
  # @option opts [Array<String>] :description Substring match on description field.
  # @option opts [Array<String>] :tags Search for rule tags.
  # @option opts [Integer] :min_created_date Filter results to those created on or after a certain date.
  # @option opts [String] :max_created_date Filter results to those created on or before a certain date.
  # @option opts [String] :q Perform a generic substring search across all fields.
  # @return [MsaQueryResponse]
  describe 'query_intel_rule_ids test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
