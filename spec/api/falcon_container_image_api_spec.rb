=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'spec_helper'
require 'json'

# Unit tests for Falcon::FalconContainerImageApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'FalconContainerImageApi' do
  before do
    # run before each test
    @api_instance = Falcon::FalconContainerImageApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of FalconContainerImageApi' do
    it 'should create an instance of FalconContainerImageApi' do
      expect(@api_instance).to be_instance_of(Falcon::FalconContainerImageApi)
    end
  end

  # unit tests for create_registry_entities
  # Create a registry entity using the provided details
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [DomainExternalRegistryResponse]
  describe 'create_registry_entities test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_registry_entities
  # Delete the registry entity identified by the entity UUID
  # @param ids Registry entity UUID
  # @param [Hash] opts the optional parameters
  # @return [DomainExternalRegistryListResponse]
  describe 'delete_registry_entities test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_combined_images
  # Get image assessment results by providing an FQL filter and paging details
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter images using a query in Falcon Query Language (FQL). Supported filters:  container_running_status, cve_id, first_seen, registry, repository, tag, vulnerability_severity
  # @option opts [Integer] :limit The upper-bound on the number of records to retrieve [1-100]
  # @option opts [Integer] :offset The offset from where to begin.
  # @option opts [String] :sort The fields to sort the records on. Supported columns:  [first_seen registry repository tag vulnerability_severity]
  # @return [ImagesExtCombinedImagesResponse]
  describe 'get_combined_images test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_registry_entities
  # Retrieve registry entities identified by the customer id
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit The upper-bound on the number of records to retrieve.
  # @option opts [Integer] :offset The offset from where to begin.
  # @option opts [String] :sort The field to sort on, e.g. id.desc or id.asc.
  # @return [DomainExternalQueryResponse]
  describe 'read_registry_entities test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_registry_entities_by_uuid
  # Retrieve the registry entity identified by the entity UUID
  # @param ids Registry entity UUID
  # @param [Hash] opts the optional parameters
  # @return [DomainExternalRegistryListResponse]
  describe 'read_registry_entities_by_uuid test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_registry_entities
  # Update the registry entity, as identified by the entity UUID, using the provided details
  # @param id Registry entity UUID
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [DomainExternalRegistryResponse]
  describe 'update_registry_entities test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
