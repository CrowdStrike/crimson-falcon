=begin
#CrowdStrike API Specification

#Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and more information about API endpoints that don't yet support OAuth2, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation). To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`. Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.

The version of the OpenAPI document: 2022-10-19T15:57:46Z

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Falcon::CustomIoaApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'CustomIoaApi' do
  before do
    # run before each test
    @api_instance = Falcon::CustomIoaApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CustomIoaApi' do
    it 'should create an instance of CustomIoaApi' do
      expect(@api_instance).to be_instance_of(Falcon::CustomIoaApi)
    end
  end

  # unit tests for create_rule
  # Create a rule within a rule group. Returns the rule.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [ApiRulesResponse]
  describe 'create_rule test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_rule_group_mixin0
  # Create a rule group for a platform with a name and an optional description. Returns the rule group.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [ApiRuleGroupsResponse]
  describe 'create_rule_group_mixin0 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_rule_groups_mixin0
  # Delete rule groups by ID.
  # @param ids The IDs of the entities
  # @param [Hash] opts the optional parameters
  # @option opts [String] :comment Explains why the entity is being deleted
  # @return [MsaReplyMetaOnly]
  describe 'delete_rule_groups_mixin0 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_rules
  # Delete rules from a rule group by ID.
  # @param rule_group_id The parent rule group
  # @param ids The IDs of the entities
  # @param [Hash] opts the optional parameters
  # @option opts [String] :comment Explains why the entity is being deleted
  # @return [MsaReplyMetaOnly]
  describe 'delete_rules test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_patterns
  # Get pattern severities by ID.
  # @param ids The IDs of the entities
  # @param [Hash] opts the optional parameters
  # @return [ApiPatternsResponse]
  describe 'get_patterns test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_platforms_mixin0
  # Get platforms by ID.
  # @param ids The IDs of the entities
  # @param [Hash] opts the optional parameters
  # @return [ApiPlatformsResponse]
  describe 'get_platforms_mixin0 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_rule_groups_mixin0
  # Get rule groups by ID.
  # @param ids The IDs of the entities
  # @param [Hash] opts the optional parameters
  # @return [ApiRuleGroupsResponse]
  describe 'get_rule_groups_mixin0 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_rule_types
  # Get rule types by ID.
  # @param ids The IDs of the entities
  # @param [Hash] opts the optional parameters
  # @return [ApiRuleTypesResponse]
  describe 'get_rule_types test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_rules_get
  # Get rules by ID and optionally version in the following format: &#x60;ID[:version]&#x60;.
  # @param body The \&quot;ids\&quot; field contains a list of the rules to retrieve.
  # @param [Hash] opts the optional parameters
  # @return [ApiRulesResponse]
  describe 'get_rules_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_rules_mixin0
  # Get rules by ID and optionally version in the following format: &#x60;ID[:version]&#x60;. The max number of IDs is constrained by URL size.
  # @param ids The IDs of the entities
  # @param [Hash] opts the optional parameters
  # @return [ApiRulesResponse]
  describe 'get_rules_mixin0 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for query_patterns
  # Get all pattern severity IDs.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :offset Starting index of overall result set from which to return IDs
  # @option opts [Integer] :limit Number of IDs to return
  # @return [MsaQueryResponse]
  describe 'query_patterns test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for query_platforms_mixin0
  # Get all platform IDs.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :offset Starting index of overall result set from which to return IDs
  # @option opts [Integer] :limit Number of IDs to return
  # @return [MsaQueryResponse]
  describe 'query_platforms_mixin0 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for query_rule_groups_full
  # Find all rule groups matching the query with optional filter.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :sort Possible order by fields: {created_by, created_on, modified_by, modified_on, enabled, name, description}
  # @option opts [String] :filter FQL query specifying the filter parameters. Filter term criteria: [enabled platform name description rules.action_label rules.name rules.description rules.pattern_severity rules.ruletype_name rules.enabled]. Filter range criteria: created_on, modified_on; use any common date format, such as &#39;2010-05-15T14:55:21.892315096Z&#39;.
  # @option opts [String] :q Match query criteria, which includes all the filter string fields
  # @option opts [String] :offset Starting index of overall result set from which to return IDs
  # @option opts [Integer] :limit Number of IDs to return
  # @return [MsaQueryResponse]
  describe 'query_rule_groups_full test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for query_rule_groups_mixin0
  # Finds all rule group IDs matching the query with optional filter.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :sort Possible order by fields: {created_by, created_on, modified_by, modified_on, enabled, name, description}
  # @option opts [String] :filter FQL query specifying the filter parameters. Filter term criteria: [enabled platform name description rules.action_label rules.name rules.description rules.pattern_severity rules.ruletype_name rules.enabled]. Filter range criteria: created_on, modified_on; use any common date format, such as &#39;2010-05-15T14:55:21.892315096Z&#39;.
  # @option opts [String] :q Match query criteria, which includes all the filter string fields
  # @option opts [String] :offset Starting index of overall result set from which to return IDs
  # @option opts [Integer] :limit Number of IDs to return
  # @return [MsaQueryResponse]
  describe 'query_rule_groups_mixin0 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for query_rule_types
  # Get all rule type IDs.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :offset Starting index of overall result set from which to return IDs
  # @option opts [Integer] :limit Number of IDs to return
  # @return [MsaQueryResponse]
  describe 'query_rule_types test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for query_rules_mixin0
  # Finds all rule IDs matching the query with optional filter.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :sort Possible order by fields: {rules.ruletype_name, rules.enabled, rules.created_by, rules.current_version.name, rules.current_version.modified_by, rules.created_on, rules.current_version.description, rules.current_version.pattern_severity, rules.current_version.action_label, rules.current_version.modified_on}
  # @option opts [String] :filter FQL query specifying the filter parameters. Filter term criteria: [enabled platform name description rules.action_label rules.name rules.description rules.pattern_severity rules.ruletype_name rules.enabled]. Filter range criteria: created_on, modified_on; use any common date format, such as &#39;2010-05-15T14:55:21.892315096Z&#39;.
  # @option opts [String] :q Match query criteria, which includes all the filter string fields
  # @option opts [String] :offset Starting index of overall result set from which to return IDs
  # @option opts [Integer] :limit Number of IDs to return
  # @return [MsaQueryResponse]
  describe 'query_rules_mixin0 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_rule_group_mixin0
  # Update a rule group. The following properties can be modified: name, description, enabled.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [ApiRuleGroupsResponse]
  describe 'update_rule_group_mixin0 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_rules
  # Update rules within a rule group. Return the updated rules.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [ApiRulesResponse]
  describe 'update_rules test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for validate
  # Validates field values and checks for matches if a test string is provided.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [ApiValidationResponseV1]
  describe 'validate test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
