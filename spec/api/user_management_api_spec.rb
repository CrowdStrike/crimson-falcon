=begin
#CrowdStrike API Specification

#Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.

The version of the OpenAPI document: 2023-05-30T23:10:32Z

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Falcon::UserManagementApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'UserManagementApi' do
  before do
    # run before each test
    @api_instance = Falcon::UserManagementApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of UserManagementApi' do
    it 'should create an instance of UserManagementApi' do
      expect(@api_instance).to be_instance_of(Falcon::UserManagementApi)
    end
  end

  # unit tests for combined_user_roles_v1
  # Get User Grant(s). This endpoint lists both direct as well as flight control grants between a User and a Customer.
  # @param user_uuid User UUID to get available roles for.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cid Customer ID to get grants for. Empty CID would result in Role IDs for user against current CID in view.
  # @option opts [Boolean] :direct_only Specifies if to request direct Only role grants or all role grants between user and CID (specified in query params)
  # @option opts [String] :filter Filter using a query in Falcon Query Language (FQL). Supported filters: role_id, role_name
  # @option opts [Integer] :offset The offset to start retrieving records from
  # @option opts [Integer] :limit The maximum records to return. [1-500]
  # @option opts [String] :sort The property to sort by
  # @return [FlightcontrolapiUserGrantResponse]
  describe 'combined_user_roles_v1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_user
  # Deprecated : Please use POST /user-management/entities/users/v1. Create a new user. After creating a user, assign one or more roles with POST /user-roles/entities/user-roles/v1
  # @param body Attributes for this user. &#x60;uid&#x60; (required) is the user&#39;s email address, which is their username in Falcon.  Optional attributes:  &lt;ul&gt;&lt;li&gt;&#x60;firstName&#x60;&lt;/li&gt;&lt;li&gt;&#x60;lastName&#x60;&lt;/li&gt;&lt;li&gt;&#x60;password&#x60;&lt;/li&gt;&lt;/ul&gt;  As a best practice, we recommend omitting &#x60;password&#x60;. If single sign-on is enabled for your customer account, the &#x60;password&#x60; attribute is ignored. If single sign-on is not enabled, we send a user activation request to their email address when you create the user with no &#x60;password&#x60;. The user should use the activation email to set their own password.
  # @param [Hash] opts the optional parameters
  # @return [ApiUserMetadataResponse]
  describe 'create_user test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_user_v1
  # Create a new user. After creating a user, assign one or more roles with POST &#39;/user-management/entities/user-role-actions/v1&#39;
  # @param body Attributes for this user. &#x60;uid&#x60; (required) is the user&#39;s email address, which is their username in Falcon.  Optional attributes:  &lt;ul&gt;&lt;li&gt;&#x60;firstName&#x60;&lt;/li&gt;&lt;li&gt;&#x60;lastName&#x60;&lt;/li&gt;&lt;li&gt;&#x60;password&#x60;&lt;/li&gt;&lt;/ul&gt;  As a best practice, we recommend omitting &#x60;password&#x60;. If single sign-on is enabled for your customer account, the &#x60;password&#x60; attribute is ignored. If single sign-on is not enabled, we send a user activation request to their email address when you create the user with no &#x60;password&#x60;. The user should use the activation email to set their own password.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :validate_only Validate of user is allowed, but do not create user.
  # @return [FlightcontrolapiUserResponse]
  describe 'create_user_v1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_user
  # Deprecated : Please use DELETE /user-management/entities/users/v1. Delete a user permanently
  # @param user_uuid ID of a user. Find a user&#39;s ID from &#x60;/users/entities/user/v1&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [MsaReplyMetaOnly]
  describe 'delete_user test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_user_v1
  # Delete a user permanently.
  # @param user_uuid User UUID.
  # @param [Hash] opts the optional parameters
  # @return [MsaspecResponseFields]
  describe 'delete_user_v1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for entities_roles_v1
  # Get info about a role
  # @param ids ID of a role. Find a role ID from &#x60;/user-management/queries/roles/v1&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cid Customer ID to get available roles for. Empty CID would result in Role IDs for current CID in view.
  # @return [FlightcontrolapiGetRolesResponse]
  describe 'entities_roles_v1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_available_role_ids
  # Deprecated : Please use GET /user-management/queries/roles/v1. Show role IDs for all roles available in your customer account. For more information on each role, provide the role ID to &#x60;/customer/entities/roles/v1&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [MsaQueryResponse]
  describe 'get_available_role_ids test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_roles
  # Deprecated : Please use GET /user-management/entities/roles/v1. Get info about a role
  # @param ids ID of a role. Find a role ID from &#x60;/customer/queries/roles/v1&#x60; or &#x60;/users/queries/roles/v1&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [ApiUserRoleResponse]
  describe 'get_roles test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_user_role_ids
  # Deprecated : Please use GET /user-management/combined/user-roles/v1. Show role IDs of roles assigned to a user. For more information on each role, provide the role ID to &#x60;/customer/entities/roles/v1&#x60;.
  # @param user_uuid ID of a user. Find a user&#39;s ID from &#x60;/users/entities/user/v1&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [MsaQueryResponse]
  describe 'get_user_role_ids test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for grant_user_role_ids
  # Deprecated : Please use POST /user-management/entities/user-role-actions/v1. Assign one or more roles to a user
  # @param user_uuid ID of a user. Find a user&#39;s ID from &#x60;/users/entities/user/v1&#x60;.
  # @param body Role ID(s) of the role you want to assign
  # @param [Hash] opts the optional parameters
  # @return [ApiUserRoleIDsResponse]
  describe 'grant_user_role_ids test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for queries_roles_v1
  # Show role IDs for all roles available in your customer account. For more information on each role, provide the role ID to &#x60;/user-management/entities/roles/v1&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cid Customer ID to get available roles for. Empty CID would result in Role IDs for current CID in view.
  # @option opts [String] :user_uuid User UUID to get available roles for. Empty User UUID would returns all roles IDs available for customer.
  # @option opts [String] :action Actionable purpose of the query
  # @return [MsaspecQueryResponse]
  describe 'queries_roles_v1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for query_user_v1
  # List user IDs for all users in your customer account. For more information on each user, provide the user ID to &#x60;/user-management/entities/users/GET/v1&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter using a query in Falcon Query Language (FQL). Supported filters: assigned_cids, cid, first_name, last_name, name, uid
  # @option opts [Integer] :offset The offset to start retrieving records from
  # @option opts [Integer] :limit The maximum records to return. [1-500]
  # @option opts [String] :sort The property to sort by
  # @return [MsaspecQueryResponse]
  describe 'query_user_v1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for retrieve_emails_by_cid
  # Deprecated : Please use POST /user-management/entities/users/GET/v1. List the usernames (usually an email address) for all users in your customer account
  # @param [Hash] opts the optional parameters
  # @return [MsaQueryResponse]
  describe 'retrieve_emails_by_cid test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for retrieve_user
  # Deprecated : Please use POST /user-management/entities/users/GET/v1. Get info about a user
  # @param ids ID of a user. Find a user&#39;s ID from &#x60;/users/entities/user/v1&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [ApiUserMetadataResponse]
  describe 'retrieve_user test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for retrieve_user_uuid
  # Deprecated : Please use GET /user-management/queries/users/v1. Get a user&#39;s ID by providing a username (usually an email address)
  # @param uid A username. This is usually the user&#39;s email address, but may vary based on your configuration.
  # @param [Hash] opts the optional parameters
  # @return [MsaQueryResponse]
  describe 'retrieve_user_uuid test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for retrieve_user_uuids_by_cid
  # Deprecated : Please use GET /user-management/queries/users/v1. List user IDs for all users in your customer account. For more information on each user, provide the user ID to &#x60;/users/entities/user/v1&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [MsaQueryResponse]
  describe 'retrieve_user_uuids_by_cid test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for retrieve_users_getv1
  # Get info about users including their name, UID and CID by providing user UUIDs
  # @param body Maximum of 5000 User UUIDs can be specified per request.
  # @param [Hash] opts the optional parameters
  # @return [FlightcontrolapiUserResponse]
  describe 'retrieve_users_getv1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for revoke_user_role_ids
  # Deprecated : Please use POST /user-management/entities/user-role-actions/v1. Revoke one or more roles from a user
  # @param user_uuid ID of a user. Find a user&#39;s ID from &#x60;/users/entities/user/v1&#x60;.
  # @param ids One or more role IDs to revoke. Find a role&#39;s ID from &#x60;/users/queries/roles/v1&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [ApiUserRoleIDsResponse]
  describe 'revoke_user_role_ids test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_user
  # Deprecated : Please use PATCH /user-management/entities/users/v1. Modify an existing user&#39;s first or last name
  # @param user_uuid ID of a user. Find a user&#39;s ID from &#x60;/users/entities/user/v1&#x60;.
  # @param body Attributes for this user. All attributes (shown below) are optional.
  # @param [Hash] opts the optional parameters
  # @return [ApiUserMetadataResponse]
  describe 'update_user test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_user_v1
  # Modify an existing user&#39;s first or last name.
  # @param user_uuid user uuid
  # @param body Both firstName and lastName have to specified.
  # @param [Hash] opts the optional parameters
  # @return [FlightcontrolapiUserResponse]
  describe 'update_user_v1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_action_v1
  # Apply actions to one or more User. Available action names: reset_2fa, reset_password. User UUIDs can be provided in &#x60;ids&#x60; param as part of request payload.
  # @param body User UUIDs and Action Name params are required. Allowed values for Action Name param includes &#39;reset_2fa&#39; and &#39;reset_password&#39;
  # @param [Hash] opts the optional parameters
  # @return [MsaspecResponseFields]
  describe 'user_action_v1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_roles_action_v1
  # Grant or Revoke one or more role(s) to a user against a CID. User UUID, CID and Role ID(s) can be provided in request payload. Available Action(s) : grant, revoke
  # @param body All fields including CID, RoleID(s), User UUID and Action are required. Allowed values for Action param include &#39;grant&#39; and &#39;revoke&#39;.
  # @param [Hash] opts the optional parameters
  # @return [MsaspecResponseFields]
  describe 'user_roles_action_v1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
