=begin
#CrowdStrike API Specification

#Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and more information about API endpoints that don't yet support OAuth2, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation). To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`. Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.

The version of the OpenAPI document: 2022-10-19T15:57:46Z

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Falcon::FirewallManagementApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'FirewallManagementApi' do
  before do
    # run before each test
    @api_instance = Falcon::FirewallManagementApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of FirewallManagementApi' do
    it 'should create an instance of FirewallManagementApi' do
      expect(@api_instance).to be_instance_of(Falcon::FirewallManagementApi)
    end
  end

  # unit tests for aggregate_events
  # Aggregate events for customer
  # @param body Query criteria and settings
  # @param [Hash] opts the optional parameters
  # @return [FwmgrApiAggregatesResponse]
  describe 'aggregate_events test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for aggregate_policy_rules
  # Aggregate rules within a policy for customer
  # @param body Query criteria and settings
  # @param [Hash] opts the optional parameters
  # @return [FwmgrApiAggregatesResponse]
  describe 'aggregate_policy_rules test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for aggregate_rule_groups
  # Aggregate rule groups for customer
  # @param body Query criteria and settings
  # @param [Hash] opts the optional parameters
  # @return [FwmgrApiAggregatesResponse]
  describe 'aggregate_rule_groups test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for aggregate_rules
  # Aggregate rules for customer
  # @param body Query criteria and settings
  # @param [Hash] opts the optional parameters
  # @return [FwmgrApiAggregatesResponse]
  describe 'aggregate_rules test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_rule_group
  # Create new rule group on a platform for a customer with a name and description, and return the ID
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :clone_id A rule group ID from which to copy rules. If this is provided then the &#39;rules&#39; property of the body is ignored.
  # @option opts [String] :library If this flag is set to true then the rules will be cloned from the clone_id from the CrowdStrike Firewal Rule Groups Library.
  # @option opts [String] :comment Audit log comment for this action
  # @return [FwmgrApiQueryResponse]
  describe 'create_rule_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_rule_groups
  # Delete rule group entities by ID
  # @param ids The IDs of the rule groups to be deleted
  # @param [Hash] opts the optional parameters
  # @option opts [String] :comment Audit log comment for this action
  # @return [FwmgrApiQueryResponse]
  describe 'delete_rule_groups test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_events
  # Get events entities by ID and optionally version
  # @param ids The events to retrieve, identified by ID
  # @param [Hash] opts the optional parameters
  # @return [FwmgrApiEventsResponse]
  describe 'get_events test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_firewall_fields
  # Get the firewall field specifications by ID
  # @param ids The IDs of the rule types to retrieve
  # @param [Hash] opts the optional parameters
  # @return [FwmgrApiFirewallFieldsResponse]
  describe 'get_firewall_fields test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_platforms
  # Get platforms by ID, e.g., windows or mac or droid
  # @param ids The IDs of the platforms to retrieve
  # @param [Hash] opts the optional parameters
  # @return [FwmgrApiPlatformsResponse]
  describe 'get_platforms test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_policy_containers
  # Get policy container entities by policy ID
  # @param ids The policy container(s) to retrieve, identified by policy ID
  # @param [Hash] opts the optional parameters
  # @return [FwmgrApiPolicyContainersResponse]
  describe 'get_policy_containers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_rule_groups
  # Get rule group entities by ID. These groups do not contain their rule entites, just the rule IDs in precedence order.
  # @param ids The IDs of the rule groups to retrieve
  # @param [Hash] opts the optional parameters
  # @return [FwmgrApiRuleGroupsResponse]
  describe 'get_rule_groups test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_rules
  # Get rule entities by ID (64-bit unsigned int as decimal string) or Family ID (32-character hexadecimal string)
  # @param ids The rules to retrieve, identified by ID
  # @param [Hash] opts the optional parameters
  # @return [FwmgrApiRulesResponse]
  describe 'get_rules test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for query_events
  # Find all event IDs matching the query with filter
  # @param [Hash] opts the optional parameters
  # @option opts [String] :sort Possible order by fields: 
  # @option opts [String] :filter FQL query specifying the filter parameters. Filter term criteria: enabled, platform, name, description, etc TODO. Filter range criteria: created_on, modified_on; use any common date format, such as &#39;2010-05-15T14:55:21.892315096Z&#39;.
  # @option opts [String] :q Match query criteria, which includes all the filter string fields, plus TODO
  # @option opts [String] :offset Starting index of overall result set from which to return ids.
  # @option opts [String] :after A pagination token used with the &#x60;limit&#x60; parameter to manage pagination of results. On your first request, don&#39;t provide an &#x60;after&#x60; token. On subsequent requests, provide the &#x60;after&#x60; token from the previous response to continue from that place in the results.
  # @option opts [Integer] :limit Number of ids to return.
  # @return [FwmgrApiQueryResponse]
  describe 'query_events test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for query_firewall_fields
  # Get the firewall field specification IDs for the provided platform
  # @param [Hash] opts the optional parameters
  # @option opts [String] :platform_id Get fields configuration for this platform
  # @option opts [String] :offset Starting index of overall result set from which to return ids.
  # @option opts [Integer] :limit Number of ids to return.
  # @return [FwmgrMsaQueryResponse]
  describe 'query_firewall_fields test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for query_platforms
  # Get the list of platform names
  # @param [Hash] opts the optional parameters
  # @option opts [String] :offset Starting index of overall result set from which to return ids.
  # @option opts [Integer] :limit Number of ids to return.
  # @return [FwmgrMsaQueryResponse]
  describe 'query_platforms test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for query_policy_rules
  # Find all firewall rule IDs matching the query with filter, and return them in precedence order
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id The ID of the policy container within which to query
  # @option opts [String] :sort Possible order by fields: 
  # @option opts [String] :filter FQL query specifying the filter parameters. Filter term criteria: enabled, platform, name, description, etc TODO. Filter range criteria: created_on, modified_on; use any common date format, such as &#39;2010-05-15T14:55:21.892315096Z&#39;.
  # @option opts [String] :q Match query criteria, which includes all the filter string fields, plus TODO
  # @option opts [String] :offset Starting index of overall result set from which to return ids.
  # @option opts [Integer] :limit Number of ids to return.
  # @return [FwmgrApiQueryResponse]
  describe 'query_policy_rules test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for query_rule_groups
  # Find all rule group IDs matching the query with filter
  # @param [Hash] opts the optional parameters
  # @option opts [String] :sort Possible order by fields: 
  # @option opts [String] :filter FQL query specifying the filter parameters. Filter term criteria: enabled, platform, name, description, etc TODO. Filter range criteria: created_on, modified_on; use any common date format, such as &#39;2010-05-15T14:55:21.892315096Z&#39;.
  # @option opts [String] :q Match query criteria, which includes all the filter string fields, plus TODO
  # @option opts [String] :offset Starting index of overall result set from which to return ids.
  # @option opts [String] :after A pagination token used with the &#x60;limit&#x60; parameter to manage pagination of results. On your first request, don&#39;t provide an &#x60;after&#x60; token. On subsequent requests, provide the &#x60;after&#x60; token from the previous response to continue from that place in the results.
  # @option opts [Integer] :limit Number of ids to return.
  # @return [FwmgrApiQueryResponse]
  describe 'query_rule_groups test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for query_rules
  # Find all rule IDs matching the query with filter
  # @param [Hash] opts the optional parameters
  # @option opts [String] :sort Possible order by fields: 
  # @option opts [String] :filter FQL query specifying the filter parameters. Filter term criteria: enabled, platform, name, description, etc TODO. Filter range criteria: created_on, modified_on; use any common date format, such as &#39;2010-05-15T14:55:21.892315096Z&#39;.
  # @option opts [String] :q Match query criteria, which includes all the filter string fields, plus TODO
  # @option opts [String] :offset Starting index of overall result set from which to return ids.
  # @option opts [String] :after A pagination token used with the &#x60;limit&#x60; parameter to manage pagination of results. On your first request, don&#39;t provide an &#x60;after&#x60; token. On subsequent requests, provide the &#x60;after&#x60; token from the previous response to continue from that place in the results.
  # @option opts [Integer] :limit Number of ids to return.
  # @return [FwmgrApiQueryResponse]
  describe 'query_rules test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_policy_container
  # Update an identified policy container
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [FwmgrMsaReplyMetaOnly]
  describe 'update_policy_container test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_rule_group
  # Update name, description, or enabled status of a rule group, or create, edit, delete, or reorder rules
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :comment Audit log comment for this action
  # @return [FwmgrApiQueryResponse]
  describe 'update_rule_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
