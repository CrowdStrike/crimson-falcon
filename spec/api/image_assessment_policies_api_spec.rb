=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'spec_helper'
require 'json'

# Unit tests for Falcon::ImageAssessmentPoliciesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ImageAssessmentPoliciesApi' do
  before do
    # run before each test
    @api_instance = Falcon::ImageAssessmentPoliciesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ImageAssessmentPoliciesApi' do
    it 'should create an instance of ImageAssessmentPoliciesApi' do
      expect(@api_instance).to be_instance_of(Falcon::ImageAssessmentPoliciesApi)
    end
  end

  # unit tests for create_policies
  # Create Image Assessment policies
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [ModelsPolicyEntityResponse]
  describe 'create_policies test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_policy_groups
  # Create Image Assessment Policy Group entities
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [ModelsPolicyGroupEntityResponse]
  describe 'create_policy_groups test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_policy
  # Delete Image Assessment Policy by policy UUID
  # @param id Image Assessment Policy entity UUID
  # @param [Hash] opts the optional parameters
  # @return [CoreEntitiesResponse]
  describe 'delete_policy test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_policy_group
  # Delete Image Assessment Policy Group entities
  # @param id Policy Image Group entity UUID
  # @param [Hash] opts the optional parameters
  # @return [CoreEntitiesResponse]
  describe 'delete_policy_group test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_policies
  # Get all Image Assessment policies
  # @param [Hash] opts the optional parameters
  # @return [ModelsPolicyEntityResponse]
  describe 'read_policies test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_policy_exclusions
  # Retrieve Image Assessment Policy Exclusion entities
  # @param [Hash] opts the optional parameters
  # @return [ModelsPolicyExclusionEntityResponse]
  describe 'read_policy_exclusions test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_policy_groups
  # Retrieve Image Assessment Policy Group entities
  # @param [Hash] opts the optional parameters
  # @return [ModelsPolicyGroupEntityResponse]
  describe 'read_policy_groups test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_policies
  # Update Image Assessment Policy entities
  # @param id Image Assessment Policy entity UUID
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [ModelsPolicyEntityResponse]
  describe 'update_policies test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_policy_exclusions
  # Update Image Assessment Policy Exclusion entities
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [ModelsPolicyExclusionEntityResponse]
  describe 'update_policy_exclusions test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_policy_groups
  # Update Image Assessment Policy Group entities
  # @param id Policy Image Group entity UUID
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [ModelsPolicyGroupEntityResponse]
  describe 'update_policy_groups test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_policy_precedence
  # Update Image Assessment Policy precedence
  # @param body
  # @param [Hash] opts the optional parameters
  # @return [ModelsPolicyEntityResponse]
  describe 'update_policy_precedence test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
