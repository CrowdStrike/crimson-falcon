=begin
#CrowdStrike API Specification

#Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and more information about API endpoints that don't yet support OAuth2, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation). To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`. Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.

The version of the OpenAPI document: 2022-10-19T15:57:46Z

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Falcon::QuarantineApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'QuarantineApi' do
  before do
    # run before each test
    @api_instance = Falcon::QuarantineApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of QuarantineApi' do
    it 'should create an instance of QuarantineApi' do
      expect(@api_instance).to be_instance_of(Falcon::QuarantineApi)
    end
  end

  # unit tests for action_update_count
  # Returns count of potentially affected quarantined files for each action.
  # @param filter FQL specifying filter parameters.
  # @param [Hash] opts the optional parameters
  # @return [MsaAggregatesResponse]
  describe 'action_update_count test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_aggregate_files
  # Get quarantine file aggregates as specified via json in request body.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [MsaAggregatesResponse]
  describe 'get_aggregate_files test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_quarantine_files
  # Get quarantine file metadata for specified ids.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [DomainMsaQfResponse]
  describe 'get_quarantine_files test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for query_quarantine_files
  # Get quarantine file ids that match the provided filter criteria.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :offset Starting index of overall result set from which to return ids.
  # @option opts [Integer] :limit Number of ids to return.
  # @option opts [String] :sort Possible order by fields: hostname, username, date_updated, date_created, paths.path, state, paths.state. Ex: &#39;date_created|asc&#39;.
  # @option opts [String] :filter FQL query specifying the filter parameters. Special value &#39;*&#39; means to not filter on anything. Filter term criteria: status, adversary_id, device.device_id, device.country, device.hostname, behaviors.behavior_id, behaviors.ioc_type, behaviors.ioc_value, behaviors.username, behaviors.tree_root_hash. Filter range criteria:, max_severity, max_confidence, first_behavior, last_behavior.
  # @option opts [String] :q Match phrase_prefix query criteria; included fields: _all (all filter string fields), sha256, state, paths.path, paths.state, hostname, username, date_updated, date_created.
  # @return [MsaQueryResponse]
  describe 'query_quarantine_files test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_qf_by_query
  # Apply quarantine file actions by query.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [MsaReplyMetaOnly]
  describe 'update_qf_by_query test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_quarantined_detects_by_ids
  # Apply action by quarantine file ids
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [MsaReplyMetaOnly]
  describe 'update_quarantined_detects_by_ids test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
