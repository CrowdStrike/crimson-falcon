=begin
#CrowdStrike API Specification

#Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and more information about API endpoints that don't yet support OAuth2, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation). To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`. Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.

The version of the OpenAPI document: 2022-10-19T15:57:46Z

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Falcon::AlertsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'AlertsApi' do
  before do
    # run before each test
    @api_instance = Falcon::AlertsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AlertsApi' do
    it 'should create an instance of AlertsApi' do
      expect(@api_instance).to be_instance_of(Falcon::AlertsApi)
    end
  end

  # unit tests for get_queries_alerts_v1
  # retrieves all Alerts ids that match a given query
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :offset The first detection to return, where &#x60;0&#x60; is the latest detection. Use with the &#x60;offset&#x60; parameter to manage pagination of results.
  # @option opts [Integer] :limit The maximum number of detections to return in this response (default: 100; max: 10000). Use with the &#x60;offset&#x60; parameter to manage pagination of results.
  # @option opts [String] :sort Sort detections in either &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending) order. For example: &#x60;status|asc&#x60; or &#x60;status|desc&#x60;.
  # @option opts [String] :filter Filter detections using a query in Falcon Query Language (FQL). An asterisk wildcard &#x60;*&#x60; includes all results.   The full list of valid filter options is extensive. Review it in our [documentation inside the Falcon console](https://falcon.crowdstrike.com/documentation/45/falcon-query-language-fql).
  # @option opts [String] :q Search all detection metadata for the provided string
  # @return [MsaQueryResponse]
  describe 'get_queries_alerts_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_entities_alerts_v1
  # Perform actions on detections identified by detection ID(s) in request. Each action has a name and a description which describes what the action does.  remove_tag - remove a tag from 1 or more detection(s) assign_to_user_id - assign 1 or more detection(s) to a user identified by user id (eg: user1@example.com) unassign - unassign an previously assigned user from 1 or more detection(s). The value passed to this action is ignored. new_behavior_processed - adds a newly processed behavior to 1 or more detection(s) update_status - update status for 1 or more detection(s) assign_to_uuid - assign 1 or more detection(s) to a user identified by UUID add_tag - add a tag to 1 or more detection(s) remove_tags_by_prefix - remove tags with given prefix from 1 or more detection(s) append_comment - appends new comment to existing comments assign_to_name - assign 1 or more detection(s) to a user identified by user name show_in_ui - shows 1 or more detection(s) on UI if set to true, hides otherwise. an empty/nil value is also valid skip_side_effects - internal only command to skip side effects during Beta phase 
  # @param body request body takes a list of action parameter request that is applied against all \&quot;ids\&quot; provided
  # @param [Hash] opts the optional parameters
  # @return [MsaReplyMetaOnly]
  describe 'patch_entities_alerts_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_entities_alerts_v2
  # Perform actions on detections identified by detection ID(s) in request. Each action has a name and a description which describes what the action does.  
  # @param body request body takes a list of action parameter request that is applied against all \&quot;ids\&quot; provided
  # @param [Hash] opts the optional parameters
  # @return [MsaspecResponseFields]
  describe 'patch_entities_alerts_v2 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_aggregates_alerts_v1
  # retrieves aggregates for Alerts across all CIDs
  # @param body request body takes a list of aggregation query requests
  # @param [Hash] opts the optional parameters
  # @return [MsaAggregatesResponse]
  describe 'post_aggregates_alerts_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_entities_alerts_v1
  # retrieves all Alerts given their ids
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [DetectsapiPostEntitiesInvestigatablesV1Response]
  describe 'post_entities_alerts_v1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
