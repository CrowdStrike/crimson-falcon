=begin
#CrowdStrike API Specification

#Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and more information about API endpoints that don't yet support OAuth2, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation). To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`. Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.

The version of the OpenAPI document: 2022-10-19T15:57:46Z

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'cgi'

module Falcon
  class FirewallPoliciesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Firewall Policies by specifying details about the policy to create
    # @param body [RequestsCreateFirewallPoliciesV1] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clone_id The policy ID to be cloned from
    # @return [ResponsesFirewallPoliciesV1]
    def create_firewall_policies(body, opts = {})
      data, _status_code, _headers = create_firewall_policies_with_http_info(body, opts)
      data
    end

    # Create Firewall Policies by specifying details about the policy to create
    # @param body [RequestsCreateFirewallPoliciesV1] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clone_id The policy ID to be cloned from
    # @return [Array<(ResponsesFirewallPoliciesV1, Integer, Hash)>] ResponsesFirewallPoliciesV1 data, response status code and response headers
    def create_firewall_policies_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallPoliciesApi.create_firewall_policies ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FirewallPoliciesApi.create_firewall_policies"
      end
      if @api_client.config.client_side_validation && !opts[:'clone_id'].nil? && opts[:'clone_id'].to_s.length > 32
        fail ArgumentError, 'invalid value for "opts[:"clone_id"]" when calling FirewallPoliciesApi.create_firewall_policies, the character length must be smaller than or equal to 32.'
      end

      if @api_client.config.client_side_validation && !opts[:'clone_id'].nil? && opts[:'clone_id'].to_s.length < 32
        fail ArgumentError, 'invalid value for "opts[:"clone_id"]" when calling FirewallPoliciesApi.create_firewall_policies, the character length must be great than or equal to 32.'
      end

      # resource path
      local_var_path = '/policy/entities/firewall/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'clone_id'] = opts[:'clone_id'] if !opts[:'clone_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ResponsesFirewallPoliciesV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallPoliciesApi.create_firewall_policies",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallPoliciesApi#create_firewall_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a set of Firewall Policies by specifying their IDs
    # @param ids [Array<String>] The IDs of the Firewall Policies to delete
    # @param [Hash] opts the optional parameters
    # @return [MsaQueryResponse]
    def delete_firewall_policies(ids, opts = {})
      data, _status_code, _headers = delete_firewall_policies_with_http_info(ids, opts)
      data
    end

    # Delete a set of Firewall Policies by specifying their IDs
    # @param ids [Array<String>] The IDs of the Firewall Policies to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(MsaQueryResponse, Integer, Hash)>] MsaQueryResponse data, response status code and response headers
    def delete_firewall_policies_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallPoliciesApi.delete_firewall_policies ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling FirewallPoliciesApi.delete_firewall_policies"
      end
      # resource path
      local_var_path = '/policy/entities/firewall/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallPoliciesApi.delete_firewall_policies",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallPoliciesApi#delete_firewall_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a set of Firewall Policies by specifying their IDs
    # @param ids [Array<String>] The IDs of the Firewall Policies to return
    # @param [Hash] opts the optional parameters
    # @return [ResponsesFirewallPoliciesV1]
    def get_firewall_policies(ids, opts = {})
      data, _status_code, _headers = get_firewall_policies_with_http_info(ids, opts)
      data
    end

    # Retrieve a set of Firewall Policies by specifying their IDs
    # @param ids [Array<String>] The IDs of the Firewall Policies to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponsesFirewallPoliciesV1, Integer, Hash)>] ResponsesFirewallPoliciesV1 data, response status code and response headers
    def get_firewall_policies_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallPoliciesApi.get_firewall_policies ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling FirewallPoliciesApi.get_firewall_policies"
      end
      # resource path
      local_var_path = '/policy/entities/firewall/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResponsesFirewallPoliciesV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallPoliciesApi.get_firewall_policies",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallPoliciesApi#get_firewall_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Perform the specified action on the Firewall Policies specified in the request
    # @param action_name [String] The action to perform
    # @param body [MsaEntityActionRequestV2] 
    # @param [Hash] opts the optional parameters
    # @return [ResponsesFirewallPoliciesV1]
    def perform_firewall_policies_action(action_name, body, opts = {})
      data, _status_code, _headers = perform_firewall_policies_action_with_http_info(action_name, body, opts)
      data
    end

    # Perform the specified action on the Firewall Policies specified in the request
    # @param action_name [String] The action to perform
    # @param body [MsaEntityActionRequestV2] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponsesFirewallPoliciesV1, Integer, Hash)>] ResponsesFirewallPoliciesV1 data, response status code and response headers
    def perform_firewall_policies_action_with_http_info(action_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallPoliciesApi.perform_firewall_policies_action ...'
      end
      # verify the required parameter 'action_name' is set
      if @api_client.config.client_side_validation && action_name.nil?
        fail ArgumentError, "Missing the required parameter 'action_name' when calling FirewallPoliciesApi.perform_firewall_policies_action"
      end
      # verify enum value
      allowable_values = ["add-host-group", "disable", "enable", "remove-host-group"]
      if @api_client.config.client_side_validation && !allowable_values.include?(action_name)
        fail ArgumentError, "invalid value for \"action_name\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FirewallPoliciesApi.perform_firewall_policies_action"
      end
      # resource path
      local_var_path = '/policy/entities/firewall-actions/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'action_name'] = action_name

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ResponsesFirewallPoliciesV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallPoliciesApi.perform_firewall_policies_action",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallPoliciesApi#perform_firewall_policies_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search for Firewall Policies in your environment by providing an FQL filter and paging details. Returns a set of Firewall Policies which match the filter criteria
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter The filter expression that should be used to limit the results
    # @option opts [Integer] :offset The offset to start retrieving records from
    # @option opts [Integer] :limit The maximum records to return. [1-5000]
    # @option opts [String] :sort The property to sort by
    # @return [ResponsesFirewallPoliciesV1]
    def query_combined_firewall_policies(opts = {})
      data, _status_code, _headers = query_combined_firewall_policies_with_http_info(opts)
      data
    end

    # Search for Firewall Policies in your environment by providing an FQL filter and paging details. Returns a set of Firewall Policies which match the filter criteria
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter The filter expression that should be used to limit the results
    # @option opts [Integer] :offset The offset to start retrieving records from
    # @option opts [Integer] :limit The maximum records to return. [1-5000]
    # @option opts [String] :sort The property to sort by
    # @return [Array<(ResponsesFirewallPoliciesV1, Integer, Hash)>] ResponsesFirewallPoliciesV1 data, response status code and response headers
    def query_combined_firewall_policies_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallPoliciesApi.query_combined_firewall_policies ...'
      end
      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling FirewallPoliciesApi.query_combined_firewall_policies, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling FirewallPoliciesApi.query_combined_firewall_policies, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling FirewallPoliciesApi.query_combined_firewall_policies, must be greater than or equal to 1.'
      end

      allowable_values = ["created_by.asc", "created_by.desc", "created_timestamp.asc", "created_timestamp.desc", "enabled.asc", "enabled.desc", "modified_by.asc", "modified_by.desc", "modified_timestamp.asc", "modified_timestamp.desc", "name.asc", "name.desc", "platform_name.asc", "platform_name.desc", "precedence.asc", "precedence.desc"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/policy/combined/firewall/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResponsesFirewallPoliciesV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallPoliciesApi.query_combined_firewall_policies",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallPoliciesApi#query_combined_firewall_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search for members of a Firewall Policy in your environment by providing an FQL filter and paging details. Returns a set of host details which match the filter criteria
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The ID of the Firewall Policy to search for members of
    # @option opts [String] :filter The filter expression that should be used to limit the results
    # @option opts [Integer] :offset The offset to start retrieving records from
    # @option opts [Integer] :limit The maximum records to return. [1-5000]
    # @option opts [String] :sort The property to sort by
    # @return [ResponsesPolicyMembersRespV1]
    def query_combined_firewall_policy_members(opts = {})
      data, _status_code, _headers = query_combined_firewall_policy_members_with_http_info(opts)
      data
    end

    # Search for members of a Firewall Policy in your environment by providing an FQL filter and paging details. Returns a set of host details which match the filter criteria
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The ID of the Firewall Policy to search for members of
    # @option opts [String] :filter The filter expression that should be used to limit the results
    # @option opts [Integer] :offset The offset to start retrieving records from
    # @option opts [Integer] :limit The maximum records to return. [1-5000]
    # @option opts [String] :sort The property to sort by
    # @return [Array<(ResponsesPolicyMembersRespV1, Integer, Hash)>] ResponsesPolicyMembersRespV1 data, response status code and response headers
    def query_combined_firewall_policy_members_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallPoliciesApi.query_combined_firewall_policy_members ...'
      end
      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling FirewallPoliciesApi.query_combined_firewall_policy_members, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling FirewallPoliciesApi.query_combined_firewall_policy_members, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling FirewallPoliciesApi.query_combined_firewall_policy_members, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/policy/combined/firewall-members/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResponsesPolicyMembersRespV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallPoliciesApi.query_combined_firewall_policy_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallPoliciesApi#query_combined_firewall_policy_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search for Firewall Policies in your environment by providing an FQL filter and paging details. Returns a set of Firewall Policy IDs which match the filter criteria
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter The filter expression that should be used to limit the results
    # @option opts [Integer] :offset The offset to start retrieving records from
    # @option opts [Integer] :limit The maximum records to return. [1-5000]
    # @option opts [String] :sort The property to sort by
    # @return [MsaQueryResponse]
    def query_firewall_policies(opts = {})
      data, _status_code, _headers = query_firewall_policies_with_http_info(opts)
      data
    end

    # Search for Firewall Policies in your environment by providing an FQL filter and paging details. Returns a set of Firewall Policy IDs which match the filter criteria
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter The filter expression that should be used to limit the results
    # @option opts [Integer] :offset The offset to start retrieving records from
    # @option opts [Integer] :limit The maximum records to return. [1-5000]
    # @option opts [String] :sort The property to sort by
    # @return [Array<(MsaQueryResponse, Integer, Hash)>] MsaQueryResponse data, response status code and response headers
    def query_firewall_policies_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallPoliciesApi.query_firewall_policies ...'
      end
      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling FirewallPoliciesApi.query_firewall_policies, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling FirewallPoliciesApi.query_firewall_policies, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling FirewallPoliciesApi.query_firewall_policies, must be greater than or equal to 1.'
      end

      allowable_values = ["created_by.asc", "created_by.desc", "created_timestamp.asc", "created_timestamp.desc", "enabled.asc", "enabled.desc", "modified_by.asc", "modified_by.desc", "modified_timestamp.asc", "modified_timestamp.desc", "name.asc", "name.desc", "platform_name.asc", "platform_name.desc", "precedence.asc", "precedence.desc"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/policy/queries/firewall/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallPoliciesApi.query_firewall_policies",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallPoliciesApi#query_firewall_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search for members of a Firewall Policy in your environment by providing an FQL filter and paging details. Returns a set of Agent IDs which match the filter criteria
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The ID of the Firewall Policy to search for members of
    # @option opts [String] :filter The filter expression that should be used to limit the results
    # @option opts [Integer] :offset The offset to start retrieving records from
    # @option opts [Integer] :limit The maximum records to return. [1-5000]
    # @option opts [String] :sort The property to sort by
    # @return [MsaQueryResponse]
    def query_firewall_policy_members(opts = {})
      data, _status_code, _headers = query_firewall_policy_members_with_http_info(opts)
      data
    end

    # Search for members of a Firewall Policy in your environment by providing an FQL filter and paging details. Returns a set of Agent IDs which match the filter criteria
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The ID of the Firewall Policy to search for members of
    # @option opts [String] :filter The filter expression that should be used to limit the results
    # @option opts [Integer] :offset The offset to start retrieving records from
    # @option opts [Integer] :limit The maximum records to return. [1-5000]
    # @option opts [String] :sort The property to sort by
    # @return [Array<(MsaQueryResponse, Integer, Hash)>] MsaQueryResponse data, response status code and response headers
    def query_firewall_policy_members_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallPoliciesApi.query_firewall_policy_members ...'
      end
      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling FirewallPoliciesApi.query_firewall_policy_members, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling FirewallPoliciesApi.query_firewall_policy_members, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling FirewallPoliciesApi.query_firewall_policy_members, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/policy/queries/firewall-members/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallPoliciesApi.query_firewall_policy_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallPoliciesApi#query_firewall_policy_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sets the precedence of Firewall Policies based on the order of IDs specified in the request. The first ID specified will have the highest precedence and the last ID specified will have the lowest. You must specify all non-Default Policies for a platform when updating precedence
    # @param body [RequestsSetPolicyPrecedenceReqV1] 
    # @param [Hash] opts the optional parameters
    # @return [MsaQueryResponse]
    def set_firewall_policies_precedence(body, opts = {})
      data, _status_code, _headers = set_firewall_policies_precedence_with_http_info(body, opts)
      data
    end

    # Sets the precedence of Firewall Policies based on the order of IDs specified in the request. The first ID specified will have the highest precedence and the last ID specified will have the lowest. You must specify all non-Default Policies for a platform when updating precedence
    # @param body [RequestsSetPolicyPrecedenceReqV1] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MsaQueryResponse, Integer, Hash)>] MsaQueryResponse data, response status code and response headers
    def set_firewall_policies_precedence_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallPoliciesApi.set_firewall_policies_precedence ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FirewallPoliciesApi.set_firewall_policies_precedence"
      end
      # resource path
      local_var_path = '/policy/entities/firewall-precedence/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'MsaQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallPoliciesApi.set_firewall_policies_precedence",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallPoliciesApi#set_firewall_policies_precedence\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Firewall Policies by specifying the ID of the policy and details to update
    # @param body [RequestsUpdateFirewallPoliciesV1] 
    # @param [Hash] opts the optional parameters
    # @return [ResponsesFirewallPoliciesV1]
    def update_firewall_policies(body, opts = {})
      data, _status_code, _headers = update_firewall_policies_with_http_info(body, opts)
      data
    end

    # Update Firewall Policies by specifying the ID of the policy and details to update
    # @param body [RequestsUpdateFirewallPoliciesV1] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponsesFirewallPoliciesV1, Integer, Hash)>] ResponsesFirewallPoliciesV1 data, response status code and response headers
    def update_firewall_policies_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallPoliciesApi.update_firewall_policies ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FirewallPoliciesApi.update_firewall_policies"
      end
      # resource path
      local_var_path = '/policy/entities/firewall/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ResponsesFirewallPoliciesV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallPoliciesApi.update_firewall_policies",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallPoliciesApi#update_firewall_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
