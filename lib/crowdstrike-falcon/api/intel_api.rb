=begin
#CrowdStrike API Specification

#Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and more information about API endpoints that don't yet support OAuth2, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation). To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`. Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.

The version of the OpenAPI document: 2022-10-19T15:57:46Z

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'cgi'

module Falcon
  class IntelApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve specific actors using their actor IDs.
    # @param ids [Array<String>] The IDs of the actors you want to retrieve.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields The fields to return, or a predefined set of fields in the form of the collection name surrounded by two underscores like:  \\_\\_\\&lt;collection\\&gt;\\_\\_.  Ex: slug \\_\\_full\\_\\_.  Defaults to \\_\\_basic\\_\\_.
    # @return [DomainActorsResponse]
    def get_intel_actor_entities(ids, opts = {})
      data, _status_code, _headers = get_intel_actor_entities_with_http_info(ids, opts)
      data
    end

    # Retrieve specific actors using their actor IDs.
    # @param ids [Array<String>] The IDs of the actors you want to retrieve.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields The fields to return, or a predefined set of fields in the form of the collection name surrounded by two underscores like:  \\_\\_\\&lt;collection\\&gt;\\_\\_.  Ex: slug \\_\\_full\\_\\_.  Defaults to \\_\\_basic\\_\\_.
    # @return [Array<(DomainActorsResponse, Integer, Hash)>] DomainActorsResponse data, response status code and response headers
    def get_intel_actor_entities_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntelApi.get_intel_actor_entities ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling IntelApi.get_intel_actor_entities"
      end
      # resource path
      local_var_path = '/intel/entities/actors/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)
      query_params[:'fields'] = @api_client.build_collection_param(opts[:'fields'], :multi) if !opts[:'fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainActorsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IntelApi.get_intel_actor_entities",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntelApi#get_intel_actor_entities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve specific indicators using their indicator IDs.
    # @param body [MsaIdsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [DomainPublicIndicatorsV3Response]
    def get_intel_indicator_entities(body, opts = {})
      data, _status_code, _headers = get_intel_indicator_entities_with_http_info(body, opts)
      data
    end

    # Retrieve specific indicators using their indicator IDs.
    # @param body [MsaIdsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainPublicIndicatorsV3Response, Integer, Hash)>] DomainPublicIndicatorsV3Response data, response status code and response headers
    def get_intel_indicator_entities_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntelApi.get_intel_indicator_entities ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling IntelApi.get_intel_indicator_entities"
      end
      # resource path
      local_var_path = '/intel/entities/indicators/GET/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainPublicIndicatorsV3Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IntelApi.get_intel_indicator_entities",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntelApi#get_intel_indicator_entities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve specific reports using their report IDs.
    # @param ids [Array<String>] The IDs of the reports you want to retrieve.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields The fields to return, or a predefined set of fields in the form of the collection name surrounded by two underscores like:  \\_\\_\\&lt;collection\\&gt;\\_\\_.  Ex: slug \\_\\_full\\_\\_.  Defaults to \\_\\_basic\\_\\_.
    # @return [DomainNewsResponse]
    def get_intel_report_entities(ids, opts = {})
      data, _status_code, _headers = get_intel_report_entities_with_http_info(ids, opts)
      data
    end

    # Retrieve specific reports using their report IDs.
    # @param ids [Array<String>] The IDs of the reports you want to retrieve.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields The fields to return, or a predefined set of fields in the form of the collection name surrounded by two underscores like:  \\_\\_\\&lt;collection\\&gt;\\_\\_.  Ex: slug \\_\\_full\\_\\_.  Defaults to \\_\\_basic\\_\\_.
    # @return [Array<(DomainNewsResponse, Integer, Hash)>] DomainNewsResponse data, response status code and response headers
    def get_intel_report_entities_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntelApi.get_intel_report_entities ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling IntelApi.get_intel_report_entities"
      end
      # resource path
      local_var_path = '/intel/entities/reports/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)
      query_params[:'fields'] = @api_client.build_collection_param(opts[:'fields'], :multi) if !opts[:'fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainNewsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IntelApi.get_intel_report_entities",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntelApi#get_intel_report_entities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return a Report PDF attachment
    # @param id [String] The ID of the report you want to download as a PDF.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def get_intel_report_pdf(id, opts = {})
      data, _status_code, _headers = get_intel_report_pdf_with_http_info(id, opts)
      data
    end

    # Return a Report PDF attachment
    # @param id [String] The ID of the report you want to download as a PDF.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_intel_report_pdf_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntelApi.get_intel_report_pdf ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IntelApi.get_intel_report_pdf"
      end
      # resource path
      local_var_path = '/intel/entities/report-files/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', 'application/json', 'application/pdf'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IntelApi.get_intel_report_pdf",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntelApi#get_intel_report_pdf\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve details for rule sets for the specified ids.
    # @param ids [Array<String>] The ids of rules to return.
    # @param [Hash] opts the optional parameters
    # @return [DomainRulesResponse]
    def get_intel_rule_entities(ids, opts = {})
      data, _status_code, _headers = get_intel_rule_entities_with_http_info(ids, opts)
      data
    end

    # Retrieve details for rule sets for the specified ids.
    # @param ids [Array<String>] The ids of rules to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainRulesResponse, Integer, Hash)>] DomainRulesResponse data, response status code and response headers
    def get_intel_rule_entities_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntelApi.get_intel_rule_entities ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling IntelApi.get_intel_rule_entities"
      end
      # resource path
      local_var_path = '/intel/entities/rules/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainRulesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IntelApi.get_intel_rule_entities",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntelApi#get_intel_rule_entities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download earlier rule sets.
    # @param id [Integer] The ID of the rule set.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept Choose the format you want the rule set in.
    # @option opts [String] :format Choose the format you want the rule set in. Valid formats are zip and gzip. Defaults to zip.
    # @return [File]
    def get_intel_rule_file(id, opts = {})
      data, _status_code, _headers = get_intel_rule_file_with_http_info(id, opts)
      data
    end

    # Download earlier rule sets.
    # @param id [Integer] The ID of the rule set.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept Choose the format you want the rule set in.
    # @option opts [String] :format Choose the format you want the rule set in. Valid formats are zip and gzip. Defaults to zip.
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_intel_rule_file_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntelApi.get_intel_rule_file ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IntelApi.get_intel_rule_file"
      end
      # resource path
      local_var_path = '/intel/entities/rules-files/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/zip', 'application/gzip', 'application/octet-stream', 'application/json', '*/*'])
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IntelApi.get_intel_rule_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntelApi#get_intel_rule_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download the latest rule set.
    # @param type [String] The rule news report type. Accepted values:  snort-suricata-master  snort-suricata-update  snort-suricata-changelog  yara-master  yara-update  yara-changelog  common-event-format  netwitness
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept Choose the format you want the rule set in.
    # @option opts [String] :format Choose the format you want the rule set in. Valid formats are zip and gzip. Defaults to zip.
    # @option opts [String] :if_modified_since Download Only if changed since
    # @return [File]
    def get_latest_intel_rule_file(type, opts = {})
      data, _status_code, _headers = get_latest_intel_rule_file_with_http_info(type, opts)
      data
    end

    # Download the latest rule set.
    # @param type [String] The rule news report type. Accepted values:  snort-suricata-master  snort-suricata-update  snort-suricata-changelog  yara-master  yara-update  yara-changelog  common-event-format  netwitness
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept Choose the format you want the rule set in.
    # @option opts [String] :format Choose the format you want the rule set in. Valid formats are zip and gzip. Defaults to zip.
    # @option opts [String] :if_modified_since Download Only if changed since
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_latest_intel_rule_file_with_http_info(type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntelApi.get_latest_intel_rule_file ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling IntelApi.get_latest_intel_rule_file"
      end
      # resource path
      local_var_path = '/intel/entities/rules-latest-files/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = type
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/zip', 'application/gzip', 'application/octet-stream', 'application/json', '*/*'])
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?
      header_params[:'If-Modified-Since'] = opts[:'if_modified_since'] if !opts[:'if_modified_since'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IntelApi.get_latest_intel_rule_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntelApi#get_latest_intel_rule_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get info about actors that match provided FQL filters.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Set the starting row number to return actors from. Defaults to 0.
    # @option opts [Integer] :limit Set the number of actors to return. The value must be between 1 and 5000.
    # @option opts [String] :sort Order fields in ascending or descending order.  Ex: created_date|asc.
    # @option opts [String] :filter Filter your query by specifying FQL filter parameters. Filter parameters include:  actors, actors.id, actors.name, actors.slug, actors.url, created_date, description, id, last_modified_date, motivations, motivations.id, motivations.slug, motivations.value, name, name.raw, short_description, slug, sub_type, sub_type.id, sub_type.name, sub_type.slug, tags, tags.id, tags.slug, tags.value, target_countries, target_countries.id, target_countries.slug, target_countries.value, target_industries, target_industries.id, target_industries.slug, target_industries.value, type, type.id, type.name, type.slug, url.
    # @option opts [String] :q Perform a generic substring search across all fields.
    # @option opts [Array<String>] :fields The fields to return, or a predefined set of fields in the form of the collection name surrounded by two underscores like:  \\_\\_\\&lt;collection\\&gt;\\_\\_.  Ex: slug \\_\\_full\\_\\_.  Defaults to \\_\\_basic\\_\\_.
    # @return [DomainActorsResponse]
    def query_intel_actor_entities(opts = {})
      data, _status_code, _headers = query_intel_actor_entities_with_http_info(opts)
      data
    end

    # Get info about actors that match provided FQL filters.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Set the starting row number to return actors from. Defaults to 0.
    # @option opts [Integer] :limit Set the number of actors to return. The value must be between 1 and 5000.
    # @option opts [String] :sort Order fields in ascending or descending order.  Ex: created_date|asc.
    # @option opts [String] :filter Filter your query by specifying FQL filter parameters. Filter parameters include:  actors, actors.id, actors.name, actors.slug, actors.url, created_date, description, id, last_modified_date, motivations, motivations.id, motivations.slug, motivations.value, name, name.raw, short_description, slug, sub_type, sub_type.id, sub_type.name, sub_type.slug, tags, tags.id, tags.slug, tags.value, target_countries, target_countries.id, target_countries.slug, target_countries.value, target_industries, target_industries.id, target_industries.slug, target_industries.value, type, type.id, type.name, type.slug, url.
    # @option opts [String] :q Perform a generic substring search across all fields.
    # @option opts [Array<String>] :fields The fields to return, or a predefined set of fields in the form of the collection name surrounded by two underscores like:  \\_\\_\\&lt;collection\\&gt;\\_\\_.  Ex: slug \\_\\_full\\_\\_.  Defaults to \\_\\_basic\\_\\_.
    # @return [Array<(DomainActorsResponse, Integer, Hash)>] DomainActorsResponse data, response status code and response headers
    def query_intel_actor_entities_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntelApi.query_intel_actor_entities ...'
      end
      # resource path
      local_var_path = '/intel/combined/actors/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'fields'] = @api_client.build_collection_param(opts[:'fields'], :multi) if !opts[:'fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainActorsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IntelApi.query_intel_actor_entities",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntelApi#query_intel_actor_entities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get actor IDs that match provided FQL filters.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Set the starting row number to return actors IDs from. Defaults to 0.
    # @option opts [Integer] :limit Set the number of actor IDs to return. The value must be between 1 and 5000.
    # @option opts [String] :sort Order fields in ascending or descending order.  Ex: created_date|asc.
    # @option opts [String] :filter Filter your query by specifying FQL filter parameters. Filter parameters include:  actors, actors.id, actors.name, actors.slug, actors.url, created_date, description, id, last_modified_date, motivations, motivations.id, motivations.slug, motivations.value, name, name.raw, short_description, slug, sub_type, sub_type.id, sub_type.name, sub_type.slug, tags, tags.id, tags.slug, tags.value, target_countries, target_countries.id, target_countries.slug, target_countries.value, target_industries, target_industries.id, target_industries.slug, target_industries.value, type, type.id, type.name, type.slug, url.
    # @option opts [String] :q Perform a generic substring search across all fields.
    # @return [MsaQueryResponse]
    def query_intel_actor_ids(opts = {})
      data, _status_code, _headers = query_intel_actor_ids_with_http_info(opts)
      data
    end

    # Get actor IDs that match provided FQL filters.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Set the starting row number to return actors IDs from. Defaults to 0.
    # @option opts [Integer] :limit Set the number of actor IDs to return. The value must be between 1 and 5000.
    # @option opts [String] :sort Order fields in ascending or descending order.  Ex: created_date|asc.
    # @option opts [String] :filter Filter your query by specifying FQL filter parameters. Filter parameters include:  actors, actors.id, actors.name, actors.slug, actors.url, created_date, description, id, last_modified_date, motivations, motivations.id, motivations.slug, motivations.value, name, name.raw, short_description, slug, sub_type, sub_type.id, sub_type.name, sub_type.slug, tags, tags.id, tags.slug, tags.value, target_countries, target_countries.id, target_countries.slug, target_countries.value, target_industries, target_industries.id, target_industries.slug, target_industries.value, type, type.id, type.name, type.slug, url.
    # @option opts [String] :q Perform a generic substring search across all fields.
    # @return [Array<(MsaQueryResponse, Integer, Hash)>] MsaQueryResponse data, response status code and response headers
    def query_intel_actor_ids_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntelApi.query_intel_actor_ids ...'
      end
      # resource path
      local_var_path = '/intel/queries/actors/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IntelApi.query_intel_actor_ids",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntelApi#query_intel_actor_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get info about indicators that match provided FQL filters.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Set the starting row number to return indicators from. Defaults to 0.
    # @option opts [Integer] :limit Set the number of indicators to return. The number must be between 1 and 10000
    # @option opts [String] :sort Order fields in ascending or descending order.  Ex: published_date|asc.
    # @option opts [String] :filter Filter your query by specifying FQL filter parameters. Filter parameters include:  _marker, actors, deleted, domain_types, id, indicator, ip_address_types, kill_chains, labels, labels.created_on, labels.last_valid_on, labels.name, last_updated, malicious_confidence, malware_families, published_date, reports, scope, targets, threat_types, type, vulnerabilities.
    # @option opts [String] :q Perform a generic substring search across all fields.
    # @option opts [Boolean] :include_deleted If true, include both published and deleted indicators in the response. Defaults to false.
    # @option opts [Boolean] :include_relations If true, include related indicators in the response. Defaults to true.
    # @return [DomainPublicIndicatorsV3Response]
    def query_intel_indicator_entities(opts = {})
      data, _status_code, _headers = query_intel_indicator_entities_with_http_info(opts)
      data
    end

    # Get info about indicators that match provided FQL filters.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Set the starting row number to return indicators from. Defaults to 0.
    # @option opts [Integer] :limit Set the number of indicators to return. The number must be between 1 and 10000
    # @option opts [String] :sort Order fields in ascending or descending order.  Ex: published_date|asc.
    # @option opts [String] :filter Filter your query by specifying FQL filter parameters. Filter parameters include:  _marker, actors, deleted, domain_types, id, indicator, ip_address_types, kill_chains, labels, labels.created_on, labels.last_valid_on, labels.name, last_updated, malicious_confidence, malware_families, published_date, reports, scope, targets, threat_types, type, vulnerabilities.
    # @option opts [String] :q Perform a generic substring search across all fields.
    # @option opts [Boolean] :include_deleted If true, include both published and deleted indicators in the response. Defaults to false.
    # @option opts [Boolean] :include_relations If true, include related indicators in the response. Defaults to true.
    # @return [Array<(DomainPublicIndicatorsV3Response, Integer, Hash)>] DomainPublicIndicatorsV3Response data, response status code and response headers
    def query_intel_indicator_entities_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntelApi.query_intel_indicator_entities ...'
      end
      # resource path
      local_var_path = '/intel/combined/indicators/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'include_deleted'] = opts[:'include_deleted'] if !opts[:'include_deleted'].nil?
      query_params[:'include_relations'] = opts[:'include_relations'] if !opts[:'include_relations'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainPublicIndicatorsV3Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IntelApi.query_intel_indicator_entities",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntelApi#query_intel_indicator_entities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get indicators IDs that match provided FQL filters.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Set the starting row number to return indicator IDs from. Defaults to 0.
    # @option opts [Integer] :limit Set the number of indicator IDs to return. The number must be between 1 and 10000
    # @option opts [String] :sort Order fields in ascending or descending order.  Ex: published_date|asc.
    # @option opts [String] :filter Filter your query by specifying FQL filter parameters. Filter parameters include:  _marker, actors, deleted, domain_types, id, indicator, ip_address_types, kill_chains, labels, labels.created_on, labels.last_valid_on, labels.name, last_updated, malicious_confidence, malware_families, published_date, reports, scope, targets, threat_types, type, vulnerabilities.
    # @option opts [String] :q Perform a generic substring search across all fields.
    # @option opts [Boolean] :include_deleted If true, include both published and deleted indicators in the response. Defaults to false.
    # @option opts [Boolean] :include_relations If true, include related indicators in the response. Defaults to true.
    # @return [MsaQueryResponse]
    def query_intel_indicator_ids(opts = {})
      data, _status_code, _headers = query_intel_indicator_ids_with_http_info(opts)
      data
    end

    # Get indicators IDs that match provided FQL filters.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Set the starting row number to return indicator IDs from. Defaults to 0.
    # @option opts [Integer] :limit Set the number of indicator IDs to return. The number must be between 1 and 10000
    # @option opts [String] :sort Order fields in ascending or descending order.  Ex: published_date|asc.
    # @option opts [String] :filter Filter your query by specifying FQL filter parameters. Filter parameters include:  _marker, actors, deleted, domain_types, id, indicator, ip_address_types, kill_chains, labels, labels.created_on, labels.last_valid_on, labels.name, last_updated, malicious_confidence, malware_families, published_date, reports, scope, targets, threat_types, type, vulnerabilities.
    # @option opts [String] :q Perform a generic substring search across all fields.
    # @option opts [Boolean] :include_deleted If true, include both published and deleted indicators in the response. Defaults to false.
    # @option opts [Boolean] :include_relations If true, include related indicators in the response. Defaults to true.
    # @return [Array<(MsaQueryResponse, Integer, Hash)>] MsaQueryResponse data, response status code and response headers
    def query_intel_indicator_ids_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntelApi.query_intel_indicator_ids ...'
      end
      # resource path
      local_var_path = '/intel/queries/indicators/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'include_deleted'] = opts[:'include_deleted'] if !opts[:'include_deleted'].nil?
      query_params[:'include_relations'] = opts[:'include_relations'] if !opts[:'include_relations'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IntelApi.query_intel_indicator_ids",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntelApi#query_intel_indicator_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get info about reports that match provided FQL filters.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Set the starting row number to return reports from. Defaults to 0.
    # @option opts [Integer] :limit Set the number of reports to return. The value must be between 1 and 5000.
    # @option opts [String] :sort Order fields in ascending or descending order. Ex: created_date|asc.
    # @option opts [String] :filter Filter your query by specifying FQL filter parameters. Filter parameters include:  actors, actors.id, actors.name, actors.slug, actors.url, created_date, description, id, last_modified_date, motivations, motivations.id, motivations.slug, motivations.value, name, name.raw, short_description, slug, sub_type, sub_type.id, sub_type.name, sub_type.slug, tags, tags.id, tags.slug, tags.value, target_countries, target_countries.id, target_countries.slug, target_countries.value, target_industries, target_industries.id, target_industries.slug, target_industries.value, type, type.id, type.name, type.slug, url.
    # @option opts [String] :q Perform a generic substring search across all fields.
    # @option opts [Array<String>] :fields The fields to return, or a predefined set of fields in the form of the collection name surrounded by two underscores like:  \\_\\_\\&lt;collection\\&gt;\\_\\_.  Ex: slug \\_\\_full\\_\\_.  Defaults to \\_\\_basic\\_\\_.
    # @return [DomainNewsResponse]
    def query_intel_report_entities(opts = {})
      data, _status_code, _headers = query_intel_report_entities_with_http_info(opts)
      data
    end

    # Get info about reports that match provided FQL filters.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Set the starting row number to return reports from. Defaults to 0.
    # @option opts [Integer] :limit Set the number of reports to return. The value must be between 1 and 5000.
    # @option opts [String] :sort Order fields in ascending or descending order. Ex: created_date|asc.
    # @option opts [String] :filter Filter your query by specifying FQL filter parameters. Filter parameters include:  actors, actors.id, actors.name, actors.slug, actors.url, created_date, description, id, last_modified_date, motivations, motivations.id, motivations.slug, motivations.value, name, name.raw, short_description, slug, sub_type, sub_type.id, sub_type.name, sub_type.slug, tags, tags.id, tags.slug, tags.value, target_countries, target_countries.id, target_countries.slug, target_countries.value, target_industries, target_industries.id, target_industries.slug, target_industries.value, type, type.id, type.name, type.slug, url.
    # @option opts [String] :q Perform a generic substring search across all fields.
    # @option opts [Array<String>] :fields The fields to return, or a predefined set of fields in the form of the collection name surrounded by two underscores like:  \\_\\_\\&lt;collection\\&gt;\\_\\_.  Ex: slug \\_\\_full\\_\\_.  Defaults to \\_\\_basic\\_\\_.
    # @return [Array<(DomainNewsResponse, Integer, Hash)>] DomainNewsResponse data, response status code and response headers
    def query_intel_report_entities_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntelApi.query_intel_report_entities ...'
      end
      # resource path
      local_var_path = '/intel/combined/reports/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'fields'] = @api_client.build_collection_param(opts[:'fields'], :multi) if !opts[:'fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainNewsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IntelApi.query_intel_report_entities",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntelApi#query_intel_report_entities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get report IDs that match provided FQL filters.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Set the starting row number to return report IDs from. Defaults to 0.
    # @option opts [Integer] :limit Set the number of report IDs to return. The value must be between 1 and 5000.
    # @option opts [String] :sort Order fields in ascending or descending order.  Ex: created_date|asc.
    # @option opts [String] :filter Filter your query by specifying FQL filter parameters. Filter parameters include:  actors, actors.id, actors.name, actors.slug, actors.url, created_date, description, id, last_modified_date, motivations, motivations.id, motivations.slug, motivations.value, name, name.raw, short_description, slug, sub_type, sub_type.id, sub_type.name, sub_type.slug, tags, tags.id, tags.slug, tags.value, target_countries, target_countries.id, target_countries.slug, target_countries.value, target_industries, target_industries.id, target_industries.slug, target_industries.value, type, type.id, type.name, type.slug, url.
    # @option opts [String] :q Perform a generic substring search across all fields.
    # @return [MsaQueryResponse]
    def query_intel_report_ids(opts = {})
      data, _status_code, _headers = query_intel_report_ids_with_http_info(opts)
      data
    end

    # Get report IDs that match provided FQL filters.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Set the starting row number to return report IDs from. Defaults to 0.
    # @option opts [Integer] :limit Set the number of report IDs to return. The value must be between 1 and 5000.
    # @option opts [String] :sort Order fields in ascending or descending order.  Ex: created_date|asc.
    # @option opts [String] :filter Filter your query by specifying FQL filter parameters. Filter parameters include:  actors, actors.id, actors.name, actors.slug, actors.url, created_date, description, id, last_modified_date, motivations, motivations.id, motivations.slug, motivations.value, name, name.raw, short_description, slug, sub_type, sub_type.id, sub_type.name, sub_type.slug, tags, tags.id, tags.slug, tags.value, target_countries, target_countries.id, target_countries.slug, target_countries.value, target_industries, target_industries.id, target_industries.slug, target_industries.value, type, type.id, type.name, type.slug, url.
    # @option opts [String] :q Perform a generic substring search across all fields.
    # @return [Array<(MsaQueryResponse, Integer, Hash)>] MsaQueryResponse data, response status code and response headers
    def query_intel_report_ids_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntelApi.query_intel_report_ids ...'
      end
      # resource path
      local_var_path = '/intel/queries/reports/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IntelApi.query_intel_report_ids",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntelApi#query_intel_report_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search for rule IDs that match provided filter criteria.
    # @param type [String] The rule news report type. Accepted values:  snort-suricata-master  snort-suricata-update  snort-suricata-changelog  yara-master  yara-update  yara-changelog  common-event-format  netwitness
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Set the starting row number to return reports from. Defaults to 0.
    # @option opts [Integer] :limit The number of rule IDs to return. Defaults to 10.
    # @option opts [String] :sort Order fields in ascending or descending order.  Ex: created_date|asc.
    # @option opts [Array<String>] :name Search by rule title.
    # @option opts [Array<String>] :description Substring match on description field.
    # @option opts [Array<String>] :tags Search for rule tags.
    # @option opts [Integer] :min_created_date Filter results to those created on or after a certain date.
    # @option opts [String] :max_created_date Filter results to those created on or before a certain date.
    # @option opts [String] :q Perform a generic substring search across all fields.
    # @return [MsaQueryResponse]
    def query_intel_rule_ids(type, opts = {})
      data, _status_code, _headers = query_intel_rule_ids_with_http_info(type, opts)
      data
    end

    # Search for rule IDs that match provided filter criteria.
    # @param type [String] The rule news report type. Accepted values:  snort-suricata-master  snort-suricata-update  snort-suricata-changelog  yara-master  yara-update  yara-changelog  common-event-format  netwitness
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Set the starting row number to return reports from. Defaults to 0.
    # @option opts [Integer] :limit The number of rule IDs to return. Defaults to 10.
    # @option opts [String] :sort Order fields in ascending or descending order.  Ex: created_date|asc.
    # @option opts [Array<String>] :name Search by rule title.
    # @option opts [Array<String>] :description Substring match on description field.
    # @option opts [Array<String>] :tags Search for rule tags.
    # @option opts [Integer] :min_created_date Filter results to those created on or after a certain date.
    # @option opts [String] :max_created_date Filter results to those created on or before a certain date.
    # @option opts [String] :q Perform a generic substring search across all fields.
    # @return [Array<(MsaQueryResponse, Integer, Hash)>] MsaQueryResponse data, response status code and response headers
    def query_intel_rule_ids_with_http_info(type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntelApi.query_intel_rule_ids ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling IntelApi.query_intel_rule_ids"
      end
      # resource path
      local_var_path = '/intel/queries/rules/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = type
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'name'] = @api_client.build_collection_param(opts[:'name'], :csv) if !opts[:'name'].nil?
      query_params[:'description'] = @api_client.build_collection_param(opts[:'description'], :csv) if !opts[:'description'].nil?
      query_params[:'tags'] = @api_client.build_collection_param(opts[:'tags'], :csv) if !opts[:'tags'].nil?
      query_params[:'min_created_date'] = opts[:'min_created_date'] if !opts[:'min_created_date'].nil?
      query_params[:'max_created_date'] = opts[:'max_created_date'] if !opts[:'max_created_date'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IntelApi.query_intel_rule_ids",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntelApi#query_intel_rule_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
