=begin
#CrowdStrike API Specification

#Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and more information about API endpoints that don't yet support OAuth2, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation). To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`. Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.

The version of the OpenAPI document: 2022-10-19T15:57:46Z

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'cgi'

module Falcon
  class D4cRegistrationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Creates a new account in our system for a customer and generates a script for them to run in their cloud environment to grant us access.
    # @param body [RegistrationAzureAccountCreateRequestExternalV1] 
    # @param [Hash] opts the optional parameters
    # @return [RegistrationAzureAccountResponseV1]
    def create_cspm_azure_account(body, opts = {})
      data, _status_code, _headers = create_cspm_azure_account_with_http_info(body, opts)
      data
    end

    # Creates a new account in our system for a customer and generates a script for them to run in their cloud environment to grant us access.
    # @param body [RegistrationAzureAccountCreateRequestExternalV1] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationAzureAccountResponseV1, Integer, Hash)>] RegistrationAzureAccountResponseV1 data, response status code and response headers
    def create_cspm_azure_account_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: D4cRegistrationApi.create_cspm_azure_account ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling D4cRegistrationApi.create_cspm_azure_account"
      end
      # resource path
      local_var_path = '/cloud-connect-azure/entities/account/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationAzureAccountResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"D4cRegistrationApi.create_cspm_azure_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: D4cRegistrationApi#create_cspm_azure_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new account in our system for a customer and generates a new service account for them to add access to in their GCP environment to grant us access.
    # @param body [RegistrationGCPAccountCreateRequestExtV1] 
    # @param [Hash] opts the optional parameters
    # @return [RegistrationGCPAccountResponseV1]
    def create_cspmgcp_account(body, opts = {})
      data, _status_code, _headers = create_cspmgcp_account_with_http_info(body, opts)
      data
    end

    # Creates a new account in our system for a customer and generates a new service account for them to add access to in their GCP environment to grant us access.
    # @param body [RegistrationGCPAccountCreateRequestExtV1] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationGCPAccountResponseV1, Integer, Hash)>] RegistrationGCPAccountResponseV1 data, response status code and response headers
    def create_cspmgcp_account_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: D4cRegistrationApi.create_cspmgcp_account ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling D4cRegistrationApi.create_cspmgcp_account"
      end
      # resource path
      local_var_path = '/cloud-connect-gcp/entities/account/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationGCPAccountResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"D4cRegistrationApi.create_cspmgcp_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: D4cRegistrationApi#create_cspmgcp_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns JSON object(s) that contain the base64 encoded certificate for a service principal.
    # @param tenant_id [Array<String>] Azure Tenant ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :refresh  (default to 'false')
    # @return [RegistrationAzureDownloadCertificateResponseV1]
    def discover_cloud_azure_download_certificate(tenant_id, opts = {})
      data, _status_code, _headers = discover_cloud_azure_download_certificate_with_http_info(tenant_id, opts)
      data
    end

    # Returns JSON object(s) that contain the base64 encoded certificate for a service principal.
    # @param tenant_id [Array<String>] Azure Tenant ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :refresh  (default to 'false')
    # @return [Array<(RegistrationAzureDownloadCertificateResponseV1, Integer, Hash)>] RegistrationAzureDownloadCertificateResponseV1 data, response status code and response headers
    def discover_cloud_azure_download_certificate_with_http_info(tenant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: D4cRegistrationApi.discover_cloud_azure_download_certificate ...'
      end
      # verify the required parameter 'tenant_id' is set
      if @api_client.config.client_side_validation && tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'tenant_id' when calling D4cRegistrationApi.discover_cloud_azure_download_certificate"
      end
      allowable_values = ["false", "true"]
      if @api_client.config.client_side_validation && opts[:'refresh'] && !allowable_values.include?(opts[:'refresh'])
        fail ArgumentError, "invalid value for \"refresh\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'refresh'].nil? && opts[:'refresh'].to_s.length > 5
        fail ArgumentError, 'invalid value for "opts[:"refresh"]" when calling D4cRegistrationApi.discover_cloud_azure_download_certificate, the character length must be smaller than or equal to 5.'
      end

      if @api_client.config.client_side_validation && !opts[:'refresh'].nil? && opts[:'refresh'].to_s.length < 4
        fail ArgumentError, 'invalid value for "opts[:"refresh"]" when calling D4cRegistrationApi.discover_cloud_azure_download_certificate, the character length must be great than or equal to 4.'
      end

      pattern = Regexp.new(/^(true|false)$/)
      if @api_client.config.client_side_validation && !opts[:'refresh'].nil? && opts[:'refresh'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"refresh\"]' when calling D4cRegistrationApi.discover_cloud_azure_download_certificate, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/cloud-connect-azure/entities/download-certificate/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tenant_id'] = @api_client.build_collection_param(tenant_id, :multi)
      query_params[:'refresh'] = opts[:'refresh'] if !opts[:'refresh'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationAzureDownloadCertificateResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"D4cRegistrationApi.discover_cloud_azure_download_certificate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: D4cRegistrationApi#discover_cloud_azure_download_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return information about Azure account registration
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :ids SubscriptionIDs of accounts to select for this status operation. If this is empty then all accounts are returned.
    # @option opts [String] :scan_type Type of scan, dry or full, to perform on selected accounts
    # @return [RegistrationAzureAccountResponseV1]
    def get_cspm_azure_account(opts = {})
      data, _status_code, _headers = get_cspm_azure_account_with_http_info(opts)
      data
    end

    # Return information about Azure account registration
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :ids SubscriptionIDs of accounts to select for this status operation. If this is empty then all accounts are returned.
    # @option opts [String] :scan_type Type of scan, dry or full, to perform on selected accounts
    # @return [Array<(RegistrationAzureAccountResponseV1, Integer, Hash)>] RegistrationAzureAccountResponseV1 data, response status code and response headers
    def get_cspm_azure_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: D4cRegistrationApi.get_cspm_azure_account ...'
      end
      if @api_client.config.client_side_validation && !opts[:'scan_type'].nil? && opts[:'scan_type'].to_s.length > 4
        fail ArgumentError, 'invalid value for "opts[:"scan_type"]" when calling D4cRegistrationApi.get_cspm_azure_account, the character length must be smaller than or equal to 4.'
      end

      if @api_client.config.client_side_validation && !opts[:'scan_type'].nil? && opts[:'scan_type'].to_s.length < 3
        fail ArgumentError, 'invalid value for "opts[:"scan_type"]" when calling D4cRegistrationApi.get_cspm_azure_account, the character length must be great than or equal to 3.'
      end

      pattern = Regexp.new(/^(full|dry)$/)
      if @api_client.config.client_side_validation && !opts[:'scan_type'].nil? && opts[:'scan_type'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"scan_type\"]' when calling D4cRegistrationApi.get_cspm_azure_account, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/cloud-connect-azure/entities/account/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :multi) if !opts[:'ids'].nil?
      query_params[:'scan-type'] = opts[:'scan_type'] if !opts[:'scan_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationAzureAccountResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"D4cRegistrationApi.get_cspm_azure_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: D4cRegistrationApi#get_cspm_azure_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return a script for customer to run in their cloud environment to grant us access to their Azure environment
    # @param [Hash] opts the optional parameters
    # @return [RegistrationAzureProvisionGetUserScriptResponseV1]
    def get_cspm_azure_user_scripts(opts = {})
      data, _status_code, _headers = get_cspm_azure_user_scripts_with_http_info(opts)
      data
    end

    # Return a script for customer to run in their cloud environment to grant us access to their Azure environment
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationAzureProvisionGetUserScriptResponseV1, Integer, Hash)>] RegistrationAzureProvisionGetUserScriptResponseV1 data, response status code and response headers
    def get_cspm_azure_user_scripts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: D4cRegistrationApi.get_cspm_azure_user_scripts ...'
      end
      # resource path
      local_var_path = '/cloud-connect-azure/entities/user-scripts/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationAzureProvisionGetUserScriptResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"D4cRegistrationApi.get_cspm_azure_user_scripts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: D4cRegistrationApi#get_cspm_azure_user_scripts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return a script for customer to run in their cloud environment to grant us access to their Azure environment as a downloadable attachment
    # @param [Hash] opts the optional parameters
    # @return [RegistrationAzureProvisionGetUserScriptResponseV1]
    def get_cspm_azure_user_scripts_attachment(opts = {})
      data, _status_code, _headers = get_cspm_azure_user_scripts_attachment_with_http_info(opts)
      data
    end

    # Return a script for customer to run in their cloud environment to grant us access to their Azure environment as a downloadable attachment
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationAzureProvisionGetUserScriptResponseV1, Integer, Hash)>] RegistrationAzureProvisionGetUserScriptResponseV1 data, response status code and response headers
    def get_cspm_azure_user_scripts_attachment_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: D4cRegistrationApi.get_cspm_azure_user_scripts_attachment ...'
      end
      # resource path
      local_var_path = '/cloud-connect-azure/entities/user-scripts-download/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/octet-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationAzureProvisionGetUserScriptResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"D4cRegistrationApi.get_cspm_azure_user_scripts_attachment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: D4cRegistrationApi#get_cspm_azure_user_scripts_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns information about the current status of an GCP account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scan_type Type of scan, dry or full, to perform on selected accounts
    # @option opts [Array<String>] :ids Parent IDs of accounts
    # @return [RegistrationGCPAccountResponseV1]
    def get_cspmcgp_account(opts = {})
      data, _status_code, _headers = get_cspmcgp_account_with_http_info(opts)
      data
    end

    # Returns information about the current status of an GCP account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scan_type Type of scan, dry or full, to perform on selected accounts
    # @option opts [Array<String>] :ids Parent IDs of accounts
    # @return [Array<(RegistrationGCPAccountResponseV1, Integer, Hash)>] RegistrationGCPAccountResponseV1 data, response status code and response headers
    def get_cspmcgp_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: D4cRegistrationApi.get_cspmcgp_account ...'
      end
      if @api_client.config.client_side_validation && !opts[:'scan_type'].nil? && opts[:'scan_type'].to_s.length > 4
        fail ArgumentError, 'invalid value for "opts[:"scan_type"]" when calling D4cRegistrationApi.get_cspmcgp_account, the character length must be smaller than or equal to 4.'
      end

      if @api_client.config.client_side_validation && !opts[:'scan_type'].nil? && opts[:'scan_type'].to_s.length < 3
        fail ArgumentError, 'invalid value for "opts[:"scan_type"]" when calling D4cRegistrationApi.get_cspmcgp_account, the character length must be great than or equal to 3.'
      end

      pattern = Regexp.new(/^(full|dry)$/)
      if @api_client.config.client_side_validation && !opts[:'scan_type'].nil? && opts[:'scan_type'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"scan_type\"]' when calling D4cRegistrationApi.get_cspmcgp_account, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/cloud-connect-gcp/entities/account/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'scan-type'] = opts[:'scan_type'] if !opts[:'scan_type'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :multi) if !opts[:'ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationGCPAccountResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"D4cRegistrationApi.get_cspmcgp_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: D4cRegistrationApi#get_cspmcgp_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return a script for customer to run in their cloud environment to grant us access to their GCP environment
    # @param [Hash] opts the optional parameters
    # @return [RegistrationGCPProvisionGetUserScriptResponseV1]
    def get_cspmgcp_user_scripts(opts = {})
      data, _status_code, _headers = get_cspmgcp_user_scripts_with_http_info(opts)
      data
    end

    # Return a script for customer to run in their cloud environment to grant us access to their GCP environment
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationGCPProvisionGetUserScriptResponseV1, Integer, Hash)>] RegistrationGCPProvisionGetUserScriptResponseV1 data, response status code and response headers
    def get_cspmgcp_user_scripts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: D4cRegistrationApi.get_cspmgcp_user_scripts ...'
      end
      # resource path
      local_var_path = '/cloud-connect-gcp/entities/user-scripts/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationGCPProvisionGetUserScriptResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"D4cRegistrationApi.get_cspmgcp_user_scripts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: D4cRegistrationApi#get_cspmgcp_user_scripts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return a script for customer to run in their cloud environment to grant us access to their GCP environment as a downloadable attachment
    # @param [Hash] opts the optional parameters
    # @return [RegistrationGCPProvisionGetUserScriptResponseV1]
    def get_cspmgcp_user_scripts_attachment(opts = {})
      data, _status_code, _headers = get_cspmgcp_user_scripts_attachment_with_http_info(opts)
      data
    end

    # Return a script for customer to run in their cloud environment to grant us access to their GCP environment as a downloadable attachment
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationGCPProvisionGetUserScriptResponseV1, Integer, Hash)>] RegistrationGCPProvisionGetUserScriptResponseV1 data, response status code and response headers
    def get_cspmgcp_user_scripts_attachment_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: D4cRegistrationApi.get_cspmgcp_user_scripts_attachment ...'
      end
      # resource path
      local_var_path = '/cloud-connect-gcp/entities/user-scripts-download/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/octet-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationGCPProvisionGetUserScriptResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"D4cRegistrationApi.get_cspmgcp_user_scripts_attachment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: D4cRegistrationApi#get_cspmgcp_user_scripts_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an Azure service account in our system by with the user-created client_id created with the public key we've provided
    # @param id [String] ClientID to use for the Service Principal associated with the customer&#39;s Azure account
    # @param [Hash] opts the optional parameters
    # @return [RegistrationAzureServicePrincipalResponseV1]
    def update_cspm_azure_account_client_id(id, opts = {})
      data, _status_code, _headers = update_cspm_azure_account_client_id_with_http_info(id, opts)
      data
    end

    # Update an Azure service account in our system by with the user-created client_id created with the public key we&#39;ve provided
    # @param id [String] ClientID to use for the Service Principal associated with the customer&#39;s Azure account
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationAzureServicePrincipalResponseV1, Integer, Hash)>] RegistrationAzureServicePrincipalResponseV1 data, response status code and response headers
    def update_cspm_azure_account_client_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: D4cRegistrationApi.update_cspm_azure_account_client_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling D4cRegistrationApi.update_cspm_azure_account_client_id"
      end
      if @api_client.config.client_side_validation && id.to_s.length > 36
        fail ArgumentError, 'invalid value for "id" when calling D4cRegistrationApi.update_cspm_azure_account_client_id, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && id.to_s.length < 36
        fail ArgumentError, 'invalid value for "id" when calling D4cRegistrationApi.update_cspm_azure_account_client_id, the character length must be great than or equal to 36.'
      end

      pattern = Regexp.new(/^[0-9a-z-]{36}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        fail ArgumentError, "invalid value for 'id' when calling D4cRegistrationApi.update_cspm_azure_account_client_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/cloud-connect-azure/entities/client-id/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationAzureServicePrincipalResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"D4cRegistrationApi.update_cspm_azure_account_client_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: D4cRegistrationApi#update_cspm_azure_account_client_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
