=begin
#CrowdStrike API Specification

#Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and more information about API endpoints that don't yet support OAuth2, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation). To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`. Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.

The version of the OpenAPI document: 2022-10-19T15:57:46Z

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'cgi'

module Falcon
  class AlertsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # retrieves all Alerts ids that match a given query
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The first detection to return, where &#x60;0&#x60; is the latest detection. Use with the &#x60;offset&#x60; parameter to manage pagination of results.
    # @option opts [Integer] :limit The maximum number of detections to return in this response (default: 100; max: 10000). Use with the &#x60;offset&#x60; parameter to manage pagination of results.
    # @option opts [String] :sort Sort detections in either &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending) order. For example: &#x60;status|asc&#x60; or &#x60;status|desc&#x60;.
    # @option opts [String] :filter Filter detections using a query in Falcon Query Language (FQL). An asterisk wildcard &#x60;*&#x60; includes all results.   The full list of valid filter options is extensive. Review it in our [documentation inside the Falcon console](https://falcon.crowdstrike.com/documentation/45/falcon-query-language-fql).
    # @option opts [String] :q Search all detection metadata for the provided string
    # @return [MsaQueryResponse]
    def get_queries_alerts_v1(opts = {})
      data, _status_code, _headers = get_queries_alerts_v1_with_http_info(opts)
      data
    end

    # retrieves all Alerts ids that match a given query
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The first detection to return, where &#x60;0&#x60; is the latest detection. Use with the &#x60;offset&#x60; parameter to manage pagination of results.
    # @option opts [Integer] :limit The maximum number of detections to return in this response (default: 100; max: 10000). Use with the &#x60;offset&#x60; parameter to manage pagination of results.
    # @option opts [String] :sort Sort detections in either &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending) order. For example: &#x60;status|asc&#x60; or &#x60;status|desc&#x60;.
    # @option opts [String] :filter Filter detections using a query in Falcon Query Language (FQL). An asterisk wildcard &#x60;*&#x60; includes all results.   The full list of valid filter options is extensive. Review it in our [documentation inside the Falcon console](https://falcon.crowdstrike.com/documentation/45/falcon-query-language-fql).
    # @option opts [String] :q Search all detection metadata for the provided string
    # @return [Array<(MsaQueryResponse, Integer, Hash)>] MsaQueryResponse data, response status code and response headers
    def get_queries_alerts_v1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AlertsApi.get_queries_alerts_v1 ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 10000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AlertsApi.get_queries_alerts_v1, must be smaller than or equal to 10000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AlertsApi.get_queries_alerts_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/alerts/queries/alerts/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"AlertsApi.get_queries_alerts_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AlertsApi#get_queries_alerts_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Perform actions on detections identified by detection ID(s) in request. Each action has a name and a description which describes what the action does.  remove_tag - remove a tag from 1 or more detection(s) assign_to_user_id - assign 1 or more detection(s) to a user identified by user id (eg: user1@example.com) unassign - unassign an previously assigned user from 1 or more detection(s). The value passed to this action is ignored. new_behavior_processed - adds a newly processed behavior to 1 or more detection(s) update_status - update status for 1 or more detection(s) assign_to_uuid - assign 1 or more detection(s) to a user identified by UUID add_tag - add a tag to 1 or more detection(s) remove_tags_by_prefix - remove tags with given prefix from 1 or more detection(s) append_comment - appends new comment to existing comments assign_to_name - assign 1 or more detection(s) to a user identified by user name show_in_ui - shows 1 or more detection(s) on UI if set to true, hides otherwise. an empty/nil value is also valid skip_side_effects - internal only command to skip side effects during Beta phase 
    # @param body [DetectsapiPatchEntitiesInvestigatablesV1Request] request body takes a list of action parameter request that is applied against all \&quot;ids\&quot; provided
    # @param [Hash] opts the optional parameters
    # @return [MsaReplyMetaOnly]
    def patch_entities_alerts_v1(body, opts = {})
      data, _status_code, _headers = patch_entities_alerts_v1_with_http_info(body, opts)
      data
    end

    # Perform actions on detections identified by detection ID(s) in request. Each action has a name and a description which describes what the action does.  remove_tag - remove a tag from 1 or more detection(s) assign_to_user_id - assign 1 or more detection(s) to a user identified by user id (eg: user1@example.com) unassign - unassign an previously assigned user from 1 or more detection(s). The value passed to this action is ignored. new_behavior_processed - adds a newly processed behavior to 1 or more detection(s) update_status - update status for 1 or more detection(s) assign_to_uuid - assign 1 or more detection(s) to a user identified by UUID add_tag - add a tag to 1 or more detection(s) remove_tags_by_prefix - remove tags with given prefix from 1 or more detection(s) append_comment - appends new comment to existing comments assign_to_name - assign 1 or more detection(s) to a user identified by user name show_in_ui - shows 1 or more detection(s) on UI if set to true, hides otherwise. an empty/nil value is also valid skip_side_effects - internal only command to skip side effects during Beta phase 
    # @param body [DetectsapiPatchEntitiesInvestigatablesV1Request] request body takes a list of action parameter request that is applied against all \&quot;ids\&quot; provided
    # @param [Hash] opts the optional parameters
    # @return [Array<(MsaReplyMetaOnly, Integer, Hash)>] MsaReplyMetaOnly data, response status code and response headers
    def patch_entities_alerts_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AlertsApi.patch_entities_alerts_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AlertsApi.patch_entities_alerts_v1"
      end
      # resource path
      local_var_path = '/alerts/entities/alerts/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'MsaReplyMetaOnly'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"AlertsApi.patch_entities_alerts_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AlertsApi#patch_entities_alerts_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Perform actions on detections identified by detection ID(s) in request. Each action has a name and a description which describes what the action does.  
    # @param body [DetectsapiPatchEntitiesInvestigatablesV2Request] request body takes a list of action parameter request that is applied against all \&quot;ids\&quot; provided
    # @param [Hash] opts the optional parameters
    # @return [MsaspecResponseFields]
    def patch_entities_alerts_v2(body, opts = {})
      data, _status_code, _headers = patch_entities_alerts_v2_with_http_info(body, opts)
      data
    end

    # Perform actions on detections identified by detection ID(s) in request. Each action has a name and a description which describes what the action does.  
    # @param body [DetectsapiPatchEntitiesInvestigatablesV2Request] request body takes a list of action parameter request that is applied against all \&quot;ids\&quot; provided
    # @param [Hash] opts the optional parameters
    # @return [Array<(MsaspecResponseFields, Integer, Hash)>] MsaspecResponseFields data, response status code and response headers
    def patch_entities_alerts_v2_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AlertsApi.patch_entities_alerts_v2 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AlertsApi.patch_entities_alerts_v2"
      end
      # resource path
      local_var_path = '/alerts/entities/alerts/v2'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'MsaspecResponseFields'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"AlertsApi.patch_entities_alerts_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AlertsApi#patch_entities_alerts_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # retrieves aggregates for Alerts across all CIDs
    # @param body [Array<MsaAggregateQueryRequest>] request body takes a list of aggregation query requests
    # @param [Hash] opts the optional parameters
    # @return [MsaAggregatesResponse]
    def post_aggregates_alerts_v1(body, opts = {})
      data, _status_code, _headers = post_aggregates_alerts_v1_with_http_info(body, opts)
      data
    end

    # retrieves aggregates for Alerts across all CIDs
    # @param body [Array<MsaAggregateQueryRequest>] request body takes a list of aggregation query requests
    # @param [Hash] opts the optional parameters
    # @return [Array<(MsaAggregatesResponse, Integer, Hash)>] MsaAggregatesResponse data, response status code and response headers
    def post_aggregates_alerts_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AlertsApi.post_aggregates_alerts_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AlertsApi.post_aggregates_alerts_v1"
      end
      # resource path
      local_var_path = '/alerts/aggregates/alerts/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'MsaAggregatesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"AlertsApi.post_aggregates_alerts_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AlertsApi#post_aggregates_alerts_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # retrieves all Alerts given their ids
    # @param body [DetectsapiPostEntitiesInvestigatablesV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [DetectsapiPostEntitiesInvestigatablesV1Response]
    def post_entities_alerts_v1(body, opts = {})
      data, _status_code, _headers = post_entities_alerts_v1_with_http_info(body, opts)
      data
    end

    # retrieves all Alerts given their ids
    # @param body [DetectsapiPostEntitiesInvestigatablesV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DetectsapiPostEntitiesInvestigatablesV1Response, Integer, Hash)>] DetectsapiPostEntitiesInvestigatablesV1Response data, response status code and response headers
    def post_entities_alerts_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AlertsApi.post_entities_alerts_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AlertsApi.post_entities_alerts_v1"
      end
      # resource path
      local_var_path = '/alerts/entities/alerts/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DetectsapiPostEntitiesInvestigatablesV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"AlertsApi.post_entities_alerts_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AlertsApi#post_entities_alerts_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
