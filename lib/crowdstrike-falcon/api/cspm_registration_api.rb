=begin
#CrowdStrike API Specification

#Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and more information about API endpoints that don't yet support OAuth2, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation). To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`. Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.

The version of the OpenAPI document: 2022-10-19T15:57:46Z

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'cgi'

module Falcon
  class CspmRegistrationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returns JSON object(s) that contain the base64 encoded certificate for a service principal.
    # @param tenant_id [Array<String>] Azure Tenant ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :refresh  (default to 'false')
    # @return [RegistrationAzureDownloadCertificateResponseV1]
    def azure_download_certificate(tenant_id, opts = {})
      data, _status_code, _headers = azure_download_certificate_with_http_info(tenant_id, opts)
      data
    end

    # Returns JSON object(s) that contain the base64 encoded certificate for a service principal.
    # @param tenant_id [Array<String>] Azure Tenant ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :refresh  (default to 'false')
    # @return [Array<(RegistrationAzureDownloadCertificateResponseV1, Integer, Hash)>] RegistrationAzureDownloadCertificateResponseV1 data, response status code and response headers
    def azure_download_certificate_with_http_info(tenant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CspmRegistrationApi.azure_download_certificate ...'
      end
      # verify the required parameter 'tenant_id' is set
      if @api_client.config.client_side_validation && tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'tenant_id' when calling CspmRegistrationApi.azure_download_certificate"
      end
      allowable_values = ["false", "true"]
      if @api_client.config.client_side_validation && opts[:'refresh'] && !allowable_values.include?(opts[:'refresh'])
        fail ArgumentError, "invalid value for \"refresh\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'refresh'].nil? && opts[:'refresh'].to_s.length > 5
        fail ArgumentError, 'invalid value for "opts[:"refresh"]" when calling CspmRegistrationApi.azure_download_certificate, the character length must be smaller than or equal to 5.'
      end

      if @api_client.config.client_side_validation && !opts[:'refresh'].nil? && opts[:'refresh'].to_s.length < 4
        fail ArgumentError, 'invalid value for "opts[:"refresh"]" when calling CspmRegistrationApi.azure_download_certificate, the character length must be great than or equal to 4.'
      end

      pattern = Regexp.new(/^(true|false)$/)
      if @api_client.config.client_side_validation && !opts[:'refresh'].nil? && opts[:'refresh'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"refresh\"]' when calling CspmRegistrationApi.azure_download_certificate, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/cloud-connect-cspm-azure/entities/download-certificate/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tenant_id'] = @api_client.build_collection_param(tenant_id, :multi)
      query_params[:'refresh'] = opts[:'refresh'] if !opts[:'refresh'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationAzureDownloadCertificateResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CspmRegistrationApi.azure_download_certificate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CspmRegistrationApi#azure_download_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new account in our system for a customer and generates a script for them to run in their AWS cloud environment to grant us access.
    # @param body [RegistrationAWSAccountCreateRequestExtV2] 
    # @param [Hash] opts the optional parameters
    # @return [RegistrationAWSAccountResponseV2]
    def create_cspm_aws_account(body, opts = {})
      data, _status_code, _headers = create_cspm_aws_account_with_http_info(body, opts)
      data
    end

    # Creates a new account in our system for a customer and generates a script for them to run in their AWS cloud environment to grant us access.
    # @param body [RegistrationAWSAccountCreateRequestExtV2] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationAWSAccountResponseV2, Integer, Hash)>] RegistrationAWSAccountResponseV2 data, response status code and response headers
    def create_cspm_aws_account_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CspmRegistrationApi.create_cspm_aws_account ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CspmRegistrationApi.create_cspm_aws_account"
      end
      # resource path
      local_var_path = '/cloud-connect-cspm-aws/entities/account/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationAWSAccountResponseV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CspmRegistrationApi.create_cspm_aws_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CspmRegistrationApi#create_cspm_aws_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new account in our system for a customer and generates a script for them to run in their cloud environment to grant us access.
    # @param body [RegistrationAzureAccountCreateRequestExternalV1] 
    # @param [Hash] opts the optional parameters
    # @return [RegistrationAzureAccountResponseV1]
    def create_cspm_azure_account(body, opts = {})
      data, _status_code, _headers = create_cspm_azure_account_with_http_info(body, opts)
      data
    end

    # Creates a new account in our system for a customer and generates a script for them to run in their cloud environment to grant us access.
    # @param body [RegistrationAzureAccountCreateRequestExternalV1] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationAzureAccountResponseV1, Integer, Hash)>] RegistrationAzureAccountResponseV1 data, response status code and response headers
    def create_cspm_azure_account_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CspmRegistrationApi.create_cspm_azure_account ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CspmRegistrationApi.create_cspm_azure_account"
      end
      # resource path
      local_var_path = '/cloud-connect-cspm-azure/entities/account/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationAzureAccountResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CspmRegistrationApi.create_cspm_azure_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CspmRegistrationApi#create_cspm_azure_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes an existing AWS account or organization in our system.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :ids AWS account IDs to remove
    # @option opts [Array<String>] :organization_ids AWS organization IDs to remove
    # @return [RegistrationBaseResponseV1]
    def delete_cspm_aws_account(opts = {})
      data, _status_code, _headers = delete_cspm_aws_account_with_http_info(opts)
      data
    end

    # Deletes an existing AWS account or organization in our system.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :ids AWS account IDs to remove
    # @option opts [Array<String>] :organization_ids AWS organization IDs to remove
    # @return [Array<(RegistrationBaseResponseV1, Integer, Hash)>] RegistrationBaseResponseV1 data, response status code and response headers
    def delete_cspm_aws_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CspmRegistrationApi.delete_cspm_aws_account ...'
      end
      # resource path
      local_var_path = '/cloud-connect-cspm-aws/entities/account/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :multi) if !opts[:'ids'].nil?
      query_params[:'organization-ids'] = @api_client.build_collection_param(opts[:'organization_ids'], :multi) if !opts[:'organization_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationBaseResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CspmRegistrationApi.delete_cspm_aws_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CspmRegistrationApi#delete_cspm_aws_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes an Azure subscription from the system.
    # @param ids [Array<String>] Azure subscription IDs to remove
    # @param [Hash] opts the optional parameters
    # @return [RegistrationBaseResponseV1]
    def delete_cspm_azure_account(ids, opts = {})
      data, _status_code, _headers = delete_cspm_azure_account_with_http_info(ids, opts)
      data
    end

    # Deletes an Azure subscription from the system.
    # @param ids [Array<String>] Azure subscription IDs to remove
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationBaseResponseV1, Integer, Hash)>] RegistrationBaseResponseV1 data, response status code and response headers
    def delete_cspm_azure_account_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CspmRegistrationApi.delete_cspm_azure_account ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling CspmRegistrationApi.delete_cspm_azure_account"
      end
      # resource path
      local_var_path = '/cloud-connect-cspm-azure/entities/account/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationBaseResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CspmRegistrationApi.delete_cspm_azure_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CspmRegistrationApi#delete_cspm_azure_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of detected behaviors
    # @param cloud_provider [String] Cloud Provider (e.g.: aws|azure)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :service Cloud Service (e.g. EC2 | EBS | S3)
    # @option opts [String] :account_id Cloud Account ID (e.g.: AWS accountID, Azure subscriptionID)
    # @option opts [String] :aws_account_id AWS Account ID
    # @option opts [String] :azure_subscription_id Azure Subscription ID
    # @option opts [String] :azure_tenant_id Azure Tenant ID
    # @option opts [String] :state State (e.g.: open | closed)
    # @option opts [String] :date_time_since Filter to get all events after this date, in format RFC3339 : e.g. 2006-01-02T15:04:05Z07:00
    # @option opts [String] :severity Severity (e.g.: High | Medium | Informational)
    # @option opts [String] :next_token String to get next page of results, is associated with a previous execution of GetBehaviorDetections. Must include all filters from previous execution.
    # @option opts [Integer] :limit The maximum records to return. [1-500]
    # @return [RegistrationExternalIOAEventResponse]
    def get_behavior_detections(cloud_provider, opts = {})
      data, _status_code, _headers = get_behavior_detections_with_http_info(cloud_provider, opts)
      data
    end

    # Get list of detected behaviors
    # @param cloud_provider [String] Cloud Provider (e.g.: aws|azure)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :service Cloud Service (e.g. EC2 | EBS | S3)
    # @option opts [String] :account_id Cloud Account ID (e.g.: AWS accountID, Azure subscriptionID)
    # @option opts [String] :aws_account_id AWS Account ID
    # @option opts [String] :azure_subscription_id Azure Subscription ID
    # @option opts [String] :azure_tenant_id Azure Tenant ID
    # @option opts [String] :state State (e.g.: open | closed)
    # @option opts [String] :date_time_since Filter to get all events after this date, in format RFC3339 : e.g. 2006-01-02T15:04:05Z07:00
    # @option opts [String] :severity Severity (e.g.: High | Medium | Informational)
    # @option opts [String] :next_token String to get next page of results, is associated with a previous execution of GetBehaviorDetections. Must include all filters from previous execution.
    # @option opts [Integer] :limit The maximum records to return. [1-500]
    # @return [Array<(RegistrationExternalIOAEventResponse, Integer, Hash)>] RegistrationExternalIOAEventResponse data, response status code and response headers
    def get_behavior_detections_with_http_info(cloud_provider, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CspmRegistrationApi.get_behavior_detections ...'
      end
      # verify the required parameter 'cloud_provider' is set
      if @api_client.config.client_side_validation && cloud_provider.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_provider' when calling CspmRegistrationApi.get_behavior_detections"
      end
      # verify enum value
      allowable_values = ["aws", "azure"]
      if @api_client.config.client_side_validation && !allowable_values.include?(cloud_provider)
        fail ArgumentError, "invalid value for \"cloud_provider\", must be one of #{allowable_values}"
      end
      pattern = Regexp.new(/^(aws|azure)$/)
      if @api_client.config.client_side_validation && cloud_provider !~ pattern
        fail ArgumentError, "invalid value for 'cloud_provider' when calling CspmRegistrationApi.get_behavior_detections, must conform to the pattern #{pattern}."
      end

      allowable_values = ["ACM", "ACR", "Any", "App Engine", "AppService", "BigQuery", "Cloud Load Balancing", "Cloud Logging", "Cloud SQL", "Cloud Storage", "CloudFormation", "CloudTrail", "CloudWatch Logs", "Cloudfront", "Compute Engine", "Config", "Disk", "DynamoDB", "EBS", "EC2", "ECR", "EFS", "EKS", "ELB", "EMR", "Elasticache", "GuardDuty", "IAM", "Identity", "KMS", "KeyVault", "Kinesis", "Kubernetes", "Lambda", "LoadBalancer", "Monitor", "NLB/ALB", "NetworkSecurityGroup", "PostgreSQL", "RDS", "Redshift", "S3", "SES", "SNS", "SQLDatabase", "SQLServer", "SQS", "SSM", "Serverless Application Repository", "StorageAccount", "Subscriptions", "VPC", "VirtualMachine", "VirtualNetwork"]
      if @api_client.config.client_side_validation && opts[:'service'] && !allowable_values.include?(opts[:'service'])
        fail ArgumentError, "invalid value for \"service\", must be one of #{allowable_values}"
      end
      allowable_values = ["closed", "open"]
      if @api_client.config.client_side_validation && opts[:'state'] && !allowable_values.include?(opts[:'state'])
        fail ArgumentError, "invalid value for \"state\", must be one of #{allowable_values}"
      end
      allowable_values = ["High", "Informational", "Medium"]
      if @api_client.config.client_side_validation && opts[:'severity'] && !allowable_values.include?(opts[:'severity'])
        fail ArgumentError, "invalid value for \"severity\", must be one of #{allowable_values}"
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"limit\"]' when calling CspmRegistrationApi.get_behavior_detections, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/detects/entities/ioa/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cloud_provider'] = cloud_provider
      query_params[:'service'] = opts[:'service'] if !opts[:'service'].nil?
      query_params[:'account_id'] = opts[:'account_id'] if !opts[:'account_id'].nil?
      query_params[:'aws_account_id'] = opts[:'aws_account_id'] if !opts[:'aws_account_id'].nil?
      query_params[:'azure_subscription_id'] = opts[:'azure_subscription_id'] if !opts[:'azure_subscription_id'].nil?
      query_params[:'azure_tenant_id'] = opts[:'azure_tenant_id'] if !opts[:'azure_tenant_id'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'date_time_since'] = opts[:'date_time_since'] if !opts[:'date_time_since'].nil?
      query_params[:'severity'] = opts[:'severity'] if !opts[:'severity'].nil?
      query_params[:'next_token'] = opts[:'next_token'] if !opts[:'next_token'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationExternalIOAEventResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CspmRegistrationApi.get_behavior_detections",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CspmRegistrationApi#get_behavior_detections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of active misconfigurations
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cloud_provider Cloud Provider (e.g.: aws|azure|gcp)
    # @option opts [String] :account_id AWS account ID or GCP Project Number or Azure subscription ID
    # @option opts [String] :azure_subscription_id Azure Subscription ID
    # @option opts [String] :azure_tenant_id Azure Tenant ID
    # @option opts [String] :status Status (e.g.: new|reoccurring|all)
    # @option opts [String] :region Cloud Provider Region
    # @option opts [String] :severity Severity (e.g.: High | Medium | Informational)
    # @option opts [String] :service Cloud Service (e.g.: EBS|EC2|S3 etc.)
    # @option opts [String] :next_token String to get next page of results, is associated with a previous execution of GetConfigurationDetections. Cannot be combined with any filter except limit.
    # @option opts [Integer] :limit The maximum records to return. [1-500]
    # @return [RegistrationExternalIOMEventResponse]
    def get_configuration_detections(opts = {})
      data, _status_code, _headers = get_configuration_detections_with_http_info(opts)
      data
    end

    # Get list of active misconfigurations
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cloud_provider Cloud Provider (e.g.: aws|azure|gcp)
    # @option opts [String] :account_id AWS account ID or GCP Project Number or Azure subscription ID
    # @option opts [String] :azure_subscription_id Azure Subscription ID
    # @option opts [String] :azure_tenant_id Azure Tenant ID
    # @option opts [String] :status Status (e.g.: new|reoccurring|all)
    # @option opts [String] :region Cloud Provider Region
    # @option opts [String] :severity Severity (e.g.: High | Medium | Informational)
    # @option opts [String] :service Cloud Service (e.g.: EBS|EC2|S3 etc.)
    # @option opts [String] :next_token String to get next page of results, is associated with a previous execution of GetConfigurationDetections. Cannot be combined with any filter except limit.
    # @option opts [Integer] :limit The maximum records to return. [1-500]
    # @return [Array<(RegistrationExternalIOMEventResponse, Integer, Hash)>] RegistrationExternalIOMEventResponse data, response status code and response headers
    def get_configuration_detections_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CspmRegistrationApi.get_configuration_detections ...'
      end
      allowable_values = ["aws", "azure", "gcp"]
      if @api_client.config.client_side_validation && opts[:'cloud_provider'] && !allowable_values.include?(opts[:'cloud_provider'])
        fail ArgumentError, "invalid value for \"cloud_provider\", must be one of #{allowable_values}"
      end
      allowable_values = ["all", "new", "reoccurring"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      pattern = Regexp.new(/^[0-9a-z-]{2,}$/)
      if @api_client.config.client_side_validation && !opts[:'region'].nil? && opts[:'region'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"region\"]' when calling CspmRegistrationApi.get_configuration_detections, must conform to the pattern #{pattern}."
      end

      allowable_values = ["High", "Informational", "Medium"]
      if @api_client.config.client_side_validation && opts[:'severity'] && !allowable_values.include?(opts[:'severity'])
        fail ArgumentError, "invalid value for \"severity\", must be one of #{allowable_values}"
      end
      allowable_values = ["ACM", "ACR", "Any", "App Engine", "AppService", "BigQuery", "Cloud Load Balancing", "Cloud Logging", "Cloud SQL", "Cloud Storage", "CloudFormation", "CloudTrail", "CloudWatch Logs", "Cloudfront", "Compute Engine", "Config", "Disk", "DynamoDB", "EBS", "EC2", "ECR", "EFS", "EKS", "ELB", "EMR", "Elasticache", "GuardDuty", "IAM", "Identity", "KMS", "KeyVault", "Kinesis", "Kubernetes", "Lambda", "LoadBalancer", "Monitor", "NLB/ALB", "NetworkSecurityGroup", "PostgreSQL", "RDS", "Redshift", "S3", "SES", "SNS", "SQLDatabase", "SQLServer", "SQS", "SSM", "Serverless Application Repository", "StorageAccount", "Subscriptions", "VPC", "VirtualMachine", "VirtualNetwork"]
      if @api_client.config.client_side_validation && opts[:'service'] && !allowable_values.include?(opts[:'service'])
        fail ArgumentError, "invalid value for \"service\", must be one of #{allowable_values}"
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"limit\"]' when calling CspmRegistrationApi.get_configuration_detections, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/detects/entities/iom/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cloud_provider'] = opts[:'cloud_provider'] if !opts[:'cloud_provider'].nil?
      query_params[:'account_id'] = opts[:'account_id'] if !opts[:'account_id'].nil?
      query_params[:'azure_subscription_id'] = opts[:'azure_subscription_id'] if !opts[:'azure_subscription_id'].nil?
      query_params[:'azure_tenant_id'] = opts[:'azure_tenant_id'] if !opts[:'azure_tenant_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'region'] = opts[:'region'] if !opts[:'region'].nil?
      query_params[:'severity'] = opts[:'severity'] if !opts[:'severity'].nil?
      query_params[:'service'] = opts[:'service'] if !opts[:'service'].nil?
      query_params[:'next_token'] = opts[:'next_token'] if !opts[:'next_token'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationExternalIOMEventResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CspmRegistrationApi.get_configuration_detections",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CspmRegistrationApi#get_configuration_detections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns information about the current status of an AWS account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scan_type Type of scan, dry or full, to perform on selected accounts
    # @option opts [Array<String>] :ids AWS account IDs
    # @option opts [Array<String>] :organization_ids AWS organization IDs
    # @option opts [String] :status Account status to filter results by.
    # @option opts [Integer] :limit The maximum records to return. Defaults to 100. (default to 100)
    # @option opts [Integer] :offset The offset to start retrieving records from
    # @option opts [String] :group_by Field to group by.
    # @return [RegistrationAWSAccountResponseV2]
    def get_cspm_aws_account(opts = {})
      data, _status_code, _headers = get_cspm_aws_account_with_http_info(opts)
      data
    end

    # Returns information about the current status of an AWS account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scan_type Type of scan, dry or full, to perform on selected accounts
    # @option opts [Array<String>] :ids AWS account IDs
    # @option opts [Array<String>] :organization_ids AWS organization IDs
    # @option opts [String] :status Account status to filter results by.
    # @option opts [Integer] :limit The maximum records to return. Defaults to 100. (default to 100)
    # @option opts [Integer] :offset The offset to start retrieving records from
    # @option opts [String] :group_by Field to group by.
    # @return [Array<(RegistrationAWSAccountResponseV2, Integer, Hash)>] RegistrationAWSAccountResponseV2 data, response status code and response headers
    def get_cspm_aws_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CspmRegistrationApi.get_cspm_aws_account ...'
      end
      if @api_client.config.client_side_validation && !opts[:'scan_type'].nil? && opts[:'scan_type'].to_s.length > 4
        fail ArgumentError, 'invalid value for "opts[:"scan_type"]" when calling CspmRegistrationApi.get_cspm_aws_account, the character length must be smaller than or equal to 4.'
      end

      if @api_client.config.client_side_validation && !opts[:'scan_type'].nil? && opts[:'scan_type'].to_s.length < 3
        fail ArgumentError, 'invalid value for "opts[:"scan_type"]" when calling CspmRegistrationApi.get_cspm_aws_account, the character length must be great than or equal to 3.'
      end

      pattern = Regexp.new(/^(full|dry)$/)
      if @api_client.config.client_side_validation && !opts[:'scan_type'].nil? && opts[:'scan_type'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"scan_type\"]' when calling CspmRegistrationApi.get_cspm_aws_account, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^(provisioned|operational)$/)
      if @api_client.config.client_side_validation && !opts[:'status'].nil? && opts[:'status'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"status\"]' when calling CspmRegistrationApi.get_cspm_aws_account, must conform to the pattern #{pattern}."
      end

      allowable_values = ["organization"]
      if @api_client.config.client_side_validation && opts[:'group_by'] && !allowable_values.include?(opts[:'group_by'])
        fail ArgumentError, "invalid value for \"group_by\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/cloud-connect-cspm-aws/entities/account/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'scan-type'] = opts[:'scan_type'] if !opts[:'scan_type'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :multi) if !opts[:'ids'].nil?
      query_params[:'organization-ids'] = @api_client.build_collection_param(opts[:'organization_ids'], :multi) if !opts[:'organization_ids'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'group_by'] = opts[:'group_by'] if !opts[:'group_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationAWSAccountResponseV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CspmRegistrationApi.get_cspm_aws_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CspmRegistrationApi#get_cspm_aws_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return a script for customer to run in their cloud environment to grant us access to their AWS environment as a downloadable attachment.
    # @param [Hash] opts the optional parameters
    # @return [RegistrationAWSProvisionGetAccountScriptResponseV2]
    def get_cspm_aws_account_scripts_attachment(opts = {})
      data, _status_code, _headers = get_cspm_aws_account_scripts_attachment_with_http_info(opts)
      data
    end

    # Return a script for customer to run in their cloud environment to grant us access to their AWS environment as a downloadable attachment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationAWSProvisionGetAccountScriptResponseV2, Integer, Hash)>] RegistrationAWSProvisionGetAccountScriptResponseV2 data, response status code and response headers
    def get_cspm_aws_account_scripts_attachment_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CspmRegistrationApi.get_cspm_aws_account_scripts_attachment ...'
      end
      # resource path
      local_var_path = '/cloud-connect-cspm-aws/entities/user-scripts-download/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/octet-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationAWSProvisionGetAccountScriptResponseV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CspmRegistrationApi.get_cspm_aws_account_scripts_attachment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CspmRegistrationApi#get_cspm_aws_account_scripts_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return a URL for customer to visit in their cloud environment to grant us access to their AWS environment.
    # @param [Hash] opts the optional parameters
    # @return [RegistrationAWSAccountConsoleURL]
    def get_cspm_aws_console_setup_urls(opts = {})
      data, _status_code, _headers = get_cspm_aws_console_setup_urls_with_http_info(opts)
      data
    end

    # Return a URL for customer to visit in their cloud environment to grant us access to their AWS environment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationAWSAccountConsoleURL, Integer, Hash)>] RegistrationAWSAccountConsoleURL data, response status code and response headers
    def get_cspm_aws_console_setup_urls_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CspmRegistrationApi.get_cspm_aws_console_setup_urls ...'
      end
      # resource path
      local_var_path = '/cloud-connect-cspm-aws/entities/console-setup-urls/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationAWSAccountConsoleURL'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CspmRegistrationApi.get_cspm_aws_console_setup_urls",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CspmRegistrationApi#get_cspm_aws_console_setup_urls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return information about Azure account registration
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :ids SubscriptionIDs of accounts to select for this status operation. If this is empty then all accounts are returned.
    # @option opts [String] :scan_type Type of scan, dry or full, to perform on selected accounts
    # @option opts [String] :status Account status to filter results by.
    # @option opts [Integer] :limit The maximum records to return. Defaults to 100. (default to 100)
    # @option opts [Integer] :offset The offset to start retrieving records from
    # @return [RegistrationAzureAccountResponseV1]
    def get_cspm_azure_account(opts = {})
      data, _status_code, _headers = get_cspm_azure_account_with_http_info(opts)
      data
    end

    # Return information about Azure account registration
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :ids SubscriptionIDs of accounts to select for this status operation. If this is empty then all accounts are returned.
    # @option opts [String] :scan_type Type of scan, dry or full, to perform on selected accounts
    # @option opts [String] :status Account status to filter results by.
    # @option opts [Integer] :limit The maximum records to return. Defaults to 100. (default to 100)
    # @option opts [Integer] :offset The offset to start retrieving records from
    # @return [Array<(RegistrationAzureAccountResponseV1, Integer, Hash)>] RegistrationAzureAccountResponseV1 data, response status code and response headers
    def get_cspm_azure_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CspmRegistrationApi.get_cspm_azure_account ...'
      end
      if @api_client.config.client_side_validation && !opts[:'scan_type'].nil? && opts[:'scan_type'].to_s.length > 4
        fail ArgumentError, 'invalid value for "opts[:"scan_type"]" when calling CspmRegistrationApi.get_cspm_azure_account, the character length must be smaller than or equal to 4.'
      end

      if @api_client.config.client_side_validation && !opts[:'scan_type'].nil? && opts[:'scan_type'].to_s.length < 3
        fail ArgumentError, 'invalid value for "opts[:"scan_type"]" when calling CspmRegistrationApi.get_cspm_azure_account, the character length must be great than or equal to 3.'
      end

      pattern = Regexp.new(/^(full|dry)$/)
      if @api_client.config.client_side_validation && !opts[:'scan_type'].nil? && opts[:'scan_type'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"scan_type\"]' when calling CspmRegistrationApi.get_cspm_azure_account, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^(provisioned|operational)$/)
      if @api_client.config.client_side_validation && !opts[:'status'].nil? && opts[:'status'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"status\"]' when calling CspmRegistrationApi.get_cspm_azure_account, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/cloud-connect-cspm-azure/entities/account/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :multi) if !opts[:'ids'].nil?
      query_params[:'scan-type'] = opts[:'scan_type'] if !opts[:'scan_type'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationAzureAccountResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CspmRegistrationApi.get_cspm_azure_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CspmRegistrationApi#get_cspm_azure_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return a script for customer to run in their cloud environment to grant us access to their Azure environment as a downloadable attachment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_id Tenant ID to generate script for. Defaults to most recently registered tenant.
    # @return [RegistrationAzureProvisionGetUserScriptResponseV1]
    def get_cspm_azure_user_scripts_attachment(opts = {})
      data, _status_code, _headers = get_cspm_azure_user_scripts_attachment_with_http_info(opts)
      data
    end

    # Return a script for customer to run in their cloud environment to grant us access to their Azure environment as a downloadable attachment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_id Tenant ID to generate script for. Defaults to most recently registered tenant.
    # @return [Array<(RegistrationAzureProvisionGetUserScriptResponseV1, Integer, Hash)>] RegistrationAzureProvisionGetUserScriptResponseV1 data, response status code and response headers
    def get_cspm_azure_user_scripts_attachment_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CspmRegistrationApi.get_cspm_azure_user_scripts_attachment ...'
      end
      if @api_client.config.client_side_validation && !opts[:'tenant_id'].nil? && opts[:'tenant_id'].to_s.length > 36
        fail ArgumentError, 'invalid value for "opts[:"tenant_id"]" when calling CspmRegistrationApi.get_cspm_azure_user_scripts_attachment, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && !opts[:'tenant_id'].nil? && opts[:'tenant_id'].to_s.length < 36
        fail ArgumentError, 'invalid value for "opts[:"tenant_id"]" when calling CspmRegistrationApi.get_cspm_azure_user_scripts_attachment, the character length must be great than or equal to 36.'
      end

      pattern = Regexp.new(/^[0-9a-z-]{36}$/)
      if @api_client.config.client_side_validation && !opts[:'tenant_id'].nil? && opts[:'tenant_id'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"tenant_id\"]' when calling CspmRegistrationApi.get_cspm_azure_user_scripts_attachment, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/cloud-connect-cspm-azure/entities/user-scripts-download/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tenant-id'] = opts[:'tenant_id'] if !opts[:'tenant_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/octet-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationAzureProvisionGetUserScriptResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CspmRegistrationApi.get_cspm_azure_user_scripts_attachment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CspmRegistrationApi#get_cspm_azure_user_scripts_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Given a policy ID, returns detailed policy information.
    # @param ids [String] Policy ID
    # @param [Hash] opts the optional parameters
    # @return [RegistrationPolicyResponseV1]
    def get_cspm_policy(ids, opts = {})
      data, _status_code, _headers = get_cspm_policy_with_http_info(ids, opts)
      data
    end

    # Given a policy ID, returns detailed policy information.
    # @param ids [String] Policy ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationPolicyResponseV1, Integer, Hash)>] RegistrationPolicyResponseV1 data, response status code and response headers
    def get_cspm_policy_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CspmRegistrationApi.get_cspm_policy ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling CspmRegistrationApi.get_cspm_policy"
      end
      pattern = Regexp.new(/\d{*}/)
      if @api_client.config.client_side_validation && ids !~ pattern
        fail ArgumentError, "invalid value for 'ids' when calling CspmRegistrationApi.get_cspm_policy, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/settings/entities/policy-details/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = ids

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationPolicyResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CspmRegistrationApi.get_cspm_policy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CspmRegistrationApi#get_cspm_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns information about current policy settings.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :service Service type to filter policy settings by.
    # @option opts [String] :policy_id Policy ID
    # @option opts [String] :cloud_platform Cloud Platform (e.g.: aws|azure|gcp)
    # @return [RegistrationPolicySettingsResponseV1]
    def get_cspm_policy_settings(opts = {})
      data, _status_code, _headers = get_cspm_policy_settings_with_http_info(opts)
      data
    end

    # Returns information about current policy settings.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :service Service type to filter policy settings by.
    # @option opts [String] :policy_id Policy ID
    # @option opts [String] :cloud_platform Cloud Platform (e.g.: aws|azure|gcp)
    # @return [Array<(RegistrationPolicySettingsResponseV1, Integer, Hash)>] RegistrationPolicySettingsResponseV1 data, response status code and response headers
    def get_cspm_policy_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CspmRegistrationApi.get_cspm_policy_settings ...'
      end
      allowable_values = ["ACM", "ACR", "AppService", "CloudFormation", "CloudTrail", "CloudWatch Logs", "Cloudfront", "Config", "Disk", "DynamoDB", "EBS", "EC2", "ECR", "EFS", "EKS", "ELB", "EMR", "Elasticache", "GuardDuty", "IAM", "Identity", "KMS", "KeyVault", "Kinesis", "Kubernetes", "Lambda", "LoadBalancer", "Monitor", "NLB/ALB", "NetworkSecurityGroup", "PostgreSQL", "RDS", "Redshift", "S3", "SES", "SNS", "SQLDatabase", "SQLServer", "SQS", "SSM", "Serverless Application Repository", "StorageAccount", "Subscriptions", "VirtualMachine", "VirtualNetwork"]
      if @api_client.config.client_side_validation && opts[:'service'] && !allowable_values.include?(opts[:'service'])
        fail ArgumentError, "invalid value for \"service\", must be one of #{allowable_values}"
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && !opts[:'policy_id'].nil? && opts[:'policy_id'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"policy_id\"]' when calling CspmRegistrationApi.get_cspm_policy_settings, must conform to the pattern #{pattern}."
      end

      allowable_values = ["aws", "azure", "gcp"]
      if @api_client.config.client_side_validation && opts[:'cloud_platform'] && !allowable_values.include?(opts[:'cloud_platform'])
        fail ArgumentError, "invalid value for \"cloud_platform\", must be one of #{allowable_values}"
      end
      pattern = Regexp.new(/^(aws|azure|gcp)$/)
      if @api_client.config.client_side_validation && !opts[:'cloud_platform'].nil? && opts[:'cloud_platform'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"cloud_platform\"]' when calling CspmRegistrationApi.get_cspm_policy_settings, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/settings/entities/policy/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'service'] = opts[:'service'] if !opts[:'service'].nil?
      query_params[:'policy-id'] = opts[:'policy_id'] if !opts[:'policy_id'].nil?
      query_params[:'cloud-platform'] = opts[:'cloud_platform'] if !opts[:'cloud_platform'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationPolicySettingsResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CspmRegistrationApi.get_cspm_policy_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CspmRegistrationApi#get_cspm_policy_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns scan schedule configuration for one or more cloud platforms.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :cloud_platform Cloud Platform
    # @return [RegistrationScanScheduleResponseV1]
    def get_cspm_scan_schedule(opts = {})
      data, _status_code, _headers = get_cspm_scan_schedule_with_http_info(opts)
      data
    end

    # Returns scan schedule configuration for one or more cloud platforms.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :cloud_platform Cloud Platform
    # @return [Array<(RegistrationScanScheduleResponseV1, Integer, Hash)>] RegistrationScanScheduleResponseV1 data, response status code and response headers
    def get_cspm_scan_schedule_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CspmRegistrationApi.get_cspm_scan_schedule ...'
      end
      # resource path
      local_var_path = '/settings/scan-schedule/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cloud-platform'] = @api_client.build_collection_param(opts[:'cloud_platform'], :multi) if !opts[:'cloud_platform'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationScanScheduleResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CspmRegistrationApi.get_cspm_scan_schedule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CspmRegistrationApi#get_cspm_scan_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # For CSPM IOA events, gets list of IOA events.
    # @param policy_id [String] Policy ID
    # @param cloud_provider [String] Cloud Provider (e.g.: aws|azure|gcp)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :account_id Cloud account ID (e.g.: AWS accountID, Azure subscriptionID)
    # @option opts [String] :aws_account_id AWS accountID
    # @option opts [String] :azure_subscription_id Azure subscription ID
    # @option opts [String] :azure_tenant_id Azure tenant ID
    # @option opts [Array<String>] :user_ids user IDs
    # @option opts [String] :state state
    # @option opts [Integer] :offset Starting index of overall result set from which to return events.
    # @option opts [Integer] :limit The maximum records to return. [1-500]
    # @return [RegistrationExternalIOAEventResponse]
    def get_ioa_events(policy_id, cloud_provider, opts = {})
      data, _status_code, _headers = get_ioa_events_with_http_info(policy_id, cloud_provider, opts)
      data
    end

    # For CSPM IOA events, gets list of IOA events.
    # @param policy_id [String] Policy ID
    # @param cloud_provider [String] Cloud Provider (e.g.: aws|azure|gcp)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :account_id Cloud account ID (e.g.: AWS accountID, Azure subscriptionID)
    # @option opts [String] :aws_account_id AWS accountID
    # @option opts [String] :azure_subscription_id Azure subscription ID
    # @option opts [String] :azure_tenant_id Azure tenant ID
    # @option opts [Array<String>] :user_ids user IDs
    # @option opts [String] :state state
    # @option opts [Integer] :offset Starting index of overall result set from which to return events.
    # @option opts [Integer] :limit The maximum records to return. [1-500]
    # @return [Array<(RegistrationExternalIOAEventResponse, Integer, Hash)>] RegistrationExternalIOAEventResponse data, response status code and response headers
    def get_ioa_events_with_http_info(policy_id, cloud_provider, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CspmRegistrationApi.get_ioa_events ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling CspmRegistrationApi.get_ioa_events"
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && policy_id !~ pattern
        fail ArgumentError, "invalid value for 'policy_id' when calling CspmRegistrationApi.get_ioa_events, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'cloud_provider' is set
      if @api_client.config.client_side_validation && cloud_provider.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_provider' when calling CspmRegistrationApi.get_ioa_events"
      end
      pattern = Regexp.new(/^(aws|azure|gcp)$/)
      if @api_client.config.client_side_validation && cloud_provider !~ pattern
        fail ArgumentError, "invalid value for 'cloud_provider' when calling CspmRegistrationApi.get_ioa_events, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/ioa/entities/events/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'policy_id'] = policy_id
      query_params[:'cloud_provider'] = cloud_provider
      query_params[:'account_id'] = opts[:'account_id'] if !opts[:'account_id'].nil?
      query_params[:'aws_account_id'] = opts[:'aws_account_id'] if !opts[:'aws_account_id'].nil?
      query_params[:'azure_subscription_id'] = opts[:'azure_subscription_id'] if !opts[:'azure_subscription_id'].nil?
      query_params[:'azure_tenant_id'] = opts[:'azure_tenant_id'] if !opts[:'azure_tenant_id'].nil?
      query_params[:'user_ids'] = @api_client.build_collection_param(opts[:'user_ids'], :multi) if !opts[:'user_ids'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationExternalIOAEventResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CspmRegistrationApi.get_ioa_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CspmRegistrationApi#get_ioa_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # For CSPM IOA users, gets list of IOA users.
    # @param policy_id [String] Policy ID
    # @param cloud_provider [String] Cloud Provider (e.g.: aws|azure|gcp)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state state
    # @option opts [String] :account_id Cloud account ID (e.g.: AWS accountID, Azure subscriptionID)
    # @option opts [String] :aws_account_id AWS accountID
    # @option opts [String] :azure_subscription_id Azure subscription ID
    # @option opts [String] :azure_tenant_id Azure tenant ID
    # @return [RegistrationIOAUserResponse]
    def get_ioa_users(policy_id, cloud_provider, opts = {})
      data, _status_code, _headers = get_ioa_users_with_http_info(policy_id, cloud_provider, opts)
      data
    end

    # For CSPM IOA users, gets list of IOA users.
    # @param policy_id [String] Policy ID
    # @param cloud_provider [String] Cloud Provider (e.g.: aws|azure|gcp)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state state
    # @option opts [String] :account_id Cloud account ID (e.g.: AWS accountID, Azure subscriptionID)
    # @option opts [String] :aws_account_id AWS accountID
    # @option opts [String] :azure_subscription_id Azure subscription ID
    # @option opts [String] :azure_tenant_id Azure tenant ID
    # @return [Array<(RegistrationIOAUserResponse, Integer, Hash)>] RegistrationIOAUserResponse data, response status code and response headers
    def get_ioa_users_with_http_info(policy_id, cloud_provider, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CspmRegistrationApi.get_ioa_users ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling CspmRegistrationApi.get_ioa_users"
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && policy_id !~ pattern
        fail ArgumentError, "invalid value for 'policy_id' when calling CspmRegistrationApi.get_ioa_users, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'cloud_provider' is set
      if @api_client.config.client_side_validation && cloud_provider.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_provider' when calling CspmRegistrationApi.get_ioa_users"
      end
      pattern = Regexp.new(/^(aws|azure|gcp)$/)
      if @api_client.config.client_side_validation && cloud_provider !~ pattern
        fail ArgumentError, "invalid value for 'cloud_provider' when calling CspmRegistrationApi.get_ioa_users, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/ioa/entities/users/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'policy_id'] = policy_id
      query_params[:'cloud_provider'] = cloud_provider
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'account_id'] = opts[:'account_id'] if !opts[:'account_id'].nil?
      query_params[:'aws_account_id'] = opts[:'aws_account_id'] if !opts[:'aws_account_id'].nil?
      query_params[:'azure_subscription_id'] = opts[:'azure_subscription_id'] if !opts[:'azure_subscription_id'].nil?
      query_params[:'azure_tenant_id'] = opts[:'azure_tenant_id'] if !opts[:'azure_tenant_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationIOAUserResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CspmRegistrationApi.get_ioa_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CspmRegistrationApi#get_ioa_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patches a existing account in our system for a customer.
    # @param body [RegistrationAWSAccountPatchRequest] 
    # @param [Hash] opts the optional parameters
    # @return [RegistrationAWSAccountResponseV2]
    def patch_cspm_aws_account(body, opts = {})
      data, _status_code, _headers = patch_cspm_aws_account_with_http_info(body, opts)
      data
    end

    # Patches a existing account in our system for a customer.
    # @param body [RegistrationAWSAccountPatchRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationAWSAccountResponseV2, Integer, Hash)>] RegistrationAWSAccountResponseV2 data, response status code and response headers
    def patch_cspm_aws_account_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CspmRegistrationApi.patch_cspm_aws_account ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CspmRegistrationApi.patch_cspm_aws_account"
      end
      # resource path
      local_var_path = '/cloud-connect-cspm-aws/entities/account/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationAWSAccountResponseV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CspmRegistrationApi.patch_cspm_aws_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CspmRegistrationApi#patch_cspm_aws_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an Azure service account in our system by with the user-created client_id created with the public key we've provided
    # @param id [String] ClientID to use for the Service Principal associated with the customer&#39;s Azure account
    # @param body [Object] This is a placeholder only. Please ignore this field.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_id Tenant ID to update client ID for. Required if multiple tenants are registered.
    # @return [RegistrationAzureServicePrincipalResponseV1]
    def update_cspm_azure_account_client_id(id, body, opts = {})
      data, _status_code, _headers = update_cspm_azure_account_client_id_with_http_info(id, body, opts)
      data
    end

    # Update an Azure service account in our system by with the user-created client_id created with the public key we&#39;ve provided
    # @param id [String] ClientID to use for the Service Principal associated with the customer&#39;s Azure account
    # @param body [Object] This is a placeholder only. Please ignore this field.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_id Tenant ID to update client ID for. Required if multiple tenants are registered.
    # @return [Array<(RegistrationAzureServicePrincipalResponseV1, Integer, Hash)>] RegistrationAzureServicePrincipalResponseV1 data, response status code and response headers
    def update_cspm_azure_account_client_id_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CspmRegistrationApi.update_cspm_azure_account_client_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CspmRegistrationApi.update_cspm_azure_account_client_id"
      end
      if @api_client.config.client_side_validation && id.to_s.length > 36
        fail ArgumentError, 'invalid value for "id" when calling CspmRegistrationApi.update_cspm_azure_account_client_id, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && id.to_s.length < 36
        fail ArgumentError, 'invalid value for "id" when calling CspmRegistrationApi.update_cspm_azure_account_client_id, the character length must be great than or equal to 36.'
      end

      pattern = Regexp.new(/^[0-9a-z-]{36}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        fail ArgumentError, "invalid value for 'id' when calling CspmRegistrationApi.update_cspm_azure_account_client_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CspmRegistrationApi.update_cspm_azure_account_client_id"
      end
      if @api_client.config.client_side_validation && !opts[:'tenant_id'].nil? && opts[:'tenant_id'].to_s.length > 36
        fail ArgumentError, 'invalid value for "opts[:"tenant_id"]" when calling CspmRegistrationApi.update_cspm_azure_account_client_id, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && !opts[:'tenant_id'].nil? && opts[:'tenant_id'].to_s.length < 36
        fail ArgumentError, 'invalid value for "opts[:"tenant_id"]" when calling CspmRegistrationApi.update_cspm_azure_account_client_id, the character length must be great than or equal to 36.'
      end

      pattern = Regexp.new(/^[0-9a-z-]{36}$/)
      if @api_client.config.client_side_validation && !opts[:'tenant_id'].nil? && opts[:'tenant_id'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"tenant_id\"]' when calling CspmRegistrationApi.update_cspm_azure_account_client_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/cloud-connect-cspm-azure/entities/client-id/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'tenant-id'] = opts[:'tenant_id'] if !opts[:'tenant_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationAzureServicePrincipalResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CspmRegistrationApi.update_cspm_azure_account_client_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CspmRegistrationApi#update_cspm_azure_account_client_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an Azure default subscription_id in our system for given tenant_id
    # @param subscription_id [String] Default Subscription ID to patch for all subscriptions belonged to a tenant.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_id Tenant ID to update client ID for. Required if multiple tenants are registered.
    # @return [RegistrationAzureTenantDefaultSubscriptionIDResponseV1]
    def update_cspm_azure_tenant_default_subscription_id(subscription_id, opts = {})
      data, _status_code, _headers = update_cspm_azure_tenant_default_subscription_id_with_http_info(subscription_id, opts)
      data
    end

    # Update an Azure default subscription_id in our system for given tenant_id
    # @param subscription_id [String] Default Subscription ID to patch for all subscriptions belonged to a tenant.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tenant_id Tenant ID to update client ID for. Required if multiple tenants are registered.
    # @return [Array<(RegistrationAzureTenantDefaultSubscriptionIDResponseV1, Integer, Hash)>] RegistrationAzureTenantDefaultSubscriptionIDResponseV1 data, response status code and response headers
    def update_cspm_azure_tenant_default_subscription_id_with_http_info(subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CspmRegistrationApi.update_cspm_azure_tenant_default_subscription_id ...'
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling CspmRegistrationApi.update_cspm_azure_tenant_default_subscription_id"
      end
      if @api_client.config.client_side_validation && subscription_id.to_s.length > 36
        fail ArgumentError, 'invalid value for "subscription_id" when calling CspmRegistrationApi.update_cspm_azure_tenant_default_subscription_id, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && subscription_id.to_s.length < 36
        fail ArgumentError, 'invalid value for "subscription_id" when calling CspmRegistrationApi.update_cspm_azure_tenant_default_subscription_id, the character length must be great than or equal to 36.'
      end

      pattern = Regexp.new(/^[0-9a-z-]{36}$/)
      if @api_client.config.client_side_validation && subscription_id !~ pattern
        fail ArgumentError, "invalid value for 'subscription_id' when calling CspmRegistrationApi.update_cspm_azure_tenant_default_subscription_id, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'tenant_id'].nil? && opts[:'tenant_id'].to_s.length > 36
        fail ArgumentError, 'invalid value for "opts[:"tenant_id"]" when calling CspmRegistrationApi.update_cspm_azure_tenant_default_subscription_id, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && !opts[:'tenant_id'].nil? && opts[:'tenant_id'].to_s.length < 36
        fail ArgumentError, 'invalid value for "opts[:"tenant_id"]" when calling CspmRegistrationApi.update_cspm_azure_tenant_default_subscription_id, the character length must be great than or equal to 36.'
      end

      pattern = Regexp.new(/^[0-9a-z-]{36}$/)
      if @api_client.config.client_side_validation && !opts[:'tenant_id'].nil? && opts[:'tenant_id'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"tenant_id\"]' when calling CspmRegistrationApi.update_cspm_azure_tenant_default_subscription_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/cloud-connect-cspm-azure/entities/default-subscription-id/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'subscription_id'] = subscription_id
      query_params[:'tenant-id'] = opts[:'tenant_id'] if !opts[:'tenant_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationAzureTenantDefaultSubscriptionIDResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CspmRegistrationApi.update_cspm_azure_tenant_default_subscription_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CspmRegistrationApi#update_cspm_azure_tenant_default_subscription_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a policy setting - can be used to override policy severity or to disable a policy entirely.
    # @param body [RegistrationPolicyRequestExtV1] 
    # @param [Hash] opts the optional parameters
    # @return [RegistrationPolicySettingsResponseV1]
    def update_cspm_policy_settings(body, opts = {})
      data, _status_code, _headers = update_cspm_policy_settings_with_http_info(body, opts)
      data
    end

    # Updates a policy setting - can be used to override policy severity or to disable a policy entirely.
    # @param body [RegistrationPolicyRequestExtV1] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationPolicySettingsResponseV1, Integer, Hash)>] RegistrationPolicySettingsResponseV1 data, response status code and response headers
    def update_cspm_policy_settings_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CspmRegistrationApi.update_cspm_policy_settings ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CspmRegistrationApi.update_cspm_policy_settings"
      end
      # resource path
      local_var_path = '/settings/entities/policy/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationPolicySettingsResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CspmRegistrationApi.update_cspm_policy_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CspmRegistrationApi#update_cspm_policy_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates scan schedule configuration for one or more cloud platforms.
    # @param body [RegistrationScanScheduleUpdateRequestV1] 
    # @param [Hash] opts the optional parameters
    # @return [RegistrationScanScheduleResponseV1]
    def update_cspm_scan_schedule(body, opts = {})
      data, _status_code, _headers = update_cspm_scan_schedule_with_http_info(body, opts)
      data
    end

    # Updates scan schedule configuration for one or more cloud platforms.
    # @param body [RegistrationScanScheduleUpdateRequestV1] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationScanScheduleResponseV1, Integer, Hash)>] RegistrationScanScheduleResponseV1 data, response status code and response headers
    def update_cspm_scan_schedule_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CspmRegistrationApi.update_cspm_scan_schedule ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CspmRegistrationApi.update_cspm_scan_schedule"
      end
      # resource path
      local_var_path = '/settings/scan-schedule/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationScanScheduleResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CspmRegistrationApi.update_cspm_scan_schedule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CspmRegistrationApi#update_cspm_scan_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
