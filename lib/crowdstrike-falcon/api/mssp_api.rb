=begin
#CrowdStrike API Specification

#Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and more information about API endpoints that don't yet support OAuth2, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation). To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`. Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.

The version of the OpenAPI document: 2022-10-19T15:57:46Z

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'cgi'

module Falcon
  class MsspApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add new CID Group member.
    # @param body [DomainCIDGroupMembersRequestV1] 
    # @param [Hash] opts the optional parameters
    # @return [DomainCIDGroupMembersResponseV1]
    def add_cid_group_members(body, opts = {})
      data, _status_code, _headers = add_cid_group_members_with_http_info(body, opts)
      data
    end

    # Add new CID Group member.
    # @param body [DomainCIDGroupMembersRequestV1] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainCIDGroupMembersResponseV1, Integer, Hash)>] DomainCIDGroupMembersResponseV1 data, response status code and response headers
    def add_cid_group_members_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MsspApi.add_cid_group_members ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MsspApi.add_cid_group_members"
      end
      # resource path
      local_var_path = '/mssp/entities/cid-group-members/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainCIDGroupMembersResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"MsspApi.add_cid_group_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MsspApi#add_cid_group_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Assign new MSSP Role(s) between User Group and CID Group. It does not revoke existing role(s) between User Group and CID Group. User Group ID and CID Group ID have to be specified in request. 
    # @param body [DomainMSSPRoleRequestV1] 
    # @param [Hash] opts the optional parameters
    # @return [DomainMSSPRoleResponseV1]
    def add_role(body, opts = {})
      data, _status_code, _headers = add_role_with_http_info(body, opts)
      data
    end

    # Assign new MSSP Role(s) between User Group and CID Group. It does not revoke existing role(s) between User Group and CID Group. User Group ID and CID Group ID have to be specified in request. 
    # @param body [DomainMSSPRoleRequestV1] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainMSSPRoleResponseV1, Integer, Hash)>] DomainMSSPRoleResponseV1 data, response status code and response headers
    def add_role_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MsspApi.add_role ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MsspApi.add_role"
      end
      # resource path
      local_var_path = '/mssp/entities/mssp-roles/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainMSSPRoleResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"MsspApi.add_role",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MsspApi#add_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add new User Group member. Maximum 500 members allowed per User Group.
    # @param body [DomainUserGroupMembersRequestV1] 
    # @param [Hash] opts the optional parameters
    # @return [DomainUserGroupMembersResponseV1]
    def add_user_group_members(body, opts = {})
      data, _status_code, _headers = add_user_group_members_with_http_info(body, opts)
      data
    end

    # Add new User Group member. Maximum 500 members allowed per User Group.
    # @param body [DomainUserGroupMembersRequestV1] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainUserGroupMembersResponseV1, Integer, Hash)>] DomainUserGroupMembersResponseV1 data, response status code and response headers
    def add_user_group_members_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MsspApi.add_user_group_members ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MsspApi.add_user_group_members"
      end
      # resource path
      local_var_path = '/mssp/entities/user-group-members/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainUserGroupMembersResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"MsspApi.add_user_group_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MsspApi#add_user_group_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create new CID Group(s). Maximum 500 CID Group(s) allowed.
    # @param body [DomainCIDGroupsRequestV1] 
    # @param [Hash] opts the optional parameters
    # @return [DomainCIDGroupsResponseV1]
    def create_cid_groups(body, opts = {})
      data, _status_code, _headers = create_cid_groups_with_http_info(body, opts)
      data
    end

    # Create new CID Group(s). Maximum 500 CID Group(s) allowed.
    # @param body [DomainCIDGroupsRequestV1] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainCIDGroupsResponseV1, Integer, Hash)>] DomainCIDGroupsResponseV1 data, response status code and response headers
    def create_cid_groups_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MsspApi.create_cid_groups ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MsspApi.create_cid_groups"
      end
      # resource path
      local_var_path = '/mssp/entities/cid-groups/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainCIDGroupsResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"MsspApi.create_cid_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MsspApi#create_cid_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create new User Group(s). Maximum 500 User Group(s) allowed per customer.
    # @param body [DomainUserGroupsRequestV1] 
    # @param [Hash] opts the optional parameters
    # @return [DomainUserGroupsResponseV1]
    def create_user_groups(body, opts = {})
      data, _status_code, _headers = create_user_groups_with_http_info(body, opts)
      data
    end

    # Create new User Group(s). Maximum 500 User Group(s) allowed per customer.
    # @param body [DomainUserGroupsRequestV1] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainUserGroupsResponseV1, Integer, Hash)>] DomainUserGroupsResponseV1 data, response status code and response headers
    def create_user_groups_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MsspApi.create_user_groups ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MsspApi.create_user_groups"
      end
      # resource path
      local_var_path = '/mssp/entities/user-groups/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainUserGroupsResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"MsspApi.create_user_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MsspApi#create_user_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete CID Group members entry.
    # @param body [DomainCIDGroupMembersRequestV1] 
    # @param [Hash] opts the optional parameters
    # @return [DomainCIDGroupMembersResponseV1]
    def delete_cid_group_members(body, opts = {})
      data, _status_code, _headers = delete_cid_group_members_with_http_info(body, opts)
      data
    end

    # Delete CID Group members entry.
    # @param body [DomainCIDGroupMembersRequestV1] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainCIDGroupMembersResponseV1, Integer, Hash)>] DomainCIDGroupMembersResponseV1 data, response status code and response headers
    def delete_cid_group_members_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MsspApi.delete_cid_group_members ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MsspApi.delete_cid_group_members"
      end
      # resource path
      local_var_path = '/mssp/entities/cid-group-members/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainCIDGroupMembersResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"MsspApi.delete_cid_group_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MsspApi#delete_cid_group_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete CID groups by ID.
    # @param cid_group_ids [Array<String>] CID group ids to delete
    # @param [Hash] opts the optional parameters
    # @return [MsaEntitiesResponse]
    def delete_cid_groups(cid_group_ids, opts = {})
      data, _status_code, _headers = delete_cid_groups_with_http_info(cid_group_ids, opts)
      data
    end

    # Delete CID groups by ID.
    # @param cid_group_ids [Array<String>] CID group ids to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(MsaEntitiesResponse, Integer, Hash)>] MsaEntitiesResponse data, response status code and response headers
    def delete_cid_groups_with_http_info(cid_group_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MsspApi.delete_cid_groups ...'
      end
      # verify the required parameter 'cid_group_ids' is set
      if @api_client.config.client_side_validation && cid_group_ids.nil?
        fail ArgumentError, "Missing the required parameter 'cid_group_ids' when calling MsspApi.delete_cid_groups"
      end
      # resource path
      local_var_path = '/mssp/entities/cid-groups/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cid_group_ids'] = @api_client.build_collection_param(cid_group_ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaEntitiesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"MsspApi.delete_cid_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MsspApi#delete_cid_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete User Group members entry.
    # @param body [DomainUserGroupMembersRequestV1] 
    # @param [Hash] opts the optional parameters
    # @return [DomainUserGroupMembersResponseV1]
    def delete_user_group_members(body, opts = {})
      data, _status_code, _headers = delete_user_group_members_with_http_info(body, opts)
      data
    end

    # Delete User Group members entry.
    # @param body [DomainUserGroupMembersRequestV1] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainUserGroupMembersResponseV1, Integer, Hash)>] DomainUserGroupMembersResponseV1 data, response status code and response headers
    def delete_user_group_members_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MsspApi.delete_user_group_members ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MsspApi.delete_user_group_members"
      end
      # resource path
      local_var_path = '/mssp/entities/user-group-members/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainUserGroupMembersResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"MsspApi.delete_user_group_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MsspApi#delete_user_group_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete user groups by ID.
    # @param user_group_ids [Array<String>] User group IDs to delete
    # @param [Hash] opts the optional parameters
    # @return [MsaEntitiesResponse]
    def delete_user_groups(user_group_ids, opts = {})
      data, _status_code, _headers = delete_user_groups_with_http_info(user_group_ids, opts)
      data
    end

    # Delete user groups by ID.
    # @param user_group_ids [Array<String>] User group IDs to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(MsaEntitiesResponse, Integer, Hash)>] MsaEntitiesResponse data, response status code and response headers
    def delete_user_groups_with_http_info(user_group_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MsspApi.delete_user_groups ...'
      end
      # verify the required parameter 'user_group_ids' is set
      if @api_client.config.client_side_validation && user_group_ids.nil?
        fail ArgumentError, "Missing the required parameter 'user_group_ids' when calling MsspApi.delete_user_groups"
      end
      # resource path
      local_var_path = '/mssp/entities/user-groups/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'user_group_ids'] = @api_client.build_collection_param(user_group_ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaEntitiesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"MsspApi.delete_user_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MsspApi#delete_user_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete MSSP Role assignment(s) between User Group and CID Group. User Group ID and CID Group ID have to be specified in request. Only specified roles are removed if specified in request payload, else association between User Group and CID Group is dissolved completely (if no roles specified).
    # @param body [DomainMSSPRoleRequestV1] 
    # @param [Hash] opts the optional parameters
    # @return [DomainMSSPRoleResponseV1]
    def deleted_roles(body, opts = {})
      data, _status_code, _headers = deleted_roles_with_http_info(body, opts)
      data
    end

    # Delete MSSP Role assignment(s) between User Group and CID Group. User Group ID and CID Group ID have to be specified in request. Only specified roles are removed if specified in request payload, else association between User Group and CID Group is dissolved completely (if no roles specified).
    # @param body [DomainMSSPRoleRequestV1] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainMSSPRoleResponseV1, Integer, Hash)>] DomainMSSPRoleResponseV1 data, response status code and response headers
    def deleted_roles_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MsspApi.deleted_roles ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MsspApi.deleted_roles"
      end
      # resource path
      local_var_path = '/mssp/entities/mssp-roles/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainMSSPRoleResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"MsspApi.deleted_roles",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MsspApi#deleted_roles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get link to child customer by child CID(s)
    # @param ids [Array<String>] CID of a child customer
    # @param [Hash] opts the optional parameters
    # @return [DomainChildrenResponseV1]
    def get_children(ids, opts = {})
      data, _status_code, _headers = get_children_with_http_info(ids, opts)
      data
    end

    # Get link to child customer by child CID(s)
    # @param ids [Array<String>] CID of a child customer
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainChildrenResponseV1, Integer, Hash)>] DomainChildrenResponseV1 data, response status code and response headers
    def get_children_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MsspApi.get_children ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling MsspApi.get_children"
      end
      # resource path
      local_var_path = '/mssp/entities/children/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainChildrenResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"MsspApi.get_children",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MsspApi#get_children\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CID groups by ID.
    # @param cid_group_ids [Array<String>] CID group IDs to be searched on
    # @param [Hash] opts the optional parameters
    # @return [DomainCIDGroupsResponseV1]
    def get_cid_group_by_id(cid_group_ids, opts = {})
      data, _status_code, _headers = get_cid_group_by_id_with_http_info(cid_group_ids, opts)
      data
    end

    # Get CID groups by ID.
    # @param cid_group_ids [Array<String>] CID group IDs to be searched on
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainCIDGroupsResponseV1, Integer, Hash)>] DomainCIDGroupsResponseV1 data, response status code and response headers
    def get_cid_group_by_id_with_http_info(cid_group_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MsspApi.get_cid_group_by_id ...'
      end
      # verify the required parameter 'cid_group_ids' is set
      if @api_client.config.client_side_validation && cid_group_ids.nil?
        fail ArgumentError, "Missing the required parameter 'cid_group_ids' when calling MsspApi.get_cid_group_by_id"
      end
      # resource path
      local_var_path = '/mssp/entities/cid-groups/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cid_group_ids'] = @api_client.build_collection_param(cid_group_ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainCIDGroupsResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"MsspApi.get_cid_group_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MsspApi#get_cid_group_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CID group members by CID group ID.
    # @param cid_group_ids [Array<String>] CID group IDs to search for
    # @param [Hash] opts the optional parameters
    # @return [DomainCIDGroupMembersResponseV1]
    def get_cid_group_members_by(cid_group_ids, opts = {})
      data, _status_code, _headers = get_cid_group_members_by_with_http_info(cid_group_ids, opts)
      data
    end

    # Get CID group members by CID group ID.
    # @param cid_group_ids [Array<String>] CID group IDs to search for
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainCIDGroupMembersResponseV1, Integer, Hash)>] DomainCIDGroupMembersResponseV1 data, response status code and response headers
    def get_cid_group_members_by_with_http_info(cid_group_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MsspApi.get_cid_group_members_by ...'
      end
      # verify the required parameter 'cid_group_ids' is set
      if @api_client.config.client_side_validation && cid_group_ids.nil?
        fail ArgumentError, "Missing the required parameter 'cid_group_ids' when calling MsspApi.get_cid_group_members_by"
      end
      # resource path
      local_var_path = '/mssp/entities/cid-group-members/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cid_group_ids'] = @api_client.build_collection_param(cid_group_ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainCIDGroupMembersResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"MsspApi.get_cid_group_members_by",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MsspApi#get_cid_group_members_by\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get MSSP Role assignment(s). MSSP Role assignment is of the format :.
    # @param ids [Array<String>] MSSP Role assignment is of the format &lt;user_group_id&gt;:&lt;cid_group_id&gt;
    # @param [Hash] opts the optional parameters
    # @return [DomainMSSPRoleResponseV1]
    def get_roles_by_id(ids, opts = {})
      data, _status_code, _headers = get_roles_by_id_with_http_info(ids, opts)
      data
    end

    # Get MSSP Role assignment(s). MSSP Role assignment is of the format :.
    # @param ids [Array<String>] MSSP Role assignment is of the format &lt;user_group_id&gt;:&lt;cid_group_id&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainMSSPRoleResponseV1, Integer, Hash)>] DomainMSSPRoleResponseV1 data, response status code and response headers
    def get_roles_by_id_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MsspApi.get_roles_by_id ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling MsspApi.get_roles_by_id"
      end
      # resource path
      local_var_path = '/mssp/entities/mssp-roles/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :csv)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainMSSPRoleResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"MsspApi.get_roles_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MsspApi#get_roles_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get user group members by user group ID.
    # @param user_group_ids [Array<String>] User group IDs to search for
    # @param [Hash] opts the optional parameters
    # @return [DomainUserGroupMembersResponseV1]
    def get_user_group_members_by_id(user_group_ids, opts = {})
      data, _status_code, _headers = get_user_group_members_by_id_with_http_info(user_group_ids, opts)
      data
    end

    # Get user group members by user group ID.
    # @param user_group_ids [Array<String>] User group IDs to search for
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainUserGroupMembersResponseV1, Integer, Hash)>] DomainUserGroupMembersResponseV1 data, response status code and response headers
    def get_user_group_members_by_id_with_http_info(user_group_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MsspApi.get_user_group_members_by_id ...'
      end
      # verify the required parameter 'user_group_ids' is set
      if @api_client.config.client_side_validation && user_group_ids.nil?
        fail ArgumentError, "Missing the required parameter 'user_group_ids' when calling MsspApi.get_user_group_members_by_id"
      end
      # resource path
      local_var_path = '/mssp/entities/user-group-members/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'user_group_ids'] = @api_client.build_collection_param(user_group_ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainUserGroupMembersResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"MsspApi.get_user_group_members_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MsspApi#get_user_group_members_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get user groups by ID.
    # @param user_group_ids [Array<String>] User Group IDs to search for
    # @param [Hash] opts the optional parameters
    # @return [DomainUserGroupsResponseV1]
    def get_user_groups_by_id(user_group_ids, opts = {})
      data, _status_code, _headers = get_user_groups_by_id_with_http_info(user_group_ids, opts)
      data
    end

    # Get user groups by ID.
    # @param user_group_ids [Array<String>] User Group IDs to search for
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainUserGroupsResponseV1, Integer, Hash)>] DomainUserGroupsResponseV1 data, response status code and response headers
    def get_user_groups_by_id_with_http_info(user_group_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MsspApi.get_user_groups_by_id ...'
      end
      # verify the required parameter 'user_group_ids' is set
      if @api_client.config.client_side_validation && user_group_ids.nil?
        fail ArgumentError, "Missing the required parameter 'user_group_ids' when calling MsspApi.get_user_groups_by_id"
      end
      # resource path
      local_var_path = '/mssp/entities/user-groups/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'user_group_ids'] = @api_client.build_collection_param(user_group_ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainUserGroupsResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"MsspApi.get_user_groups_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MsspApi#get_user_groups_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query for customers linked as children
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort The sort expression used to sort the results (default to 'last_modified_timestamp|desc')
    # @option opts [Integer] :offset Starting index of overall result set from which to return ids (default to 0)
    # @option opts [Integer] :limit Number of ids to return (default to 10)
    # @return [MsaQueryResponse]
    def query_children(opts = {})
      data, _status_code, _headers = query_children_with_http_info(opts)
      data
    end

    # Query for customers linked as children
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort The sort expression used to sort the results (default to 'last_modified_timestamp|desc')
    # @option opts [Integer] :offset Starting index of overall result set from which to return ids (default to 0)
    # @option opts [Integer] :limit Number of ids to return (default to 10)
    # @return [Array<(MsaQueryResponse, Integer, Hash)>] MsaQueryResponse data, response status code and response headers
    def query_children_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MsspApi.query_children ...'
      end
      allowable_values = ["last_modified_timestamp"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/mssp/queries/children/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"MsspApi.query_children",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MsspApi#query_children\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query a CID groups members by associated CID.
    # @param cid [String] CID to lookup associated CID group ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort The sort expression used to sort the results (default to 'last_modified_timestamp|desc')
    # @option opts [Integer] :offset Starting index of overall result set from which to return id (default to 0)
    # @option opts [Integer] :limit Maximum number of results to return (default to 10)
    # @return [MsaQueryResponse]
    def query_cid_group_members(cid, opts = {})
      data, _status_code, _headers = query_cid_group_members_with_http_info(cid, opts)
      data
    end

    # Query a CID groups members by associated CID.
    # @param cid [String] CID to lookup associated CID group ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort The sort expression used to sort the results (default to 'last_modified_timestamp|desc')
    # @option opts [Integer] :offset Starting index of overall result set from which to return id (default to 0)
    # @option opts [Integer] :limit Maximum number of results to return (default to 10)
    # @return [Array<(MsaQueryResponse, Integer, Hash)>] MsaQueryResponse data, response status code and response headers
    def query_cid_group_members_with_http_info(cid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MsspApi.query_cid_group_members ...'
      end
      # verify the required parameter 'cid' is set
      if @api_client.config.client_side_validation && cid.nil?
        fail ArgumentError, "Missing the required parameter 'cid' when calling MsspApi.query_cid_group_members"
      end
      allowable_values = ["last_modified_timestamp|asc", "last_modified_timestamp|desc"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/mssp/queries/cid-group-members/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cid'] = cid
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"MsspApi.query_cid_group_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MsspApi#query_cid_group_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query CID Groups.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name to lookup groups for
    # @option opts [String] :sort The sort expression used to sort the results (default to 'name|asc')
    # @option opts [Integer] :offset Starting index of overall result set from which to return ids (default to 0)
    # @option opts [Integer] :limit Number of ids to return (default to 10)
    # @return [MsaQueryResponse]
    def query_cid_groups(opts = {})
      data, _status_code, _headers = query_cid_groups_with_http_info(opts)
      data
    end

    # Query CID Groups.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name to lookup groups for
    # @option opts [String] :sort The sort expression used to sort the results (default to 'name|asc')
    # @option opts [Integer] :offset Starting index of overall result set from which to return ids (default to 0)
    # @option opts [Integer] :limit Number of ids to return (default to 10)
    # @return [Array<(MsaQueryResponse, Integer, Hash)>] MsaQueryResponse data, response status code and response headers
    def query_cid_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MsspApi.query_cid_groups ...'
      end
      allowable_values = ["last_modified_timestamp", "name"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/mssp/queries/cid-groups/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"MsspApi.query_cid_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MsspApi#query_cid_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query links between user groups and CID groups. At least one of CID group ID or user group ID should also be provided. Role ID is optional.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_group_id User group ID to fetch MSSP role for
    # @option opts [String] :cid_group_id CID group ID to fetch MSSP role for
    # @option opts [String] :role_id Role ID to fetch MSSP role for
    # @option opts [String] :sort The sort expression used to sort the results (default to 'last_modified_timestamp|desc')
    # @option opts [Integer] :offset Starting index of overall result set from which to return ids (default to 0)
    # @option opts [Integer] :limit Maximum number of results to return (default to 10)
    # @return [MsaQueryResponse]
    def query_roles(opts = {})
      data, _status_code, _headers = query_roles_with_http_info(opts)
      data
    end

    # Query links between user groups and CID groups. At least one of CID group ID or user group ID should also be provided. Role ID is optional.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_group_id User group ID to fetch MSSP role for
    # @option opts [String] :cid_group_id CID group ID to fetch MSSP role for
    # @option opts [String] :role_id Role ID to fetch MSSP role for
    # @option opts [String] :sort The sort expression used to sort the results (default to 'last_modified_timestamp|desc')
    # @option opts [Integer] :offset Starting index of overall result set from which to return ids (default to 0)
    # @option opts [Integer] :limit Maximum number of results to return (default to 10)
    # @return [Array<(MsaQueryResponse, Integer, Hash)>] MsaQueryResponse data, response status code and response headers
    def query_roles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MsspApi.query_roles ...'
      end
      allowable_values = ["last_modified_timestamp|asc", "last_modified_timestamp|desc"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/mssp/queries/mssp-roles/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'user_group_id'] = opts[:'user_group_id'] if !opts[:'user_group_id'].nil?
      query_params[:'cid_group_id'] = opts[:'cid_group_id'] if !opts[:'cid_group_id'].nil?
      query_params[:'role_id'] = opts[:'role_id'] if !opts[:'role_id'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"MsspApi.query_roles",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MsspApi#query_roles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query User Group member by User UUID.
    # @param user_uuid [String] User UUID to lookup associated user group ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort The sort expression used to sort the results (default to 'last_modified_timestamp|desc')
    # @option opts [Integer] :offset Starting index of overall result set from which to return ids (default to 0)
    # @option opts [Integer] :limit Number of ids to return (default to 10)
    # @return [MsaQueryResponse]
    def query_user_group_members(user_uuid, opts = {})
      data, _status_code, _headers = query_user_group_members_with_http_info(user_uuid, opts)
      data
    end

    # Query User Group member by User UUID.
    # @param user_uuid [String] User UUID to lookup associated user group ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort The sort expression used to sort the results (default to 'last_modified_timestamp|desc')
    # @option opts [Integer] :offset Starting index of overall result set from which to return ids (default to 0)
    # @option opts [Integer] :limit Number of ids to return (default to 10)
    # @return [Array<(MsaQueryResponse, Integer, Hash)>] MsaQueryResponse data, response status code and response headers
    def query_user_group_members_with_http_info(user_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MsspApi.query_user_group_members ...'
      end
      # verify the required parameter 'user_uuid' is set
      if @api_client.config.client_side_validation && user_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'user_uuid' when calling MsspApi.query_user_group_members"
      end
      allowable_values = ["last_modified_timestamp"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/mssp/queries/user-group-members/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'user_uuid'] = user_uuid
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"MsspApi.query_user_group_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MsspApi#query_user_group_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query User Groups.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name to lookup groups for
    # @option opts [String] :sort The sort expression used to sort the results (default to 'name|asc')
    # @option opts [Integer] :offset Starting index of overall result set from which to return ids (default to 0)
    # @option opts [Integer] :limit Number of ids to return (default to 10)
    # @return [MsaQueryResponse]
    def query_user_groups(opts = {})
      data, _status_code, _headers = query_user_groups_with_http_info(opts)
      data
    end

    # Query User Groups.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name to lookup groups for
    # @option opts [String] :sort The sort expression used to sort the results (default to 'name|asc')
    # @option opts [Integer] :offset Starting index of overall result set from which to return ids (default to 0)
    # @option opts [Integer] :limit Number of ids to return (default to 10)
    # @return [Array<(MsaQueryResponse, Integer, Hash)>] MsaQueryResponse data, response status code and response headers
    def query_user_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MsspApi.query_user_groups ...'
      end
      allowable_values = ["last_modified_timestamp", "name"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/mssp/queries/user-groups/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"MsspApi.query_user_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MsspApi#query_user_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update existing CID Group(s). CID Group ID is expected for each CID Group definition provided in request body. CID Group member(s) remain unaffected.
    # @param body [DomainCIDGroupsRequestV1] 
    # @param [Hash] opts the optional parameters
    # @return [DomainCIDGroupsResponseV1]
    def update_cid_groups(body, opts = {})
      data, _status_code, _headers = update_cid_groups_with_http_info(body, opts)
      data
    end

    # Update existing CID Group(s). CID Group ID is expected for each CID Group definition provided in request body. CID Group member(s) remain unaffected.
    # @param body [DomainCIDGroupsRequestV1] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainCIDGroupsResponseV1, Integer, Hash)>] DomainCIDGroupsResponseV1 data, response status code and response headers
    def update_cid_groups_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MsspApi.update_cid_groups ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MsspApi.update_cid_groups"
      end
      # resource path
      local_var_path = '/mssp/entities/cid-groups/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainCIDGroupsResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"MsspApi.update_cid_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MsspApi#update_cid_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update existing User Group(s). User Group ID is expected for each User Group definition provided in request body. User Group member(s) remain unaffected.
    # @param body [DomainUserGroupsRequestV1] 
    # @param [Hash] opts the optional parameters
    # @return [DomainUserGroupsResponseV1]
    def update_user_groups(body, opts = {})
      data, _status_code, _headers = update_user_groups_with_http_info(body, opts)
      data
    end

    # Update existing User Group(s). User Group ID is expected for each User Group definition provided in request body. User Group member(s) remain unaffected.
    # @param body [DomainUserGroupsRequestV1] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainUserGroupsResponseV1, Integer, Hash)>] DomainUserGroupsResponseV1 data, response status code and response headers
    def update_user_groups_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MsspApi.update_user_groups ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MsspApi.update_user_groups"
      end
      # resource path
      local_var_path = '/mssp/entities/user-groups/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainUserGroupsResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"MsspApi.update_user_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MsspApi#update_user_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
