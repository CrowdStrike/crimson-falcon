=begin
#CrowdStrike API Specification

#Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and more information about API endpoints that don't yet support OAuth2, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation). To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`. Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.

The version of the OpenAPI document: 2022-10-19T15:57:46Z

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'cgi'

module Falcon
  class IocsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Number of hosts in your customer account that have observed a given custom IOC
    # @param type [String]  The type of the indicator. Valid types include:  sha256: A hex-encoded sha256 hash string. Length - min: 64, max: 64.  md5: A hex-encoded md5 hash string. Length - min 32, max: 32.  domain: A domain name. Length - min: 1, max: 200.  ipv4: An IPv4 address. Must be a valid IP address.  ipv6: An IPv6 address. Must be a valid IP address. 
    # @param value [String] The string representation of the indicator
    # @param [Hash] opts the optional parameters
    # @return [ApiMsaReplyIOCDevicesCount]
    def devices_count(type, value, opts = {})
      data, _status_code, _headers = devices_count_with_http_info(type, value, opts)
      data
    end

    # Number of hosts in your customer account that have observed a given custom IOC
    # @param type [String]  The type of the indicator. Valid types include:  sha256: A hex-encoded sha256 hash string. Length - min: 64, max: 64.  md5: A hex-encoded md5 hash string. Length - min 32, max: 32.  domain: A domain name. Length - min: 1, max: 200.  ipv4: An IPv4 address. Must be a valid IP address.  ipv6: An IPv6 address. Must be a valid IP address. 
    # @param value [String] The string representation of the indicator
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiMsaReplyIOCDevicesCount, Integer, Hash)>] ApiMsaReplyIOCDevicesCount data, response status code and response headers
    def devices_count_with_http_info(type, value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IocsApi.devices_count ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling IocsApi.devices_count"
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling IocsApi.devices_count"
      end
      # resource path
      local_var_path = '/indicators/aggregates/devices-count/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = type
      query_params[:'value'] = value

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiMsaReplyIOCDevicesCount'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IocsApi.devices_count",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IocsApi#devices_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find hosts that have observed a given custom IOC. For details about those hosts, use GET /devices/entities/devices/v1
    # @param type [String]  The type of the indicator. Valid types include:  sha256: A hex-encoded sha256 hash string. Length - min: 64, max: 64.  md5: A hex-encoded md5 hash string. Length - min 32, max: 32.  domain: A domain name. Length - min: 1, max: 200.  ipv4: An IPv4 address. Must be a valid IP address.  ipv6: An IPv6 address. Must be a valid IP address. 
    # @param value [String] The string representation of the indicator
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit The first process to return, where 0 is the latest offset. Use with the offset parameter to manage pagination of results.
    # @option opts [String] :offset The first process to return, where 0 is the latest offset. Use with the limit parameter to manage pagination of results.
    # @return [ApiMsaReplyDevicesRanOn]
    def devices_ran_on(type, value, opts = {})
      data, _status_code, _headers = devices_ran_on_with_http_info(type, value, opts)
      data
    end

    # Find hosts that have observed a given custom IOC. For details about those hosts, use GET /devices/entities/devices/v1
    # @param type [String]  The type of the indicator. Valid types include:  sha256: A hex-encoded sha256 hash string. Length - min: 64, max: 64.  md5: A hex-encoded md5 hash string. Length - min 32, max: 32.  domain: A domain name. Length - min: 1, max: 200.  ipv4: An IPv4 address. Must be a valid IP address.  ipv6: An IPv6 address. Must be a valid IP address. 
    # @param value [String] The string representation of the indicator
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit The first process to return, where 0 is the latest offset. Use with the offset parameter to manage pagination of results.
    # @option opts [String] :offset The first process to return, where 0 is the latest offset. Use with the limit parameter to manage pagination of results.
    # @return [Array<(ApiMsaReplyDevicesRanOn, Integer, Hash)>] ApiMsaReplyDevicesRanOn data, response status code and response headers
    def devices_ran_on_with_http_info(type, value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IocsApi.devices_ran_on ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling IocsApi.devices_ran_on"
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling IocsApi.devices_ran_on"
      end
      # resource path
      local_var_path = '/indicators/queries/devices/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = type
      query_params[:'value'] = value
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiMsaReplyDevicesRanOn'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IocsApi.devices_ran_on",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IocsApi#devices_ran_on\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # For the provided ProcessID retrieve the process details
    # @param ids [Array<String>] ProcessID for the running process you want to lookup
    # @param [Hash] opts the optional parameters
    # @return [ApiMsaProcessDetailResponse]
    def entities_processes(ids, opts = {})
      data, _status_code, _headers = entities_processes_with_http_info(ids, opts)
      data
    end

    # For the provided ProcessID retrieve the process details
    # @param ids [Array<String>] ProcessID for the running process you want to lookup
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiMsaProcessDetailResponse, Integer, Hash)>] ApiMsaProcessDetailResponse data, response status code and response headers
    def entities_processes_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IocsApi.entities_processes ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling IocsApi.entities_processes"
      end
      # resource path
      local_var_path = '/processes/entities/processes/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiMsaProcessDetailResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IocsApi.entities_processes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IocsApi#entities_processes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search for processes associated with a custom IOC
    # @param type [String]  The type of the indicator. Valid types include:  sha256: A hex-encoded sha256 hash string. Length - min: 64, max: 64.  md5: A hex-encoded md5 hash string. Length - min 32, max: 32.  domain: A domain name. Length - min: 1, max: 200.  ipv4: An IPv4 address. Must be a valid IP address.  ipv6: An IPv6 address. Must be a valid IP address. 
    # @param value [String] The string representation of the indicator
    # @param device_id [String] Specify a host&#39;s ID to return only processes from that host. Get a host&#39;s ID from GET /devices/queries/devices/v1, the Falcon console, or the Streaming API.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit The first process to return, where 0 is the latest offset. Use with the offset parameter to manage pagination of results.
    # @option opts [String] :offset The first process to return, where 0 is the latest offset. Use with the limit parameter to manage pagination of results.
    # @return [ApiMsaReplyProcessesRanOn]
    def processes_ran_on(type, value, device_id, opts = {})
      data, _status_code, _headers = processes_ran_on_with_http_info(type, value, device_id, opts)
      data
    end

    # Search for processes associated with a custom IOC
    # @param type [String]  The type of the indicator. Valid types include:  sha256: A hex-encoded sha256 hash string. Length - min: 64, max: 64.  md5: A hex-encoded md5 hash string. Length - min 32, max: 32.  domain: A domain name. Length - min: 1, max: 200.  ipv4: An IPv4 address. Must be a valid IP address.  ipv6: An IPv6 address. Must be a valid IP address. 
    # @param value [String] The string representation of the indicator
    # @param device_id [String] Specify a host&#39;s ID to return only processes from that host. Get a host&#39;s ID from GET /devices/queries/devices/v1, the Falcon console, or the Streaming API.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit The first process to return, where 0 is the latest offset. Use with the offset parameter to manage pagination of results.
    # @option opts [String] :offset The first process to return, where 0 is the latest offset. Use with the limit parameter to manage pagination of results.
    # @return [Array<(ApiMsaReplyProcessesRanOn, Integer, Hash)>] ApiMsaReplyProcessesRanOn data, response status code and response headers
    def processes_ran_on_with_http_info(type, value, device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IocsApi.processes_ran_on ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling IocsApi.processes_ran_on"
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling IocsApi.processes_ran_on"
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling IocsApi.processes_ran_on"
      end
      # resource path
      local_var_path = '/indicators/queries/processes/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = type
      query_params[:'value'] = value
      query_params[:'device_id'] = device_id
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiMsaReplyProcessesRanOn'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IocsApi.processes_ran_on",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IocsApi#processes_ran_on\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
