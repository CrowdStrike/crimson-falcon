=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <https://unlicense.org>

CrowdStrike Swagger API Version: 2023-05-30T23:10:32Z

=end

require 'cgi'

module Falcon
  class ReconApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get notification exposed data record aggregates as specified via JSON in request body. The valid aggregation fields are: [cid notification_id created_date rule.id rule.name rule.topic source_category site author file.name]
    # @param body [Array<MsaAggregateQueryRequest>] 
    # @param [Hash] opts the optional parameters
    # @return [DomainAggregatesResponse]
    def aggregate_notifications_exposed_data_records_v1(body, opts = {})
      data, _status_code, _headers = aggregate_notifications_exposed_data_records_v1_with_http_info(body, opts)
      data
    end

    # Get notification exposed data record aggregates as specified via JSON in request body. The valid aggregation fields are: [cid notification_id created_date rule.id rule.name rule.topic source_category site author file.name]
    # @param body [Array<MsaAggregateQueryRequest>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainAggregatesResponse, Integer, Hash)>] DomainAggregatesResponse data, response status code and response headers
    def aggregate_notifications_exposed_data_records_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReconApi.aggregate_notifications_exposed_data_records_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ReconApi.aggregate_notifications_exposed_data_records_v1"
      end
      # resource path
      local_var_path = '/recon/aggregates/notifications-exposed-data-records/GET/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainAggregatesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ReconApi.aggregate_notifications_exposed_data_records_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReconApi#aggregate_notifications_exposed_data_records_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get notification aggregates as specified via JSON in request body.
    # @param body [Array<MsaAggregateQueryRequest>] 
    # @param [Hash] opts the optional parameters
    # @return [DomainAggregatesResponse]
    def aggregate_notifications_v1(body, opts = {})
      data, _status_code, _headers = aggregate_notifications_v1_with_http_info(body, opts)
      data
    end

    # Get notification aggregates as specified via JSON in request body.
    # @param body [Array<MsaAggregateQueryRequest>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainAggregatesResponse, Integer, Hash)>] DomainAggregatesResponse data, response status code and response headers
    def aggregate_notifications_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReconApi.aggregate_notifications_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ReconApi.aggregate_notifications_v1"
      end
      # resource path
      local_var_path = '/recon/aggregates/notifications/GET/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainAggregatesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ReconApi.aggregate_notifications_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReconApi#aggregate_notifications_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create actions for a monitoring rule. Accepts a list of actions that will be attached to the monitoring rule.
    # @param body [DomainRegisterActionsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [DomainActionEntitiesResponseV1]
    def create_actions_v1(body, opts = {})
      data, _status_code, _headers = create_actions_v1_with_http_info(body, opts)
      data
    end

    # Create actions for a monitoring rule. Accepts a list of actions that will be attached to the monitoring rule.
    # @param body [DomainRegisterActionsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainActionEntitiesResponseV1, Integer, Hash)>] DomainActionEntitiesResponseV1 data, response status code and response headers
    def create_actions_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReconApi.create_actions_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ReconApi.create_actions_v1"
      end
      # resource path
      local_var_path = '/recon/entities/actions/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainActionEntitiesResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ReconApi.create_actions_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReconApi#create_actions_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Launch asynchronous export job. Use the job ID to poll the status of the job using GET /entities/exports/v1.
    # @param body [Array<DomainLaunchExportJobRequestV1>] 
    # @param [Hash] opts the optional parameters
    # @return [DomainLaunchExportJobResponseV1]
    def create_export_jobs_v1(body, opts = {})
      data, _status_code, _headers = create_export_jobs_v1_with_http_info(body, opts)
      data
    end

    # Launch asynchronous export job. Use the job ID to poll the status of the job using GET /entities/exports/v1.
    # @param body [Array<DomainLaunchExportJobRequestV1>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainLaunchExportJobResponseV1, Integer, Hash)>] DomainLaunchExportJobResponseV1 data, response status code and response headers
    def create_export_jobs_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReconApi.create_export_jobs_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ReconApi.create_export_jobs_v1"
      end
      # resource path
      local_var_path = '/recon/entities/exports/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainLaunchExportJobResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ReconApi.create_export_jobs_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReconApi#create_export_jobs_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create monitoring rules.
    # @param body [Array<SadomainCreateRuleRequestV1>] 
    # @param [Hash] opts the optional parameters
    # @return [DomainRulesEntitiesResponseV1]
    def create_rules_v1(body, opts = {})
      data, _status_code, _headers = create_rules_v1_with_http_info(body, opts)
      data
    end

    # Create monitoring rules.
    # @param body [Array<SadomainCreateRuleRequestV1>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainRulesEntitiesResponseV1, Integer, Hash)>] DomainRulesEntitiesResponseV1 data, response status code and response headers
    def create_rules_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReconApi.create_rules_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ReconApi.create_rules_v1"
      end
      # resource path
      local_var_path = '/recon/entities/rules/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainRulesEntitiesResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ReconApi.create_rules_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReconApi#create_rules_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an action from a monitoring rule based on the action ID.
    # @param id [String] ID of the action.
    # @param [Hash] opts the optional parameters
    # @return [DomainQueryResponse]
    def delete_action_v1(id, opts = {})
      data, _status_code, _headers = delete_action_v1_with_http_info(id, opts)
      data
    end

    # Delete an action from a monitoring rule based on the action ID.
    # @param id [String] ID of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainQueryResponse, Integer, Hash)>] DomainQueryResponse data, response status code and response headers
    def delete_action_v1_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReconApi.delete_action_v1 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReconApi.delete_action_v1"
      end
      # resource path
      local_var_path = '/recon/entities/actions/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ReconApi.delete_action_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReconApi#delete_action_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete export jobs (and their associated file(s)) based on their IDs.
    # @param ids [Array<String>] Export Job IDs.
    # @param [Hash] opts the optional parameters
    # @return [DomainExportJobIDResponseV1]
    def delete_export_jobs_v1(ids, opts = {})
      data, _status_code, _headers = delete_export_jobs_v1_with_http_info(ids, opts)
      data
    end

    # Delete export jobs (and their associated file(s)) based on their IDs.
    # @param ids [Array<String>] Export Job IDs.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainExportJobIDResponseV1, Integer, Hash)>] DomainExportJobIDResponseV1 data, response status code and response headers
    def delete_export_jobs_v1_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReconApi.delete_export_jobs_v1 ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling ReconApi.delete_export_jobs_v1"
      end
      # resource path
      local_var_path = '/recon/entities/exports/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainExportJobIDResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ReconApi.delete_export_jobs_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReconApi#delete_export_jobs_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete notifications based on IDs. Notifications cannot be recovered after they are deleted.
    # @param ids [Array<String>] Notifications IDs.
    # @param [Hash] opts the optional parameters
    # @return [DomainNotificationIDResponse]
    def delete_notifications_v1(ids, opts = {})
      data, _status_code, _headers = delete_notifications_v1_with_http_info(ids, opts)
      data
    end

    # Delete notifications based on IDs. Notifications cannot be recovered after they are deleted.
    # @param ids [Array<String>] Notifications IDs.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainNotificationIDResponse, Integer, Hash)>] DomainNotificationIDResponse data, response status code and response headers
    def delete_notifications_v1_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReconApi.delete_notifications_v1 ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling ReconApi.delete_notifications_v1"
      end
      # resource path
      local_var_path = '/recon/entities/notifications/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainNotificationIDResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ReconApi.delete_notifications_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReconApi#delete_notifications_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete monitoring rules.
    # @param ids [Array<String>] IDs of rules.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :notifications_deletion_requested Whether we should delete the notifications generated by this rule or not
    # @return [DomainRuleQueryResponseV1]
    def delete_rules_v1(ids, opts = {})
      data, _status_code, _headers = delete_rules_v1_with_http_info(ids, opts)
      data
    end

    # Delete monitoring rules.
    # @param ids [Array<String>] IDs of rules.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :notifications_deletion_requested Whether we should delete the notifications generated by this rule or not
    # @return [Array<(DomainRuleQueryResponseV1, Integer, Hash)>] DomainRuleQueryResponseV1 data, response status code and response headers
    def delete_rules_v1_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReconApi.delete_rules_v1 ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling ReconApi.delete_rules_v1"
      end
      # resource path
      local_var_path = '/recon/entities/rules/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)
      query_params[:'notificationsDeletionRequested'] = opts[:'notifications_deletion_requested'] if !opts[:'notifications_deletion_requested'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainRuleQueryResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ReconApi.delete_rules_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReconApi#delete_rules_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get actions based on their IDs. IDs can be retrieved using the GET /queries/actions/v1 endpoint.
    # @param ids [Array<String>] Action IDs.
    # @param [Hash] opts the optional parameters
    # @return [DomainActionEntitiesResponseV1]
    def get_actions_v1(ids, opts = {})
      data, _status_code, _headers = get_actions_v1_with_http_info(ids, opts)
      data
    end

    # Get actions based on their IDs. IDs can be retrieved using the GET /queries/actions/v1 endpoint.
    # @param ids [Array<String>] Action IDs.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainActionEntitiesResponseV1, Integer, Hash)>] DomainActionEntitiesResponseV1 data, response status code and response headers
    def get_actions_v1_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReconApi.get_actions_v1 ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling ReconApi.get_actions_v1"
      end
      # resource path
      local_var_path = '/recon/entities/actions/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainActionEntitiesResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ReconApi.get_actions_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReconApi#get_actions_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the status of export jobs based on their IDs. Export jobs can be launched by calling POST /entities/exports/v1. When a job is complete, use the job ID to download the file(s) associated with it using GET entities/export-files/v1.
    # @param ids [Array<String>] Export Job IDs.
    # @param [Hash] opts the optional parameters
    # @return [DomainExportJobEntitiesResponseV1]
    def get_export_jobs_v1(ids, opts = {})
      data, _status_code, _headers = get_export_jobs_v1_with_http_info(ids, opts)
      data
    end

    # Get the status of export jobs based on their IDs. Export jobs can be launched by calling POST /entities/exports/v1. When a job is complete, use the job ID to download the file(s) associated with it using GET entities/export-files/v1.
    # @param ids [Array<String>] Export Job IDs.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainExportJobEntitiesResponseV1, Integer, Hash)>] DomainExportJobEntitiesResponseV1 data, response status code and response headers
    def get_export_jobs_v1_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReconApi.get_export_jobs_v1 ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling ReconApi.get_export_jobs_v1"
      end
      # resource path
      local_var_path = '/recon/entities/exports/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainExportJobEntitiesResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ReconApi.get_export_jobs_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReconApi#get_export_jobs_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download the file associated with a job ID.
    # @param id [String] Export Job ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<Integer>]
    def get_file_content_for_export_jobs_v1(id, opts = {})
      data, _status_code, _headers = get_file_content_for_export_jobs_v1_with_http_info(id, opts)
      data
    end

    # Download the file associated with a job ID.
    # @param id [String] Export Job ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Integer>, Integer, Hash)>] Array<Integer> data, response status code and response headers
    def get_file_content_for_export_jobs_v1_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReconApi.get_file_content_for_export_jobs_v1 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReconApi.get_file_content_for_export_jobs_v1"
      end
      # resource path
      local_var_path = '/recon/entities/export-files/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Integer>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ReconApi.get_file_content_for_export_jobs_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReconApi#get_file_content_for_export_jobs_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get detailed notifications based on their IDs. These include the raw intelligence content that generated the match.This endpoint will return translated notification content. The only target language available is English. A single notification can be translated per request
    # @param ids [Array<String>] Notification IDs.
    # @param [Hash] opts the optional parameters
    # @return [DomainNotificationDetailsResponseV1]
    def get_notifications_detailed_translated_v1(ids, opts = {})
      data, _status_code, _headers = get_notifications_detailed_translated_v1_with_http_info(ids, opts)
      data
    end

    # Get detailed notifications based on their IDs. These include the raw intelligence content that generated the match.This endpoint will return translated notification content. The only target language available is English. A single notification can be translated per request
    # @param ids [Array<String>] Notification IDs.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainNotificationDetailsResponseV1, Integer, Hash)>] DomainNotificationDetailsResponseV1 data, response status code and response headers
    def get_notifications_detailed_translated_v1_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReconApi.get_notifications_detailed_translated_v1 ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling ReconApi.get_notifications_detailed_translated_v1"
      end
      # resource path
      local_var_path = '/recon/entities/notifications-detailed-translated/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainNotificationDetailsResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ReconApi.get_notifications_detailed_translated_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReconApi#get_notifications_detailed_translated_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get detailed notifications based on their IDs. These include the raw intelligence content that generated the match.
    # @param ids [Array<String>] Notification IDs.
    # @param [Hash] opts the optional parameters
    # @return [DomainNotificationDetailsResponseV1]
    def get_notifications_detailed_v1(ids, opts = {})
      data, _status_code, _headers = get_notifications_detailed_v1_with_http_info(ids, opts)
      data
    end

    # Get detailed notifications based on their IDs. These include the raw intelligence content that generated the match.
    # @param ids [Array<String>] Notification IDs.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainNotificationDetailsResponseV1, Integer, Hash)>] DomainNotificationDetailsResponseV1 data, response status code and response headers
    def get_notifications_detailed_v1_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReconApi.get_notifications_detailed_v1 ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling ReconApi.get_notifications_detailed_v1"
      end
      # resource path
      local_var_path = '/recon/entities/notifications-detailed/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainNotificationDetailsResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ReconApi.get_notifications_detailed_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReconApi#get_notifications_detailed_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get notifications exposed data records based on their IDs. IDs can be retrieved using the GET /queries/notifications-exposed-data-records/v1 endpoint. The associate notification can be fetched using the /entities/notifications/v* endpoints
    # @param ids [Array<String>] Notification exposed records IDs.
    # @param [Hash] opts the optional parameters
    # @return [ApiNotificationExposedDataRecordEntitiesResponseV1]
    def get_notifications_exposed_data_records_v1(ids, opts = {})
      data, _status_code, _headers = get_notifications_exposed_data_records_v1_with_http_info(ids, opts)
      data
    end

    # Get notifications exposed data records based on their IDs. IDs can be retrieved using the GET /queries/notifications-exposed-data-records/v1 endpoint. The associate notification can be fetched using the /entities/notifications/v* endpoints
    # @param ids [Array<String>] Notification exposed records IDs.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiNotificationExposedDataRecordEntitiesResponseV1, Integer, Hash)>] ApiNotificationExposedDataRecordEntitiesResponseV1 data, response status code and response headers
    def get_notifications_exposed_data_records_v1_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReconApi.get_notifications_exposed_data_records_v1 ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling ReconApi.get_notifications_exposed_data_records_v1"
      end
      # resource path
      local_var_path = '/recon/entities/notifications-exposed-data-records/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiNotificationExposedDataRecordEntitiesResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ReconApi.get_notifications_exposed_data_records_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReconApi#get_notifications_exposed_data_records_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get notifications based on their IDs. IDs can be retrieved using the GET /queries/notifications/v1 endpoint. This endpoint will return translated notification content. The only target language available is English.
    # @param ids [Array<String>] Notification IDs.
    # @param [Hash] opts the optional parameters
    # @return [DomainNotificationEntitiesResponseV1]
    def get_notifications_translated_v1(ids, opts = {})
      data, _status_code, _headers = get_notifications_translated_v1_with_http_info(ids, opts)
      data
    end

    # Get notifications based on their IDs. IDs can be retrieved using the GET /queries/notifications/v1 endpoint. This endpoint will return translated notification content. The only target language available is English.
    # @param ids [Array<String>] Notification IDs.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainNotificationEntitiesResponseV1, Integer, Hash)>] DomainNotificationEntitiesResponseV1 data, response status code and response headers
    def get_notifications_translated_v1_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReconApi.get_notifications_translated_v1 ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling ReconApi.get_notifications_translated_v1"
      end
      # resource path
      local_var_path = '/recon/entities/notifications-translated/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainNotificationEntitiesResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ReconApi.get_notifications_translated_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReconApi#get_notifications_translated_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get notifications based on their IDs. IDs can be retrieved using the GET /queries/notifications/v1 endpoint.
    # @param ids [Array<String>] Notification IDs.
    # @param [Hash] opts the optional parameters
    # @return [DomainNotificationEntitiesResponseV1]
    def get_notifications_v1(ids, opts = {})
      data, _status_code, _headers = get_notifications_v1_with_http_info(ids, opts)
      data
    end

    # Get notifications based on their IDs. IDs can be retrieved using the GET /queries/notifications/v1 endpoint.
    # @param ids [Array<String>] Notification IDs.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainNotificationEntitiesResponseV1, Integer, Hash)>] DomainNotificationEntitiesResponseV1 data, response status code and response headers
    def get_notifications_v1_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReconApi.get_notifications_v1 ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling ReconApi.get_notifications_v1"
      end
      # resource path
      local_var_path = '/recon/entities/notifications/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainNotificationEntitiesResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ReconApi.get_notifications_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReconApi#get_notifications_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get monitoring rules based on their IDs. IDs can be retrieved using the GET /queries/rules/v1 endpoint.
    # @param ids [Array<String>] IDs of rules.
    # @param [Hash] opts the optional parameters
    # @return [DomainRulesEntitiesResponseV1]
    def get_rules_v1(ids, opts = {})
      data, _status_code, _headers = get_rules_v1_with_http_info(ids, opts)
      data
    end

    # Get monitoring rules based on their IDs. IDs can be retrieved using the GET /queries/rules/v1 endpoint.
    # @param ids [Array<String>] IDs of rules.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainRulesEntitiesResponseV1, Integer, Hash)>] DomainRulesEntitiesResponseV1 data, response status code and response headers
    def get_rules_v1_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReconApi.get_rules_v1 ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling ReconApi.get_rules_v1"
      end
      # resource path
      local_var_path = '/recon/entities/rules/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainRulesEntitiesResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ReconApi.get_rules_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReconApi#get_rules_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Preview rules notification count and distribution. This will return aggregations on: channel, count, site.
    # @param body [DomainRulePreviewRequest] 
    # @param [Hash] opts the optional parameters
    # @return [DomainAggregatesResponse]
    def preview_rule_v1(body, opts = {})
      data, _status_code, _headers = preview_rule_v1_with_http_info(body, opts)
      data
    end

    # Preview rules notification count and distribution. This will return aggregations on: channel, count, site.
    # @param body [DomainRulePreviewRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainAggregatesResponse, Integer, Hash)>] DomainAggregatesResponse data, response status code and response headers
    def preview_rule_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReconApi.preview_rule_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ReconApi.preview_rule_v1"
      end
      # resource path
      local_var_path = '/recon/aggregates/rules-preview/GET/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainAggregatesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ReconApi.preview_rule_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReconApi#preview_rule_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query actions based on provided criteria. Use the IDs from this response to get the action entities on GET /entities/actions/v1.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Starting index of overall result set from which to return IDs.
    # @option opts [Integer] :limit Number of IDs to return. Offset + limit should NOT be above 10K.
    # @option opts [String] :sort Possible order by fields: created_timestamp, updated_timestamp. Ex: &#39;updated_timestamp|desc&#39;.
    # @option opts [String] :filter FQL query to filter actions by. Possible filter properties are: [id cid user_uuid rule_id type frequency content_format trigger_matchless recipients status created_timestamp updated_timestamp]
    # @option opts [String] :q Free text search across all indexed fields
    # @return [DomainQueryResponse]
    def query_actions_v1(opts = {})
      data, _status_code, _headers = query_actions_v1_with_http_info(opts)
      data
    end

    # Query actions based on provided criteria. Use the IDs from this response to get the action entities on GET /entities/actions/v1.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Starting index of overall result set from which to return IDs.
    # @option opts [Integer] :limit Number of IDs to return. Offset + limit should NOT be above 10K.
    # @option opts [String] :sort Possible order by fields: created_timestamp, updated_timestamp. Ex: &#39;updated_timestamp|desc&#39;.
    # @option opts [String] :filter FQL query to filter actions by. Possible filter properties are: [id cid user_uuid rule_id type frequency content_format trigger_matchless recipients status created_timestamp updated_timestamp]
    # @option opts [String] :q Free text search across all indexed fields
    # @return [Array<(DomainQueryResponse, Integer, Hash)>] DomainQueryResponse data, response status code and response headers
    def query_actions_v1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReconApi.query_actions_v1 ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 500
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ReconApi.query_actions_v1, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ReconApi.query_actions_v1, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/recon/queries/actions/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ReconApi.query_actions_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReconApi#query_actions_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query notifications exposed data records based on provided criteria. Use the IDs from this response to get the notification +entities on GET /entities/notifications-exposed-data-records/v1
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Starting index of overall result set from which to return ids.
    # @option opts [Integer] :limit Number of IDs to return. Offset + limit should NOT be above 10K.
    # @option opts [String] :sort Possible order by fields: created_date, updated_date. Ex: &#39;updated_date|desc&#39;.
    # @option opts [String] :filter FQL query to filter notifications by. Possible filter properties are: [id cid user_uuid created_date exposure_date rule.id rule.name rule.topic notification_id source_category site site_id author author_id user_id user_name credentials_url credentials_domain credentials_ip email domain hash_type display_name full_name user_ip phone_number company job_position file.name file.complete_data_set file.download_urls location.postal_code location.city location.state location.federal_district location.federal_admin_region location.country_code social.twitter_id social.facebook_id social.vk_id social.vk_token social.aim_id social.icq_id social.msn_id social.instagram_id social.skype_id financial.credit_card financial.bank_account financial.crypto_currency_addresses login_id _all]
    # @option opts [String] :q Free text search across all indexed fields.
    # @return [DomainQueryResponse]
    def query_notifications_exposed_data_records_v1(opts = {})
      data, _status_code, _headers = query_notifications_exposed_data_records_v1_with_http_info(opts)
      data
    end

    # Query notifications exposed data records based on provided criteria. Use the IDs from this response to get the notification +entities on GET /entities/notifications-exposed-data-records/v1
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Starting index of overall result set from which to return ids.
    # @option opts [Integer] :limit Number of IDs to return. Offset + limit should NOT be above 10K.
    # @option opts [String] :sort Possible order by fields: created_date, updated_date. Ex: &#39;updated_date|desc&#39;.
    # @option opts [String] :filter FQL query to filter notifications by. Possible filter properties are: [id cid user_uuid created_date exposure_date rule.id rule.name rule.topic notification_id source_category site site_id author author_id user_id user_name credentials_url credentials_domain credentials_ip email domain hash_type display_name full_name user_ip phone_number company job_position file.name file.complete_data_set file.download_urls location.postal_code location.city location.state location.federal_district location.federal_admin_region location.country_code social.twitter_id social.facebook_id social.vk_id social.vk_token social.aim_id social.icq_id social.msn_id social.instagram_id social.skype_id financial.credit_card financial.bank_account financial.crypto_currency_addresses login_id _all]
    # @option opts [String] :q Free text search across all indexed fields.
    # @return [Array<(DomainQueryResponse, Integer, Hash)>] DomainQueryResponse data, response status code and response headers
    def query_notifications_exposed_data_records_v1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReconApi.query_notifications_exposed_data_records_v1 ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 500
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ReconApi.query_notifications_exposed_data_records_v1, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ReconApi.query_notifications_exposed_data_records_v1, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/recon/queries/notifications-exposed-data-records/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ReconApi.query_notifications_exposed_data_records_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReconApi#query_notifications_exposed_data_records_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query notifications based on provided criteria. Use the IDs from this response to get the notification +entities on GET /entities/notifications/v1, GET /entities/notifications-detailed/v1, +GET /entities/notifications-translated/v1 or GET /entities/notifications-detailed-translated/v1.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Starting index of overall result set from which to return IDs.
    # @option opts [Integer] :limit Number of IDs to return. Offset + limit should NOT be above 10K.
    # @option opts [String] :sort Possible order by fields: &#x60;created_date&#x60;, &#x60;updated_date&#x60;. Ex: &#x60;updated_date|desc&#x60;.
    # @option opts [String] :filter FQL query to filter notifications by. Possible filter properties are: [id cid user_uuid status rule_id rule_name rule_topic rule_priority item_type item_site typosquatting.id typosquatting.unicode_format typosquatting.punycode_format typosquatting.parent_domain.id typosquatting.parent_domain.unicode_format typosquatting.parent_domain.punycode_format typosquatting.base_domain.id typosquatting.base_domain.unicode_format typosquatting.base_domain.punycode_format typosquatting.base_domain.is_registered typosquatting.base_domain.whois.registrar.name typosquatting.base_domain.whois.registrar.status typosquatting.base_domain.whois.registrant.email typosquatting.base_domain.whois.registrant.name typosquatting.base_domain.whois.registrant.org typosquatting.base_domain.whois.name_servers created_date updated_date assigned_to_uuid]
    # @option opts [String] :q Free text search across all indexed fields.
    # @return [DomainQueryResponse]
    def query_notifications_v1(opts = {})
      data, _status_code, _headers = query_notifications_v1_with_http_info(opts)
      data
    end

    # Query notifications based on provided criteria. Use the IDs from this response to get the notification +entities on GET /entities/notifications/v1, GET /entities/notifications-detailed/v1, +GET /entities/notifications-translated/v1 or GET /entities/notifications-detailed-translated/v1.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Starting index of overall result set from which to return IDs.
    # @option opts [Integer] :limit Number of IDs to return. Offset + limit should NOT be above 10K.
    # @option opts [String] :sort Possible order by fields: &#x60;created_date&#x60;, &#x60;updated_date&#x60;. Ex: &#x60;updated_date|desc&#x60;.
    # @option opts [String] :filter FQL query to filter notifications by. Possible filter properties are: [id cid user_uuid status rule_id rule_name rule_topic rule_priority item_type item_site typosquatting.id typosquatting.unicode_format typosquatting.punycode_format typosquatting.parent_domain.id typosquatting.parent_domain.unicode_format typosquatting.parent_domain.punycode_format typosquatting.base_domain.id typosquatting.base_domain.unicode_format typosquatting.base_domain.punycode_format typosquatting.base_domain.is_registered typosquatting.base_domain.whois.registrar.name typosquatting.base_domain.whois.registrar.status typosquatting.base_domain.whois.registrant.email typosquatting.base_domain.whois.registrant.name typosquatting.base_domain.whois.registrant.org typosquatting.base_domain.whois.name_servers created_date updated_date assigned_to_uuid]
    # @option opts [String] :q Free text search across all indexed fields.
    # @return [Array<(DomainQueryResponse, Integer, Hash)>] DomainQueryResponse data, response status code and response headers
    def query_notifications_v1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReconApi.query_notifications_v1 ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 500
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ReconApi.query_notifications_v1, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ReconApi.query_notifications_v1, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/recon/queries/notifications/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ReconApi.query_notifications_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReconApi#query_notifications_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query monitoring rules based on provided criteria. Use the IDs from this response to fetch the rules on /entities/rules/v1.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Starting index of overall result set from which to return IDs.
    # @option opts [Integer] :limit Number of IDs to return. Offset + limit should NOT be above 10K.
    # @option opts [String] :sort Possible order by fields: created_timestamp, last_updated_timestamp. Ex: &#x60;last_updated_timestamp|desc&#x60;.
    # @option opts [String] :filter FQL query to filter rules by. Possible filter properties are: [id cid user_uuid topic priority permissions status filter breach_monitoring_enabled substring_matching_enabled created_timestamp last_updated_timestamp].
    # @option opts [String] :q Free text search across all indexed fields.
    # @return [DomainRuleQueryResponseV1]
    def query_rules_v1(opts = {})
      data, _status_code, _headers = query_rules_v1_with_http_info(opts)
      data
    end

    # Query monitoring rules based on provided criteria. Use the IDs from this response to fetch the rules on /entities/rules/v1.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Starting index of overall result set from which to return IDs.
    # @option opts [Integer] :limit Number of IDs to return. Offset + limit should NOT be above 10K.
    # @option opts [String] :sort Possible order by fields: created_timestamp, last_updated_timestamp. Ex: &#x60;last_updated_timestamp|desc&#x60;.
    # @option opts [String] :filter FQL query to filter rules by. Possible filter properties are: [id cid user_uuid topic priority permissions status filter breach_monitoring_enabled substring_matching_enabled created_timestamp last_updated_timestamp].
    # @option opts [String] :q Free text search across all indexed fields.
    # @return [Array<(DomainRuleQueryResponseV1, Integer, Hash)>] DomainRuleQueryResponseV1 data, response status code and response headers
    def query_rules_v1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReconApi.query_rules_v1 ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 500
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ReconApi.query_rules_v1, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ReconApi.query_rules_v1, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/recon/queries/rules/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainRuleQueryResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ReconApi.query_rules_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReconApi#query_rules_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an action for a monitoring rule.
    # @param body [DomainUpdateActionRequest] 
    # @param [Hash] opts the optional parameters
    # @return [DomainActionEntitiesResponseV1]
    def update_action_v1(body, opts = {})
      data, _status_code, _headers = update_action_v1_with_http_info(body, opts)
      data
    end

    # Update an action for a monitoring rule.
    # @param body [DomainUpdateActionRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainActionEntitiesResponseV1, Integer, Hash)>] DomainActionEntitiesResponseV1 data, response status code and response headers
    def update_action_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReconApi.update_action_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ReconApi.update_action_v1"
      end
      # resource path
      local_var_path = '/recon/entities/actions/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainActionEntitiesResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ReconApi.update_action_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReconApi#update_action_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update notification status or assignee. Accepts bulk requests
    # @param body [Array<DomainUpdateNotificationRequestV1>] 
    # @param [Hash] opts the optional parameters
    # @return [DomainNotificationEntitiesResponseV1]
    def update_notifications_v1(body, opts = {})
      data, _status_code, _headers = update_notifications_v1_with_http_info(body, opts)
      data
    end

    # Update notification status or assignee. Accepts bulk requests
    # @param body [Array<DomainUpdateNotificationRequestV1>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainNotificationEntitiesResponseV1, Integer, Hash)>] DomainNotificationEntitiesResponseV1 data, response status code and response headers
    def update_notifications_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReconApi.update_notifications_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ReconApi.update_notifications_v1"
      end
      # resource path
      local_var_path = '/recon/entities/notifications/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainNotificationEntitiesResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ReconApi.update_notifications_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReconApi#update_notifications_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update monitoring rules.
    # @param body [Array<DomainUpdateRuleRequestV1>] 
    # @param [Hash] opts the optional parameters
    # @return [DomainRulesEntitiesResponseV1]
    def update_rules_v1(body, opts = {})
      data, _status_code, _headers = update_rules_v1_with_http_info(body, opts)
      data
    end

    # Update monitoring rules.
    # @param body [Array<DomainUpdateRuleRequestV1>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainRulesEntitiesResponseV1, Integer, Hash)>] DomainRulesEntitiesResponseV1 data, response status code and response headers
    def update_rules_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReconApi.update_rules_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ReconApi.update_rules_v1"
      end
      # resource path
      local_var_path = '/recon/entities/rules/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainRulesEntitiesResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ReconApi.update_rules_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReconApi#update_rules_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
