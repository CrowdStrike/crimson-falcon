=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'cgi'

module Falcon
  class ASPM
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new relay node
    # @param body [TypesExecutorNode]
    # @param [Hash] opts the optional parameters
    # @return [TypesExecutorNode]
    def create_executor_node(body, opts = {})
      data, _status_code, _headers = create_executor_node_with_http_info(body, opts)
      data
    end

    # Create a new relay node
    # @param body [TypesExecutorNode]
    # @param [Hash] opts the optional parameters
    # @return [Array<(TypesExecutorNode, Integer, Hash)>] TypesExecutorNode data, response status code and response headers
    def create_executor_node_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ASPM.create_executor_node ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ASPM.create_executor_node"
      end
      # resource path
      local_var_path = '/aspm-api-gateway/api/v1/executor_nodes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TypesExecutorNode'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ASPM.create_executor_node",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ASPM#create_executor_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new integration
    # @param body [TypesCreateIntegrationRequest]
    # @param [Hash] opts the optional parameters
    # @return [TypesIntegrationResponse]
    def create_integration(body, opts = {})
      data, _status_code, _headers = create_integration_with_http_info(body, opts)
      data
    end

    # Create a new integration
    # @param body [TypesCreateIntegrationRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(TypesIntegrationResponse, Integer, Hash)>] TypesIntegrationResponse data, response status code and response headers
    def create_integration_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ASPM.create_integration ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ASPM.create_integration"
      end
      # resource path
      local_var_path = '/aspm-api-gateway/api/v1/integrations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TypesIntegrationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ASPM.create_integration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ASPM#create_integration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create new integration task.
    # @param body [TypesCreateIntegrationTaskRequest]
    # @param [Hash] opts the optional parameters
    # @return [TypesIntegrationTaskResponse]
    def create_integration_task(body, opts = {})
      data, _status_code, _headers = create_integration_task_with_http_info(body, opts)
      data
    end

    # Create new integration task.
    # @param body [TypesCreateIntegrationTaskRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(TypesIntegrationTaskResponse, Integer, Hash)>] TypesIntegrationTaskResponse data, response status code and response headers
    def create_integration_task_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ASPM.create_integration_task ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ASPM.create_integration_task"
      end
      # resource path
      local_var_path = '/aspm-api-gateway/api/v1/integration_tasks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TypesIntegrationTaskResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ASPM.create_integration_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ASPM#create_integration_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a relay node
    # @param id [Integer]
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_executor_node(id, opts = {})
      delete_executor_node_with_http_info(id, opts)
      nil
    end

    # Delete a relay node
    # @param id [Integer]
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_executor_node_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ASPM.delete_executor_node ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ASPM.delete_executor_node"
      end
      pattern = Regexp.new(/[0-9]+/)
      if @api_client.config.client_side_validation && id !~ pattern
        fail ArgumentError, "invalid value for 'id' when calling ASPM.delete_executor_node, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/aspm-api-gateway/api/v1/executor_nodes/{ID}'.sub('{' + 'ID' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ASPM.delete_executor_node",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ASPM#delete_executor_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an existing integration by its ID
    # @param id [Integer]
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_integration(id, opts = {})
      delete_integration_with_http_info(id, opts)
      nil
    end

    # Delete an existing integration by its ID
    # @param id [Integer]
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_integration_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ASPM.delete_integration ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ASPM.delete_integration"
      end
      pattern = Regexp.new(/[0-9]+/)
      if @api_client.config.client_side_validation && id !~ pattern
        fail ArgumentError, "invalid value for 'id' when calling ASPM.delete_integration, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/aspm-api-gateway/api/v1/integrations/{ID}'.sub('{' + 'ID' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ASPM.delete_integration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ASPM#delete_integration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an existing integration task by its ID
    # @param id [Integer]
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_integration_task(id, opts = {})
      delete_integration_task_with_http_info(id, opts)
      nil
    end

    # Delete an existing integration task by its ID
    # @param id [Integer]
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_integration_task_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ASPM.delete_integration_task ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ASPM.delete_integration_task"
      end
      pattern = Regexp.new(/[0-9]+/)
      if @api_client.config.client_side_validation && id !~ pattern
        fail ArgumentError, "invalid value for 'id' when calling ASPM.delete_integration_task, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/aspm-api-gateway/api/v1/integration_tasks/{ID}'.sub('{' + 'ID' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ASPM.delete_integration_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ASPM#delete_integration_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove existing tags
    # @param body [TypesEditTagRequest]
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tags(body, opts = {})
      delete_tags_with_http_info(body, opts)
      nil
    end

    # Remove existing tags
    # @param body [TypesEditTagRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_tags_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ASPM.delete_tags ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ASPM.delete_tags"
      end
      # resource path
      local_var_path = '/aspm-api-gateway/api/v1/tags'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ASPM.delete_tags",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ASPM#delete_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Execute a query. The syntax used is identical to that of the query page.
    # @param body [TypesQueryRequest]  **params details:** - selectFields: - **fields** - For filtering relevant fields only. - **withoutServices** - Default is set to **true**, you will not receive information about the services. If you want to get the relevant service, set to **false**. - **serviceFields**-  For filtering relevant fields of the service (if you chose to get it)
    # @param [Hash] opts the optional parameters
    # @return [TypesQueryResult]
    def execute_query(body, opts = {})
      data, _status_code, _headers = execute_query_with_http_info(body, opts)
      data
    end

    # Execute a query. The syntax used is identical to that of the query page.
    # @param body [TypesQueryRequest]  **params details:** - selectFields: - **fields** - For filtering relevant fields only. - **withoutServices** - Default is set to **true**, you will not receive information about the services. If you want to get the relevant service, set to **false**. - **serviceFields**-  For filtering relevant fields of the service (if you chose to get it)
    # @param [Hash] opts the optional parameters
    # @return [Array<(TypesQueryResult, Integer, Hash)>] TypesQueryResult data, response status code and response headers
    def execute_query_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ASPM.execute_query ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ASPM.execute_query"
      end
      # resource path
      local_var_path = '/aspm-api-gateway/api/v1/query'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TypesQueryResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ASPM.execute_query",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ASPM#execute_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all the relay nodes
    # @param node_type [String]
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :integration_type
    # @return [TypesListExecutorNodesResponse]
    def get_executor_nodes(node_type, opts = {})
      data, _status_code, _headers = get_executor_nodes_with_http_info(node_type, opts)
      data
    end

    # Get all the relay nodes
    # @param node_type [String]
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :integration_type
    # @return [Array<(TypesListExecutorNodesResponse, Integer, Hash)>] TypesListExecutorNodesResponse data, response status code and response headers
    def get_executor_nodes_with_http_info(node_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ASPM.get_executor_nodes ...'
      end
      # verify the required parameter 'node_type' is set
      if @api_client.config.client_side_validation && node_type.nil?
        fail ArgumentError, "Missing the required parameter 'node_type' when calling ASPM.get_executor_nodes"
      end
      # resource path
      local_var_path = '/aspm-api-gateway/api/v1/executor_nodes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'node_type'] = node_type
      query_params[:'integration_type'] = opts[:'integration_type'] if !opts[:'integration_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TypesListExecutorNodesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ASPM.get_executor_nodes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ASPM#get_executor_nodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all the integration tasks
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :integration_task_type
    # @option opts [String] :category
    # @return [TypesListIntegrationTasksResponse]
    def get_integration_tasks(opts = {})
      data, _status_code, _headers = get_integration_tasks_with_http_info(opts)
      data
    end

    # Get all the integration tasks
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :integration_task_type
    # @option opts [String] :category
    # @return [Array<(TypesListIntegrationTasksResponse, Integer, Hash)>] TypesListIntegrationTasksResponse data, response status code and response headers
    def get_integration_tasks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ASPM.get_integration_tasks ...'
      end
      # resource path
      local_var_path = '/aspm-api-gateway/api/v1/integration_tasks'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'integration_task_type'] = opts[:'integration_task_type'] if !opts[:'integration_task_type'].nil?
      query_params[:'category'] = opts[:'category'] if !opts[:'category'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TypesListIntegrationTasksResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ASPM.get_integration_tasks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ASPM#get_integration_tasks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all the integration types
    # @param [Hash] opts the optional parameters
    # @return [TypesListIntegrationTypesResponse]
    def get_integration_types(opts = {})
      data, _status_code, _headers = get_integration_types_with_http_info(opts)
      data
    end

    # Get all the integration types
    # @param [Hash] opts the optional parameters
    # @return [Array<(TypesListIntegrationTypesResponse, Integer, Hash)>] TypesListIntegrationTypesResponse data, response status code and response headers
    def get_integration_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ASPM.get_integration_types ...'
      end
      # resource path
      local_var_path = '/aspm-api-gateway/api/v1/integration_types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TypesListIntegrationTypesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ASPM.get_integration_types",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ASPM#get_integration_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of all the integrations
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :integration_type
    # @option opts [String] :category
    # @return [TypesListIntegrationsResponse]
    def get_integrations(opts = {})
      data, _status_code, _headers = get_integrations_with_http_info(opts)
      data
    end

    # Get a list of all the integrations
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :integration_type
    # @option opts [String] :category
    # @return [Array<(TypesListIntegrationsResponse, Integer, Hash)>] TypesListIntegrationsResponse data, response status code and response headers
    def get_integrations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ASPM.get_integrations ...'
      end
      # resource path
      local_var_path = '/aspm-api-gateway/api/v1/integrations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'integration_type'] = opts[:'integration_type'] if !opts[:'integration_type'].nil?
      query_params[:'category'] = opts[:'category'] if !opts[:'category'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TypesListIntegrationsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ASPM.get_integrations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ASPM#get_integrations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the different types of violation
    # @param body [TypesGenericUserFacingRequest]
    # @param [Hash] opts the optional parameters
    # @return [TypesGetViolationTypesResponse]
    def get_service_violation_types(body, opts = {})
      data, _status_code, _headers = get_service_violation_types_with_http_info(body, opts)
      data
    end

    # Get the different types of violation
    # @param body [TypesGenericUserFacingRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(TypesGetViolationTypesResponse, Integer, Hash)>] TypesGetViolationTypesResponse data, response status code and response headers
    def get_service_violation_types_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ASPM.get_service_violation_types ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ASPM.get_service_violation_types"
      end
      # resource path
      local_var_path = '/aspm-api-gateway/api/v1/services/violations/types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TypesGetViolationTypesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ASPM.get_service_violation_types",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ASPM#get_service_violation_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the total amount of existing services
    # @param body [TypesGetServicesRequest]
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_services_count(body, opts = {})
      get_services_count_with_http_info(body, opts)
      nil
    end

    # Get the total amount of existing services
    # @param body [TypesGetServicesRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_services_count_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ASPM.get_services_count ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ASPM.get_services_count"
      end
      # resource path
      local_var_path = '/aspm-api-gateway/api/v1/services/count'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ASPM.get_services_count",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ASPM#get_services_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all the tags
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :is_unique
    # @option opts [String] :tag_name
    # @option opts [Integer] :limit
    # @option opts [Integer] :offset
    # @option opts [Array<String>] :name
    # @return [TypesTagsDataResponse]
    def get_tags(opts = {})
      data, _status_code, _headers = get_tags_with_http_info(opts)
      data
    end

    # Get all the tags
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :is_unique
    # @option opts [String] :tag_name
    # @option opts [Integer] :limit
    # @option opts [Integer] :offset
    # @option opts [Array<String>] :name
    # @return [Array<(TypesTagsDataResponse, Integer, Hash)>] TypesTagsDataResponse data, response status code and response headers
    def get_tags_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ASPM.get_tags ...'
      end
      # resource path
      local_var_path = '/aspm-api-gateway/api/v1/tags'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'isUnique'] = opts[:'is_unique'] if !opts[:'is_unique'].nil?
      query_params[:'tagName'] = opts[:'tag_name'] if !opts[:'tag_name'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'name'] = @api_client.build_collection_param(opts[:'name'], :csv) if !opts[:'name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TypesTagsDataResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ASPM.get_tags",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ASPM#get_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Run an integration task by its ID
    # @param id [Integer]
    # @param body [TypesRunIntegrationTaskRequest]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category
    # @return [TypesIntegrationTaskTestConnectionResponse]
    def run_integration_task(id, body, opts = {})
      data, _status_code, _headers = run_integration_task_with_http_info(id, body, opts)
      data
    end

    # Run an integration task by its ID
    # @param id [Integer]
    # @param body [TypesRunIntegrationTaskRequest]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category
    # @return [Array<(TypesIntegrationTaskTestConnectionResponse, Integer, Hash)>] TypesIntegrationTaskTestConnectionResponse data, response status code and response headers
    def run_integration_task_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ASPM.run_integration_task ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ASPM.run_integration_task"
      end
      pattern = Regexp.new(/[0-9]+/)
      if @api_client.config.client_side_validation && id !~ pattern
        fail ArgumentError, "invalid value for 'id' when calling ASPM.run_integration_task, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ASPM.run_integration_task"
      end
      # resource path
      local_var_path = '/aspm-api-gateway/api/v1/integration_tasks/{ID}/run'.sub('{' + 'ID' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'category'] = opts[:'category'] if !opts[:'category'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TypesIntegrationTaskTestConnectionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ASPM.run_integration_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ASPM#run_integration_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :ql_filters
    # @option opts [Integer] :limit
    # @option opts [Integer] :offset
    # @option opts [String] :order_by
    # @option opts [String] :direction
    # @return [TypesServiceNowDeploymentsResponse]
    def service_now_get_deployments(opts = {})
      data, _status_code, _headers = service_now_get_deployments_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :ql_filters
    # @option opts [Integer] :limit
    # @option opts [Integer] :offset
    # @option opts [String] :order_by
    # @option opts [String] :direction
    # @return [Array<(TypesServiceNowDeploymentsResponse, Integer, Hash)>] TypesServiceNowDeploymentsResponse data, response status code and response headers
    def service_now_get_deployments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ASPM.service_now_get_deployments ...'
      end
      # resource path
      local_var_path = '/aspm-api-gateway/api/v1/servicenow/deployments'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ql_filters'] = opts[:'ql_filters'] if !opts[:'ql_filters'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TypesServiceNowDeploymentsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ASPM.service_now_get_deployments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ASPM#service_now_get_deployments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :ql_filters
    # @option opts [Integer] :limit
    # @option opts [Integer] :offset
    # @option opts [String] :order_by
    # @option opts [String] :direction
    # @return [TypesServiceNowServicesResponse]
    def service_now_get_services(opts = {})
      data, _status_code, _headers = service_now_get_services_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :ql_filters
    # @option opts [Integer] :limit
    # @option opts [Integer] :offset
    # @option opts [String] :order_by
    # @option opts [String] :direction
    # @return [Array<(TypesServiceNowServicesResponse, Integer, Hash)>] TypesServiceNowServicesResponse data, response status code and response headers
    def service_now_get_services_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ASPM.service_now_get_services ...'
      end
      # resource path
      local_var_path = '/aspm-api-gateway/api/v1/servicenow/services'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ql_filters'] = opts[:'ql_filters'] if !opts[:'ql_filters'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TypesServiceNowServicesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ASPM.service_now_get_services",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ASPM#service_now_get_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing relay node
    # @param body [TypesExecutorNode]
    # @param [Hash] opts the optional parameters
    # @return [TypesExecutorNode]
    def update_executor_node(body, opts = {})
      data, _status_code, _headers = update_executor_node_with_http_info(body, opts)
      data
    end

    # Update an existing relay node
    # @param body [TypesExecutorNode]
    # @param [Hash] opts the optional parameters
    # @return [Array<(TypesExecutorNode, Integer, Hash)>] TypesExecutorNode data, response status code and response headers
    def update_executor_node_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ASPM.update_executor_node ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ASPM.update_executor_node"
      end
      # resource path
      local_var_path = '/aspm-api-gateway/api/v1/executor_nodes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TypesExecutorNode'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ASPM.update_executor_node",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ASPM#update_executor_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing integration by its ID
    # @param id [Integer]
    # @param body [TypesUpdateIntegrationRequest]
    # @param [Hash] opts the optional parameters
    # @return [TypesIntegrationResponse]
    def update_integration(id, body, opts = {})
      data, _status_code, _headers = update_integration_with_http_info(id, body, opts)
      data
    end

    # Update an existing integration by its ID
    # @param id [Integer]
    # @param body [TypesUpdateIntegrationRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(TypesIntegrationResponse, Integer, Hash)>] TypesIntegrationResponse data, response status code and response headers
    def update_integration_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ASPM.update_integration ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ASPM.update_integration"
      end
      pattern = Regexp.new(/[0-9]+/)
      if @api_client.config.client_side_validation && id !~ pattern
        fail ArgumentError, "invalid value for 'id' when calling ASPM.update_integration, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ASPM.update_integration"
      end
      # resource path
      local_var_path = '/aspm-api-gateway/api/v1/integrations/{ID}'.sub('{' + 'ID' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TypesIntegrationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ASPM.update_integration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ASPM#update_integration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing integration task by its ID
    # @param id [Integer]
    # @param body [TypesUpdateIntegrationTaskRequest]
    # @param [Hash] opts the optional parameters
    # @return [TypesIntegrationTaskResponse]
    def update_integration_task(id, body, opts = {})
      data, _status_code, _headers = update_integration_task_with_http_info(id, body, opts)
      data
    end

    # Update an existing integration task by its ID
    # @param id [Integer]
    # @param body [TypesUpdateIntegrationTaskRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(TypesIntegrationTaskResponse, Integer, Hash)>] TypesIntegrationTaskResponse data, response status code and response headers
    def update_integration_task_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ASPM.update_integration_task ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ASPM.update_integration_task"
      end
      pattern = Regexp.new(/[0-9]+/)
      if @api_client.config.client_side_validation && id !~ pattern
        fail ArgumentError, "invalid value for 'id' when calling ASPM.update_integration_task, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ASPM.update_integration_task"
      end
      # resource path
      local_var_path = '/aspm-api-gateway/api/v1/integration_tasks/{ID}'.sub('{' + 'ID' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TypesIntegrationTaskResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ASPM.update_integration_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ASPM#update_integration_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Business Applications
    # @param body [TypesUpsertBusinessApplicationRequest]
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def upsert_business_applications(body, opts = {})
      upsert_business_applications_with_http_info(body, opts)
      nil
    end

    # Create or Update Business Applications
    # @param body [TypesUpsertBusinessApplicationRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def upsert_business_applications_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ASPM.upsert_business_applications ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ASPM.upsert_business_applications"
      end
      # resource path
      local_var_path = '/aspm-api-gateway/api/v1/business_applications'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ASPM.upsert_business_applications",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ASPM#upsert_business_applications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create new or update existing tag. You can update unique tags table or regular tags table
    # @param body [TypesEditUniqueTagRequest]
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def upsert_tags(body, opts = {})
      upsert_tags_with_http_info(body, opts)
      nil
    end

    # Create new or update existing tag. You can update unique tags table or regular tags table
    # @param body [TypesEditUniqueTagRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def upsert_tags_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ASPM.upsert_tags ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ASPM.upsert_tags"
      end
      # resource path
      local_var_path = '/aspm-api-gateway/api/v1/tags'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ASPM.upsert_tags",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ASPM#upsert_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
