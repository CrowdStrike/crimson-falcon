=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <https://unlicense.org>

=end

require 'cgi'

module Falcon
  class OverwatchDashboardApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get the total number of detections pushed across all customers
    # @param filter [String] An FQL filter string
    # @param [Hash] opts the optional parameters
    # @return [MsaFacetsResponse]
    def aggregates_detections_global_counts(filter, opts = {})
      data, _status_code, _headers = aggregates_detections_global_counts_with_http_info(filter, opts)
      data
    end

    # Get the total number of detections pushed across all customers
    # @param filter [String] An FQL filter string
    # @param [Hash] opts the optional parameters
    # @return [Array<(MsaFacetsResponse, Integer, Hash)>] MsaFacetsResponse data, response status code and response headers
    def aggregates_detections_global_counts_with_http_info(filter, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OverwatchDashboardApi.aggregates_detections_global_counts ...'
      end
      # verify the required parameter 'filter' is set
      if @api_client.config.client_side_validation && filter.nil?
        fail ArgumentError, "Missing the required parameter 'filter' when calling OverwatchDashboardApi.aggregates_detections_global_counts"
      end
      # resource path
      local_var_path = '/overwatch-dashboards/aggregates/detections-global-counts/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = filter

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaFacetsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"OverwatchDashboardApi.aggregates_detections_global_counts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OverwatchDashboardApi#aggregates_detections_global_counts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get aggregate OverWatch detection event info by providing an aggregate query
    # @param body [Array<MsaAggregateQueryRequest>]
    # @param [Hash] opts the optional parameters
    # @return [MsaAggregatesResponse]
    def aggregates_events(body, opts = {})
      data, _status_code, _headers = aggregates_events_with_http_info(body, opts)
      data
    end

    # Get aggregate OverWatch detection event info by providing an aggregate query
    # @param body [Array<MsaAggregateQueryRequest>]
    # @param [Hash] opts the optional parameters
    # @return [Array<(MsaAggregatesResponse, Integer, Hash)>] MsaAggregatesResponse data, response status code and response headers
    def aggregates_events_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OverwatchDashboardApi.aggregates_events ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling OverwatchDashboardApi.aggregates_events"
      end
      # resource path
      local_var_path = '/overwatch-dashboards/aggregates/events/GET/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'MsaAggregatesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"OverwatchDashboardApi.aggregates_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OverwatchDashboardApi#aggregates_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get OverWatch detection event collection info by providing an aggregate query
    # @param body [Array<MsaAggregateQueryRequest>]
    # @param [Hash] opts the optional parameters
    # @return [MsaAggregatesResponse]
    def aggregates_events_collections(body, opts = {})
      data, _status_code, _headers = aggregates_events_collections_with_http_info(body, opts)
      data
    end

    # Get OverWatch detection event collection info by providing an aggregate query
    # @param body [Array<MsaAggregateQueryRequest>]
    # @param [Hash] opts the optional parameters
    # @return [Array<(MsaAggregatesResponse, Integer, Hash)>] MsaAggregatesResponse data, response status code and response headers
    def aggregates_events_collections_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OverwatchDashboardApi.aggregates_events_collections ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling OverwatchDashboardApi.aggregates_events_collections"
      end
      # resource path
      local_var_path = '/overwatch-dashboards/aggregates/events-collections/GET/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'MsaAggregatesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"OverwatchDashboardApi.aggregates_events_collections",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OverwatchDashboardApi#aggregates_events_collections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the total number of incidents pushed across all customers
    # @param filter [String] An FQL filter string
    # @param [Hash] opts the optional parameters
    # @return [MsaFacetsResponse]
    def aggregates_incidents_global_counts(filter, opts = {})
      data, _status_code, _headers = aggregates_incidents_global_counts_with_http_info(filter, opts)
      data
    end

    # Get the total number of incidents pushed across all customers
    # @param filter [String] An FQL filter string
    # @param [Hash] opts the optional parameters
    # @return [Array<(MsaFacetsResponse, Integer, Hash)>] MsaFacetsResponse data, response status code and response headers
    def aggregates_incidents_global_counts_with_http_info(filter, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OverwatchDashboardApi.aggregates_incidents_global_counts ...'
      end
      # verify the required parameter 'filter' is set
      if @api_client.config.client_side_validation && filter.nil?
        fail ArgumentError, "Missing the required parameter 'filter' when calling OverwatchDashboardApi.aggregates_incidents_global_counts"
      end
      # resource path
      local_var_path = '/overwatch-dashboards/aggregates/incidents-global-counts/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = filter

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaFacetsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"OverwatchDashboardApi.aggregates_incidents_global_counts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OverwatchDashboardApi#aggregates_incidents_global_counts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the total number of OverWatch events across all customers
    # @param filter [String] An FQL filter string
    # @param [Hash] opts the optional parameters
    # @return [MsaFacetsResponse]
    def aggregates_ow_events_global_counts(filter, opts = {})
      data, _status_code, _headers = aggregates_ow_events_global_counts_with_http_info(filter, opts)
      data
    end

    # Get the total number of OverWatch events across all customers
    # @param filter [String] An FQL filter string
    # @param [Hash] opts the optional parameters
    # @return [Array<(MsaFacetsResponse, Integer, Hash)>] MsaFacetsResponse data, response status code and response headers
    def aggregates_ow_events_global_counts_with_http_info(filter, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OverwatchDashboardApi.aggregates_ow_events_global_counts ...'
      end
      # verify the required parameter 'filter' is set
      if @api_client.config.client_side_validation && filter.nil?
        fail ArgumentError, "Missing the required parameter 'filter' when calling OverwatchDashboardApi.aggregates_ow_events_global_counts"
      end
      # resource path
      local_var_path = '/overwatch-dashboards/aggregates/ow-events-global-counts/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = filter

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaFacetsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"OverwatchDashboardApi.aggregates_ow_events_global_counts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OverwatchDashboardApi#aggregates_ow_events_global_counts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
