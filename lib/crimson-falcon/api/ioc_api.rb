=begin
#CrowdStrike API Specification

#Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.

The version of the OpenAPI document: 2023-05-30T23:10:32Z

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module Falcon
  class IocApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Actions by ids.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :ids The ids of the Actions to retrieve
    # @return [ApiActionRespV1]
    def action_get_v1(opts = {})
      data, _status_code, _headers = action_get_v1_with_http_info(opts)
      data
    end

    # Get Actions by ids.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :ids The ids of the Actions to retrieve
    # @return [Array<(ApiActionRespV1, Integer, Hash)>] ApiActionRespV1 data, response status code and response headers
    def action_get_v1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IocApi.action_get_v1 ...'
      end
      # resource path
      local_var_path = '/iocs/entities/actions/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :multi) if !opts[:'ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiActionRespV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IocApi.action_get_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IocApi#action_get_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query Actions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset Starting index of overall result set from which to return ids.
    # @option opts [Integer] :limit Number of ids to return.
    # @return [ApiIndicatorQueryRespV1]
    def action_query_v1(opts = {})
      data, _status_code, _headers = action_query_v1_with_http_info(opts)
      data
    end

    # Query Actions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset Starting index of overall result set from which to return ids.
    # @option opts [Integer] :limit Number of ids to return.
    # @return [Array<(ApiIndicatorQueryRespV1, Integer, Hash)>] ApiIndicatorQueryRespV1 data, response status code and response headers
    def action_query_v1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IocApi.action_query_v1 ...'
      end
      # resource path
      local_var_path = '/iocs/queries/actions/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiIndicatorQueryRespV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IocApi.action_query_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IocApi#action_query_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Launch an indicators report creation job
    # @param body [ApiIndicatorsReportRequest] 
    # @param [Hash] opts the optional parameters
    # @return [MsaEntitiesResponse]
    def get_indicators_report(body, opts = {})
      data, _status_code, _headers = get_indicators_report_with_http_info(body, opts)
      data
    end

    # Launch an indicators report creation job
    # @param body [ApiIndicatorsReportRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MsaEntitiesResponse, Integer, Hash)>] MsaEntitiesResponse data, response status code and response headers
    def get_indicators_report_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IocApi.get_indicators_report ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling IocApi.get_indicators_report"
      end
      # resource path
      local_var_path = '/iocs/entities/indicators-reports/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'MsaEntitiesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IocApi.get_indicators_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IocApi#get_indicators_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Indicators aggregates as specified via json in the request body.
    # @param body [MsaAggregateQueryRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter The filter to narrow down the aggregation data
    # @option opts [Boolean] :from_parent The filter for returning either only indicators for the request customer or its MSSP parents
    # @return [MsaAggregatesResponse]
    def indicator_aggregate_v1(body, opts = {})
      data, _status_code, _headers = indicator_aggregate_v1_with_http_info(body, opts)
      data
    end

    # Get Indicators aggregates as specified via json in the request body.
    # @param body [MsaAggregateQueryRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter The filter to narrow down the aggregation data
    # @option opts [Boolean] :from_parent The filter for returning either only indicators for the request customer or its MSSP parents
    # @return [Array<(MsaAggregatesResponse, Integer, Hash)>] MsaAggregatesResponse data, response status code and response headers
    def indicator_aggregate_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IocApi.indicator_aggregate_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling IocApi.indicator_aggregate_v1"
      end
      # resource path
      local_var_path = '/iocs/aggregates/indicators/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'from_parent'] = opts[:'from_parent'] if !opts[:'from_parent'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'MsaAggregatesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IocApi.indicator_aggregate_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IocApi#indicator_aggregate_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Combined for Indicators.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter The filter expression that should be used to limit the results.
    # @option opts [Integer] :offset The offset to start retrieving records from. Offset and After params are mutually exclusive. If none provided then scrolling will be used by default. To access more than 10k iocs, use the &#39;after&#39; parameter instead of &#39;offset&#39;.
    # @option opts [Integer] :limit The maximum records to return.
    # @option opts [String] :sort The sort expression that should be used to sort the results.
    # @option opts [String] :after A pagination token used with the &#x60;limit&#x60; parameter to manage pagination of results. On your first request, don&#39;t provide an &#39;after&#39; token. On subsequent requests, provide the &#39;after&#39; token from the previous response to continue from that place in the results. To access more than 10k indicators, use the &#39;after&#39; parameter instead of &#39;offset&#39;.
    # @option opts [Boolean] :from_parent The filter for returning either only indicators for the request customer or its MSSP parents
    # @return [ApiIndicatorRespV1]
    def indicator_combined_v1(opts = {})
      data, _status_code, _headers = indicator_combined_v1_with_http_info(opts)
      data
    end

    # Get Combined for Indicators.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter The filter expression that should be used to limit the results.
    # @option opts [Integer] :offset The offset to start retrieving records from. Offset and After params are mutually exclusive. If none provided then scrolling will be used by default. To access more than 10k iocs, use the &#39;after&#39; parameter instead of &#39;offset&#39;.
    # @option opts [Integer] :limit The maximum records to return.
    # @option opts [String] :sort The sort expression that should be used to sort the results.
    # @option opts [String] :after A pagination token used with the &#x60;limit&#x60; parameter to manage pagination of results. On your first request, don&#39;t provide an &#39;after&#39; token. On subsequent requests, provide the &#39;after&#39; token from the previous response to continue from that place in the results. To access more than 10k indicators, use the &#39;after&#39; parameter instead of &#39;offset&#39;.
    # @option opts [Boolean] :from_parent The filter for returning either only indicators for the request customer or its MSSP parents
    # @return [Array<(ApiIndicatorRespV1, Integer, Hash)>] ApiIndicatorRespV1 data, response status code and response headers
    def indicator_combined_v1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IocApi.indicator_combined_v1 ...'
      end
      allowable_values = ["action", "applied_globally", "metadata.av_hits", "metadata.company_name.raw", "created_by", "created_on", "expiration", "expired", "metadata.filename.raw", "modified_by", "modified_on", "metadata.original_filename.raw", "metadata.product_name.raw", "metadata.product_version", "severity_number", "source", "type", "value"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/iocs/combined/indicator/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'from_parent'] = opts[:'from_parent'] if !opts[:'from_parent'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiIndicatorRespV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IocApi.indicator_combined_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IocApi#indicator_combined_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Indicators.
    # @param body [ApiIndicatorCreateReqsV1] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :retrodetects Whether to submit to retrodetects
    # @option opts [Boolean] :ignore_warnings Set to true to ignore warnings and add all IOCs (default to false)
    # @return [ApiIndicatorRespV1]
    def indicator_create_v1(body, opts = {})
      data, _status_code, _headers = indicator_create_v1_with_http_info(body, opts)
      data
    end

    # Create Indicators.
    # @param body [ApiIndicatorCreateReqsV1] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :retrodetects Whether to submit to retrodetects
    # @option opts [Boolean] :ignore_warnings Set to true to ignore warnings and add all IOCs (default to false)
    # @return [Array<(ApiIndicatorRespV1, Integer, Hash)>] ApiIndicatorRespV1 data, response status code and response headers
    def indicator_create_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IocApi.indicator_create_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling IocApi.indicator_create_v1"
      end
      # resource path
      local_var_path = '/iocs/entities/indicators/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'retrodetects'] = opts[:'retrodetects'] if !opts[:'retrodetects'].nil?
      query_params[:'ignore_warnings'] = opts[:'ignore_warnings'] if !opts[:'ignore_warnings'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiIndicatorRespV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IocApi.indicator_create_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IocApi#indicator_create_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Indicators by ids.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter The FQL expression to delete Indicators in bulk. If both &#39;filter&#39; and &#39;ids&#39; are provided, then filter takes precedence and ignores ids.
    # @option opts [Array<String>] :ids The ids of the Indicators to delete. If both &#39;filter&#39; and &#39;ids&#39; are provided, then filter takes precedence and ignores ids
    # @option opts [String] :comment The comment why these indicators were deleted
    # @option opts [Boolean] :from_parent The filter for returning either only indicators for the request customer or its MSSP parents
    # @return [ApiIndicatorQueryRespV1]
    def indicator_delete_v1(opts = {})
      data, _status_code, _headers = indicator_delete_v1_with_http_info(opts)
      data
    end

    # Delete Indicators by ids.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter The FQL expression to delete Indicators in bulk. If both &#39;filter&#39; and &#39;ids&#39; are provided, then filter takes precedence and ignores ids.
    # @option opts [Array<String>] :ids The ids of the Indicators to delete. If both &#39;filter&#39; and &#39;ids&#39; are provided, then filter takes precedence and ignores ids
    # @option opts [String] :comment The comment why these indicators were deleted
    # @option opts [Boolean] :from_parent The filter for returning either only indicators for the request customer or its MSSP parents
    # @return [Array<(ApiIndicatorQueryRespV1, Integer, Hash)>] ApiIndicatorQueryRespV1 data, response status code and response headers
    def indicator_delete_v1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IocApi.indicator_delete_v1 ...'
      end
      # resource path
      local_var_path = '/iocs/entities/indicators/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :multi) if !opts[:'ids'].nil?
      query_params[:'comment'] = opts[:'comment'] if !opts[:'comment'].nil?
      query_params[:'from_parent'] = opts[:'from_parent'] if !opts[:'from_parent'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiIndicatorQueryRespV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IocApi.indicator_delete_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IocApi#indicator_delete_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Indicators by ids.
    # @param ids [Array<String>] The ids of the Indicators to retrieve
    # @param [Hash] opts the optional parameters
    # @return [ApiIndicatorRespV1]
    def indicator_get_v1(ids, opts = {})
      data, _status_code, _headers = indicator_get_v1_with_http_info(ids, opts)
      data
    end

    # Get Indicators by ids.
    # @param ids [Array<String>] The ids of the Indicators to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiIndicatorRespV1, Integer, Hash)>] ApiIndicatorRespV1 data, response status code and response headers
    def indicator_get_v1_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IocApi.indicator_get_v1 ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling IocApi.indicator_get_v1"
      end
      # resource path
      local_var_path = '/iocs/entities/indicators/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiIndicatorRespV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IocApi.indicator_get_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IocApi#indicator_get_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search for Indicators.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter The filter expression that should be used to limit the results.
    # @option opts [Integer] :offset The offset to start retrieving records from. Offset and After params are mutually exclusive. If none provided then scrolling will be used by default. To access more than 10k iocs, use the &#39;after&#39; parameter instead of &#39;offset&#39;.
    # @option opts [Integer] :limit The maximum records to return.
    # @option opts [String] :sort The sort expression that should be used to sort the results.
    # @option opts [String] :after A pagination token used with the &#x60;limit&#x60; parameter to manage pagination of results. On your first request, don&#39;t provide an &#39;after&#39; token. On subsequent requests, provide the &#39;after&#39; token from the previous response to continue from that place in the results. To access more than 10k indicators, use the &#39;after&#39; parameter instead of &#39;offset&#39;.
    # @option opts [Boolean] :from_parent The filter for returning either only indicators for the request customer or its MSSP parents
    # @return [ApiIndicatorQueryRespV1]
    def indicator_search_v1(opts = {})
      data, _status_code, _headers = indicator_search_v1_with_http_info(opts)
      data
    end

    # Search for Indicators.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter The filter expression that should be used to limit the results.
    # @option opts [Integer] :offset The offset to start retrieving records from. Offset and After params are mutually exclusive. If none provided then scrolling will be used by default. To access more than 10k iocs, use the &#39;after&#39; parameter instead of &#39;offset&#39;.
    # @option opts [Integer] :limit The maximum records to return.
    # @option opts [String] :sort The sort expression that should be used to sort the results.
    # @option opts [String] :after A pagination token used with the &#x60;limit&#x60; parameter to manage pagination of results. On your first request, don&#39;t provide an &#39;after&#39; token. On subsequent requests, provide the &#39;after&#39; token from the previous response to continue from that place in the results. To access more than 10k indicators, use the &#39;after&#39; parameter instead of &#39;offset&#39;.
    # @option opts [Boolean] :from_parent The filter for returning either only indicators for the request customer or its MSSP parents
    # @return [Array<(ApiIndicatorQueryRespV1, Integer, Hash)>] ApiIndicatorQueryRespV1 data, response status code and response headers
    def indicator_search_v1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IocApi.indicator_search_v1 ...'
      end
      allowable_values = ["action", "applied_globally", "metadata.av_hits", "metadata.company_name.raw", "created_by", "created_on", "expiration", "expired", "metadata.filename.raw", "modified_by", "modified_on", "metadata.original_filename.raw", "metadata.product_name.raw", "metadata.product_version", "severity_number", "source", "type", "value"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/iocs/queries/indicators/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'from_parent'] = opts[:'from_parent'] if !opts[:'from_parent'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiIndicatorQueryRespV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IocApi.indicator_search_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IocApi#indicator_search_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Indicators.
    # @param body [ApiIndicatorUpdateReqsV1] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :retrodetects Whether to submit to retrodetects
    # @option opts [Boolean] :ignore_warnings Set to true to ignore warnings and add all IOCs (default to false)
    # @return [ApiIndicatorRespV1]
    def indicator_update_v1(body, opts = {})
      data, _status_code, _headers = indicator_update_v1_with_http_info(body, opts)
      data
    end

    # Update Indicators.
    # @param body [ApiIndicatorUpdateReqsV1] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :retrodetects Whether to submit to retrodetects
    # @option opts [Boolean] :ignore_warnings Set to true to ignore warnings and add all IOCs (default to false)
    # @return [Array<(ApiIndicatorRespV1, Integer, Hash)>] ApiIndicatorRespV1 data, response status code and response headers
    def indicator_update_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IocApi.indicator_update_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling IocApi.indicator_update_v1"
      end
      # resource path
      local_var_path = '/iocs/entities/indicators/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'retrodetects'] = opts[:'retrodetects'] if !opts[:'retrodetects'].nil?
      query_params[:'ignore_warnings'] = opts[:'ignore_warnings'] if !opts[:'ignore_warnings'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiIndicatorRespV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IocApi.indicator_update_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IocApi#indicator_update_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query IOC Types.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset Starting index of overall result set from which to return ids.
    # @option opts [Integer] :limit Number of ids to return.
    # @return [ApiIndicatorQueryRespV1]
    def ioc_type_query_v1(opts = {})
      data, _status_code, _headers = ioc_type_query_v1_with_http_info(opts)
      data
    end

    # Query IOC Types.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset Starting index of overall result set from which to return ids.
    # @option opts [Integer] :limit Number of ids to return.
    # @return [Array<(ApiIndicatorQueryRespV1, Integer, Hash)>] ApiIndicatorQueryRespV1 data, response status code and response headers
    def ioc_type_query_v1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IocApi.ioc_type_query_v1 ...'
      end
      # resource path
      local_var_path = '/iocs/queries/ioc-types/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiIndicatorQueryRespV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IocApi.ioc_type_query_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IocApi#ioc_type_query_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query Platforms.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset Starting index of overall result set from which to return ids.
    # @option opts [Integer] :limit Number of ids to return.
    # @return [ApiIndicatorQueryRespV1]
    def platform_query_v1(opts = {})
      data, _status_code, _headers = platform_query_v1_with_http_info(opts)
      data
    end

    # Query Platforms.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset Starting index of overall result set from which to return ids.
    # @option opts [Integer] :limit Number of ids to return.
    # @return [Array<(ApiIndicatorQueryRespV1, Integer, Hash)>] ApiIndicatorQueryRespV1 data, response status code and response headers
    def platform_query_v1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IocApi.platform_query_v1 ...'
      end
      # resource path
      local_var_path = '/iocs/queries/platforms/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiIndicatorQueryRespV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IocApi.platform_query_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IocApi#platform_query_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query Severities.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset Starting index of overall result set from which to return ids.
    # @option opts [Integer] :limit Number of ids to return.
    # @return [ApiIndicatorQueryRespV1]
    def severity_query_v1(opts = {})
      data, _status_code, _headers = severity_query_v1_with_http_info(opts)
      data
    end

    # Query Severities.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset Starting index of overall result set from which to return ids.
    # @option opts [Integer] :limit Number of ids to return.
    # @return [Array<(ApiIndicatorQueryRespV1, Integer, Hash)>] ApiIndicatorQueryRespV1 data, response status code and response headers
    def severity_query_v1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IocApi.severity_query_v1 ...'
      end
      # resource path
      local_var_path = '/iocs/queries/severities/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiIndicatorQueryRespV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IocApi.severity_query_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IocApi#severity_query_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
