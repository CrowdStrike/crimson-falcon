=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'cgi'

module Falcon
  class IdentityProtectionApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete policy rules
    # @param authorization [String] Authorization Header
    # @param ids [Array<String>] Rule IDs
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_preempt_proxy_delete_policy_rules(authorization, ids, opts = {})
      api_preempt_proxy_delete_policy_rules_with_http_info(authorization, ids, opts)
      nil
    end

    # Delete policy rules
    # @param authorization [String] Authorization Header
    # @param ids [Array<String>] Rule IDs
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_preempt_proxy_delete_policy_rules_with_http_info(authorization, ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityProtectionApi.api_preempt_proxy_delete_policy_rules ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling IdentityProtectionApi.api_preempt_proxy_delete_policy_rules"
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling IdentityProtectionApi.api_preempt_proxy_delete_policy_rules"
      end
      if @api_client.config.client_side_validation && ids.length > 100
        fail ArgumentError, 'invalid value for "ids" when calling IdentityProtectionApi.api_preempt_proxy_delete_policy_rules, number of items must be less than or equal to 100.'
      end

      if @api_client.config.client_side_validation && ids.length < 1
        fail ArgumentError, 'invalid value for "ids" when calling IdentityProtectionApi.api_preempt_proxy_delete_policy_rules, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/identity-protection/entities/policy-rules/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :csv)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IdentityProtectionApi.api_preempt_proxy_delete_policy_rules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityProtectionApi#api_preempt_proxy_delete_policy_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get policy rules
    # @param authorization [String] Authorization Header
    # @param ids [Array<String>] Rule IDs
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_preempt_proxy_get_policy_rules(authorization, ids, opts = {})
      api_preempt_proxy_get_policy_rules_with_http_info(authorization, ids, opts)
      nil
    end

    # Get policy rules
    # @param authorization [String] Authorization Header
    # @param ids [Array<String>] Rule IDs
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_preempt_proxy_get_policy_rules_with_http_info(authorization, ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityProtectionApi.api_preempt_proxy_get_policy_rules ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling IdentityProtectionApi.api_preempt_proxy_get_policy_rules"
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling IdentityProtectionApi.api_preempt_proxy_get_policy_rules"
      end
      if @api_client.config.client_side_validation && ids.length > 100
        fail ArgumentError, 'invalid value for "ids" when calling IdentityProtectionApi.api_preempt_proxy_get_policy_rules, number of items must be less than or equal to 100.'
      end

      if @api_client.config.client_side_validation && ids.length < 1
        fail ArgumentError, 'invalid value for "ids" when calling IdentityProtectionApi.api_preempt_proxy_get_policy_rules, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/identity-protection/entities/policy-rules/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :csv)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IdentityProtectionApi.api_preempt_proxy_get_policy_rules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityProtectionApi#api_preempt_proxy_get_policy_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query policy rule IDs
    # @param authorization [String] Authorization Header
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :enabled Whether the rule is enabled
    # @option opts [Boolean] :simulation_mode Whether the rule is in simulation mode
    # @option opts [String] :name Rule name
    # @return [nil]
    def api_preempt_proxy_get_policy_rules_query(authorization, opts = {})
      api_preempt_proxy_get_policy_rules_query_with_http_info(authorization, opts)
      nil
    end

    # Query policy rule IDs
    # @param authorization [String] Authorization Header
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :enabled Whether the rule is enabled
    # @option opts [Boolean] :simulation_mode Whether the rule is in simulation mode
    # @option opts [String] :name Rule name
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_preempt_proxy_get_policy_rules_query_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityProtectionApi.api_preempt_proxy_get_policy_rules_query ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling IdentityProtectionApi.api_preempt_proxy_get_policy_rules_query"
      end
      # resource path
      local_var_path = '/identity-protection/queries/policy-rules/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      query_params[:'simulation_mode'] = opts[:'simulation_mode'] if !opts[:'simulation_mode'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IdentityProtectionApi.api_preempt_proxy_get_policy_rules_query",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityProtectionApi#api_preempt_proxy_get_policy_rules_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Identity Protection GraphQL API. Allows to retrieve entities, timeline activities, identity-based incidents and security assessment. Allows to perform actions on entities and identity-based incidents.
    # @param authorization [String] Authorization Header
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_preempt_proxy_post_graphql(authorization, opts = {})
      api_preempt_proxy_post_graphql_with_http_info(authorization, opts)
      nil
    end

    # Identity Protection GraphQL API. Allows to retrieve entities, timeline activities, identity-based incidents and security assessment. Allows to perform actions on entities and identity-based incidents.
    # @param authorization [String] Authorization Header
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_preempt_proxy_post_graphql_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityProtectionApi.api_preempt_proxy_post_graphql ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling IdentityProtectionApi.api_preempt_proxy_post_graphql"
      end
      # resource path
      local_var_path = '/identity-protection/combined/graphql/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IdentityProtectionApi.api_preempt_proxy_post_graphql",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityProtectionApi#api_preempt_proxy_post_graphql\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create policy rule
    # @param authorization [String] Authorization Header
    # @param body [TypesPolicyRulesCreateBody]
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_preempt_proxy_post_policy_rules(authorization, body, opts = {})
      api_preempt_proxy_post_policy_rules_with_http_info(authorization, body, opts)
      nil
    end

    # Create policy rule
    # @param authorization [String] Authorization Header
    # @param body [TypesPolicyRulesCreateBody]
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_preempt_proxy_post_policy_rules_with_http_info(authorization, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityProtectionApi.api_preempt_proxy_post_policy_rules ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling IdentityProtectionApi.api_preempt_proxy_post_policy_rules"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling IdentityProtectionApi.api_preempt_proxy_post_policy_rules"
      end
      # resource path
      local_var_path = '/identity-protection/entities/policy-rules/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IdentityProtectionApi.api_preempt_proxy_post_policy_rules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityProtectionApi#api_preempt_proxy_post_policy_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
