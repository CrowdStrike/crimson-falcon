=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'cgi'

module Falcon
  class IntegrationBuilder
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # POST Data Upload Transaction Completion
    # Make a close transaction call after uploading the data
    # @param id [String] Integration ID
    # @param [Hash] opts the optional parameters
    # @return [GetEndTransaction]
    def integration_builder_end_transaction_v3(id, opts = {})
      data, _status_code, _headers = integration_builder_end_transaction_v3_with_http_info(id, opts)
      data
    end

    # POST Data Upload Transaction Completion
    # Make a close transaction call after uploading the data
    # @param id [String] Integration ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEndTransaction, Integer, Hash)>] GetEndTransaction data, response status code and response headers
    def integration_builder_end_transaction_v3_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationBuilder.integration_builder_end_transaction_v3 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IntegrationBuilder.integration_builder_end_transaction_v3"
      end
      # resource path
      local_var_path = '/saas-security/entities/custom-integration-close/v3'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEndTransaction'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IntegrationBuilder.integration_builder_end_transaction_v3",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationBuilder#integration_builder_end_transaction_v3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GET Status
    # Get transaction status for a custom integration
    # @param id [String] Integration ID
    # @param [Hash] opts the optional parameters
    # @return [GetTransactionStatus]
    def integration_builder_get_status_v3(id, opts = {})
      data, _status_code, _headers = integration_builder_get_status_v3_with_http_info(id, opts)
      data
    end

    # GET Status
    # Get transaction status for a custom integration
    # @param id [String] Integration ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetTransactionStatus, Integer, Hash)>] GetTransactionStatus data, response status code and response headers
    def integration_builder_get_status_v3_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationBuilder.integration_builder_get_status_v3 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IntegrationBuilder.integration_builder_get_status_v3"
      end
      # resource path
      local_var_path = '/saas-security/entities/custom-integration-status/v3'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTransactionStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IntegrationBuilder.integration_builder_get_status_v3",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationBuilder#integration_builder_get_status_v3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset
    # Make a reset call to a custom integration
    # @param id [String] Integration ID
    # @param [Hash] opts the optional parameters
    # @return [GetTransactionStatus]
    def integration_builder_reset_v3(id, opts = {})
      data, _status_code, _headers = integration_builder_reset_v3_with_http_info(id, opts)
      data
    end

    # Reset
    # Make a reset call to a custom integration
    # @param id [String] Integration ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetTransactionStatus, Integer, Hash)>] GetTransactionStatus data, response status code and response headers
    def integration_builder_reset_v3_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationBuilder.integration_builder_reset_v3 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IntegrationBuilder.integration_builder_reset_v3"
      end
      # resource path
      local_var_path = '/saas-security/entities/custom-integration-reset/v3'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTransactionStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IntegrationBuilder.integration_builder_reset_v3",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationBuilder#integration_builder_reset_v3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # POST Upload
    # Send data to a specific source in a custom integration
    # @param id [String] Integration ID
    # @param source_id [String] Source ID
    # @param data [UploadDataRequest]
    # @param [Hash] opts the optional parameters
    # @return [UploadDataResponse]
    def integration_builder_upload_v3(id, source_id, data, opts = {})
      data, _status_code, _headers = integration_builder_upload_v3_with_http_info(id, source_id, data, opts)
      data
    end

    # POST Upload
    # Send data to a specific source in a custom integration
    # @param id [String] Integration ID
    # @param source_id [String] Source ID
    # @param data [UploadDataRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(UploadDataResponse, Integer, Hash)>] UploadDataResponse data, response status code and response headers
    def integration_builder_upload_v3_with_http_info(id, source_id, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationBuilder.integration_builder_upload_v3 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IntegrationBuilder.integration_builder_upload_v3"
      end
      # verify the required parameter 'source_id' is set
      if @api_client.config.client_side_validation && source_id.nil?
        fail ArgumentError, "Missing the required parameter 'source_id' when calling IntegrationBuilder.integration_builder_upload_v3"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling IntegrationBuilder.integration_builder_upload_v3"
      end
      # resource path
      local_var_path = '/saas-security/entities/custom-integration-upload/v3'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'source_id'] = source_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'UploadDataResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IntegrationBuilder.integration_builder_upload_v3",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationBuilder#integration_builder_upload_v3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
