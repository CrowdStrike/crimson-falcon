=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'cgi'

module Falcon
  class HumioAuthProxy
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Download lookup file in package from NGSIEM
    # @param repository [String] name of repository
    # @param package [String] name of package
    # @param filename [String] name of lookup file
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_lookup_from_package_v1(repository, package, filename, opts = {})
      get_lookup_from_package_v1_with_http_info(repository, package, filename, opts)
      nil
    end

    # Download lookup file in package from NGSIEM
    # @param repository [String] name of repository
    # @param package [String] name of package
    # @param filename [String] name of lookup file
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_lookup_from_package_v1_with_http_info(repository, package, filename, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HumioAuthProxy.get_lookup_from_package_v1 ...'
      end
      # verify the required parameter 'repository' is set
      if @api_client.config.client_side_validation && repository.nil?
        fail ArgumentError, "Missing the required parameter 'repository' when calling HumioAuthProxy.get_lookup_from_package_v1"
      end
      # verify the required parameter 'package' is set
      if @api_client.config.client_side_validation && package.nil?
        fail ArgumentError, "Missing the required parameter 'package' when calling HumioAuthProxy.get_lookup_from_package_v1"
      end
      # verify the required parameter 'filename' is set
      if @api_client.config.client_side_validation && filename.nil?
        fail ArgumentError, "Missing the required parameter 'filename' when calling HumioAuthProxy.get_lookup_from_package_v1"
      end
      # resource path
      local_var_path = '/humio/api/v1/repositories/{repository}/files/{package}/{filename}'.sub('{' + 'repository' + '}', CGI.escape(repository.to_s)).sub('{' + 'package' + '}', CGI.escape(package.to_s)).sub('{' + 'filename' + '}', CGI.escape(filename.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"HumioAuthProxy.get_lookup_from_package_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HumioAuthProxy#get_lookup_from_package_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download lookup file in namespaced package from NGSIEM
    # @param repository [String] name of repository
    # @param namespace [String] name of namespace
    # @param package [String] name of package
    # @param filename [String] name of lookup file
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_lookup_from_package_with_namespace_v1(repository, namespace, package, filename, opts = {})
      get_lookup_from_package_with_namespace_v1_with_http_info(repository, namespace, package, filename, opts)
      nil
    end

    # Download lookup file in namespaced package from NGSIEM
    # @param repository [String] name of repository
    # @param namespace [String] name of namespace
    # @param package [String] name of package
    # @param filename [String] name of lookup file
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_lookup_from_package_with_namespace_v1_with_http_info(repository, namespace, package, filename, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HumioAuthProxy.get_lookup_from_package_with_namespace_v1 ...'
      end
      # verify the required parameter 'repository' is set
      if @api_client.config.client_side_validation && repository.nil?
        fail ArgumentError, "Missing the required parameter 'repository' when calling HumioAuthProxy.get_lookup_from_package_with_namespace_v1"
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling HumioAuthProxy.get_lookup_from_package_with_namespace_v1"
      end
      # verify the required parameter 'package' is set
      if @api_client.config.client_side_validation && package.nil?
        fail ArgumentError, "Missing the required parameter 'package' when calling HumioAuthProxy.get_lookup_from_package_with_namespace_v1"
      end
      # verify the required parameter 'filename' is set
      if @api_client.config.client_side_validation && filename.nil?
        fail ArgumentError, "Missing the required parameter 'filename' when calling HumioAuthProxy.get_lookup_from_package_with_namespace_v1"
      end
      # resource path
      local_var_path = '/humio/api/v1/repositories/{repository}/files/{namespace}/{package}/{filename}'.sub('{' + 'repository' + '}', CGI.escape(repository.to_s)).sub('{' + 'namespace' + '}', CGI.escape(namespace.to_s)).sub('{' + 'package' + '}', CGI.escape(package.to_s)).sub('{' + 'filename' + '}', CGI.escape(filename.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"HumioAuthProxy.get_lookup_from_package_with_namespace_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HumioAuthProxy#get_lookup_from_package_with_namespace_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download lookup file from NGSIEM
    # @param repository [String] name of repository
    # @param filename [String] name of lookup file
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_lookup_v1(repository, filename, opts = {})
      get_lookup_v1_with_http_info(repository, filename, opts)
      nil
    end

    # Download lookup file from NGSIEM
    # @param repository [String] name of repository
    # @param filename [String] name of lookup file
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_lookup_v1_with_http_info(repository, filename, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HumioAuthProxy.get_lookup_v1 ...'
      end
      # verify the required parameter 'repository' is set
      if @api_client.config.client_side_validation && repository.nil?
        fail ArgumentError, "Missing the required parameter 'repository' when calling HumioAuthProxy.get_lookup_v1"
      end
      # verify the required parameter 'filename' is set
      if @api_client.config.client_side_validation && filename.nil?
        fail ArgumentError, "Missing the required parameter 'filename' when calling HumioAuthProxy.get_lookup_v1"
      end
      # resource path
      local_var_path = '/humio/api/v1/repositories/{repository}/files/{filename}'.sub('{' + 'repository' + '}', CGI.escape(repository.to_s)).sub('{' + 'filename' + '}', CGI.escape(filename.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"HumioAuthProxy.get_lookup_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HumioAuthProxy#get_lookup_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get status of search
    # @param repository [String] name of repository
    # @param id [String] id of query
    # @param [Hash] opts the optional parameters
    # @return [MsaspecResponseFields]
    def get_search_status_v1(repository, id, opts = {})
      data, _status_code, _headers = get_search_status_v1_with_http_info(repository, id, opts)
      data
    end

    # Get status of search
    # @param repository [String] name of repository
    # @param id [String] id of query
    # @param [Hash] opts the optional parameters
    # @return [Array<(MsaspecResponseFields, Integer, Hash)>] MsaspecResponseFields data, response status code and response headers
    def get_search_status_v1_with_http_info(repository, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HumioAuthProxy.get_search_status_v1 ...'
      end
      # verify the required parameter 'repository' is set
      if @api_client.config.client_side_validation && repository.nil?
        fail ArgumentError, "Missing the required parameter 'repository' when calling HumioAuthProxy.get_search_status_v1"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling HumioAuthProxy.get_search_status_v1"
      end
      # resource path
      local_var_path = '/humio/api/v1/repositories/{repository}/queryjobs/{id}'.sub('{' + 'repository' + '}', CGI.escape(repository.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain', 'text/html', 'application/x-ndjson'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaspecResponseFields'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"HumioAuthProxy.get_search_status_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HumioAuthProxy#get_search_status_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Initiate search
    # @param repository [String] name of repository
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def start_search_v1(repository, opts = {})
      start_search_v1_with_http_info(repository, opts)
      nil
    end

    # Initiate search
    # @param repository [String] name of repository
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def start_search_v1_with_http_info(repository, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HumioAuthProxy.start_search_v1 ...'
      end
      # verify the required parameter 'repository' is set
      if @api_client.config.client_side_validation && repository.nil?
        fail ArgumentError, "Missing the required parameter 'repository' when calling HumioAuthProxy.start_search_v1"
      end
      # resource path
      local_var_path = '/humio/api/v1/repositories/{repository}/queryjobs'.sub('{' + 'repository' + '}', CGI.escape(repository.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain', 'text/html'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"HumioAuthProxy.start_search_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HumioAuthProxy#start_search_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Stop search
    # @param repository [String] name of repository
    # @param id [String] id of query
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def stop_search_v1(repository, id, opts = {})
      stop_search_v1_with_http_info(repository, id, opts)
      nil
    end

    # Stop search
    # @param repository [String] name of repository
    # @param id [String] id of query
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def stop_search_v1_with_http_info(repository, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HumioAuthProxy.stop_search_v1 ...'
      end
      # verify the required parameter 'repository' is set
      if @api_client.config.client_side_validation && repository.nil?
        fail ArgumentError, "Missing the required parameter 'repository' when calling HumioAuthProxy.stop_search_v1"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling HumioAuthProxy.stop_search_v1"
      end
      # resource path
      local_var_path = '/humio/api/v1/repositories/{repository}/queryjobs/{id}'.sub('{' + 'repository' + '}', CGI.escape(repository.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"HumioAuthProxy.stop_search_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HumioAuthProxy#stop_search_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload file to NGSIEM
    # @param repository [String] name of repository
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def upload_lookup_v1(repository, opts = {})
      upload_lookup_v1_with_http_info(repository, opts)
      nil
    end

    # Upload file to NGSIEM
    # @param repository [String] name of repository
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def upload_lookup_v1_with_http_info(repository, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HumioAuthProxy.upload_lookup_v1 ...'
      end
      # verify the required parameter 'repository' is set
      if @api_client.config.client_side_validation && repository.nil?
        fail ArgumentError, "Missing the required parameter 'repository' when calling HumioAuthProxy.upload_lookup_v1"
      end
      # resource path
      local_var_path = '/humio/api/v1/repositories/{repository}/files'.sub('{' + 'repository' + '}', CGI.escape(repository.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"HumioAuthProxy.upload_lookup_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HumioAuthProxy#upload_lookup_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
