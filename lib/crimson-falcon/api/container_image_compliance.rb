=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'cgi'

module Falcon
  class ContainerImageCompliance
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # get the assessments for each cluster
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: cloud_info.namespace: Kubernetes namespace cloud_info.cloud_provider: Cloud provider cid: Customer ID compliance_finding.framework: Compliance finding framework (available values: CIS) cloud_info.cloud_region: Cloud region cloud_info.cloud_account_id: Cloud account ID cloud_info.cluster_name: Kubernetes cluster name
    # @return [DomainAggregateClusterAssessmentsResponse]
    def ext_aggregate_cluster_assessments(opts = {})
      data, _status_code, _headers = ext_aggregate_cluster_assessments_with_http_info(opts)
      data
    end

    # get the assessments for each cluster
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: cloud_info.namespace: Kubernetes namespace cloud_info.cloud_provider: Cloud provider cid: Customer ID compliance_finding.framework: Compliance finding framework (available values: CIS) cloud_info.cloud_region: Cloud region cloud_info.cloud_account_id: Cloud account ID cloud_info.cluster_name: Kubernetes cluster name
    # @return [Array<(DomainAggregateClusterAssessmentsResponse, Integer, Hash)>] DomainAggregateClusterAssessmentsResponse data, response status code and response headers
    def ext_aggregate_cluster_assessments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContainerImageCompliance.ext_aggregate_cluster_assessments ...'
      end
      # resource path
      local_var_path = '/container-compliance/aggregates/compliance-by-clusters/v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainAggregateClusterAssessmentsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ContainerImageCompliance.ext_aggregate_cluster_assessments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContainerImageCompliance#ext_aggregate_cluster_assessments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get the containers grouped into rules on which they failed
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: cid: Customer ID compliance_finding.name: Compliance finding Name cloud_info.cloud_provider: Cloud provider image_repository: Image repository image_tag: Image tag compliance_finding.framework: Compliance finding framework (available values: CIS) image_registry: Image registry cloud_info.cloud_region: Cloud region cloud_info.cluster_name: Kubernetes cluster name image_digest: Image digest (sha256 digest) compliance_finding.id: Compliance finding ID cloud_info.namespace: Kubernetes namespace compliance_finding.severity: Compliance finding severity; available values: 4, 3, 2, 1 (4: critical, 3: high, 2: medium, 1:low) image_id: Image ID cloud_info.cloud_account_id: Cloud account ID
    # @return [DomainAggregateFailedAssetsByRulesResponse]
    def ext_aggregate_failed_containers_by_rules_path(opts = {})
      data, _status_code, _headers = ext_aggregate_failed_containers_by_rules_path_with_http_info(opts)
      data
    end

    # get the containers grouped into rules on which they failed
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: cid: Customer ID compliance_finding.name: Compliance finding Name cloud_info.cloud_provider: Cloud provider image_repository: Image repository image_tag: Image tag compliance_finding.framework: Compliance finding framework (available values: CIS) image_registry: Image registry cloud_info.cloud_region: Cloud region cloud_info.cluster_name: Kubernetes cluster name image_digest: Image digest (sha256 digest) compliance_finding.id: Compliance finding ID cloud_info.namespace: Kubernetes namespace compliance_finding.severity: Compliance finding severity; available values: 4, 3, 2, 1 (4: critical, 3: high, 2: medium, 1:low) image_id: Image ID cloud_info.cloud_account_id: Cloud account ID
    # @return [Array<(DomainAggregateFailedAssetsByRulesResponse, Integer, Hash)>] DomainAggregateFailedAssetsByRulesResponse data, response status code and response headers
    def ext_aggregate_failed_containers_by_rules_path_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContainerImageCompliance.ext_aggregate_failed_containers_by_rules_path ...'
      end
      # resource path
      local_var_path = '/container-compliance/aggregates/failed-containers-by-rules/v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainAggregateFailedAssetsByRulesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ContainerImageCompliance.ext_aggregate_failed_containers_by_rules_path",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContainerImageCompliance#ext_aggregate_failed_containers_by_rules_path\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get the failed containers count grouped into severity levels
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: image_repository: Image repository compliance_finding.severity: Compliance finding severity; available values: 4, 3, 2, 1 (4: critical, 3: high, 2: medium, 1:low) image_registry: Image registry cloud_info.cloud_region: Cloud region image_id: Image ID cloud_info.cloud_account_id: Cloud account ID cid: Customer ID cloud_info.cloud_provider: Cloud provider image_digest: Image digest (sha256 digest) cloud_info.namespace: Kubernetes namespace cloud_info.cluster_name: Kubernetes cluster name compliance_finding.id: Compliance finding ID compliance_finding.framework: Compliance finding framework (available values: CIS) image_tag: Image tag compliance_finding.name: Compliance finding Name
    # @return [DomainAggregateFailedAssetCountBySeverityResponse]
    def ext_aggregate_failed_containers_count_by_severity(opts = {})
      data, _status_code, _headers = ext_aggregate_failed_containers_count_by_severity_with_http_info(opts)
      data
    end

    # get the failed containers count grouped into severity levels
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: image_repository: Image repository compliance_finding.severity: Compliance finding severity; available values: 4, 3, 2, 1 (4: critical, 3: high, 2: medium, 1:low) image_registry: Image registry cloud_info.cloud_region: Cloud region image_id: Image ID cloud_info.cloud_account_id: Cloud account ID cid: Customer ID cloud_info.cloud_provider: Cloud provider image_digest: Image digest (sha256 digest) cloud_info.namespace: Kubernetes namespace cloud_info.cluster_name: Kubernetes cluster name compliance_finding.id: Compliance finding ID compliance_finding.framework: Compliance finding framework (available values: CIS) image_tag: Image tag compliance_finding.name: Compliance finding Name
    # @return [Array<(DomainAggregateFailedAssetCountBySeverityResponse, Integer, Hash)>] DomainAggregateFailedAssetCountBySeverityResponse data, response status code and response headers
    def ext_aggregate_failed_containers_count_by_severity_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContainerImageCompliance.ext_aggregate_failed_containers_count_by_severity ...'
      end
      # resource path
      local_var_path = '/container-compliance/aggregates/failed-containers-count-by-severity/v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainAggregateFailedAssetCountBySeverityResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ContainerImageCompliance.ext_aggregate_failed_containers_count_by_severity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContainerImageCompliance#ext_aggregate_failed_containers_count_by_severity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get the images grouped into rules on which they failed
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: cid: Customer ID cloud_info.cluster_name: Kubernetes cluster name cloud_info.cloud_account_id: Cloud account ID cloud_info.cloud_provider: Cloud provider compliance_finding.id: Compliance finding ID image_digest: Image digest (sha256 digest) image_repository: Image repository compliance_finding.framework: Compliance finding framework (available values: CIS) image_registry: Image registry compliance_finding.severity: Compliance finding severity; available values: 4, 3, 2, 1 (4: critical, 3: high, 2: medium, 1:low) cloud_info.cloud_region: Cloud region image_id: Image ID image_tag: Image tag compliance_finding.name: Compliance finding Name cloud_info.namespace: Kubernetes namespace
    # @return [DomainAggregateFailedAssetsByRulesResponse]
    def ext_aggregate_failed_images_by_rules_path(opts = {})
      data, _status_code, _headers = ext_aggregate_failed_images_by_rules_path_with_http_info(opts)
      data
    end

    # get the images grouped into rules on which they failed
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: cid: Customer ID cloud_info.cluster_name: Kubernetes cluster name cloud_info.cloud_account_id: Cloud account ID cloud_info.cloud_provider: Cloud provider compliance_finding.id: Compliance finding ID image_digest: Image digest (sha256 digest) image_repository: Image repository compliance_finding.framework: Compliance finding framework (available values: CIS) image_registry: Image registry compliance_finding.severity: Compliance finding severity; available values: 4, 3, 2, 1 (4: critical, 3: high, 2: medium, 1:low) cloud_info.cloud_region: Cloud region image_id: Image ID image_tag: Image tag compliance_finding.name: Compliance finding Name cloud_info.namespace: Kubernetes namespace
    # @return [Array<(DomainAggregateFailedAssetsByRulesResponse, Integer, Hash)>] DomainAggregateFailedAssetsByRulesResponse data, response status code and response headers
    def ext_aggregate_failed_images_by_rules_path_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContainerImageCompliance.ext_aggregate_failed_images_by_rules_path ...'
      end
      # resource path
      local_var_path = '/container-compliance/aggregates/failed-images-by-rules/v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainAggregateFailedAssetsByRulesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ContainerImageCompliance.ext_aggregate_failed_images_by_rules_path",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContainerImageCompliance#ext_aggregate_failed_images_by_rules_path\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get the failed images count grouped into severity levels
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: cloud_info.cloud_region: Cloud region image_digest: Image digest (sha256 digest) cid: Customer ID cloud_info.namespace: Kubernetes namespace image_registry: Image registry cloud_info.cluster_name: Kubernetes cluster name compliance_finding.id: Compliance finding ID image_repository: Image repository compliance_finding.severity: Compliance finding severity; available values: 4, 3, 2, 1 (4: critical, 3: high, 2: medium, 1:low) compliance_finding.framework: Compliance finding framework (available values: CIS) image_id: Image ID cloud_info.cloud_account_id: Cloud account ID cloud_info.cloud_provider: Cloud provider compliance_finding.name: Compliance finding Name image_tag: Image tag
    # @return [DomainAggregateFailedAssetCountBySeverityResponse]
    def ext_aggregate_failed_images_count_by_severity(opts = {})
      data, _status_code, _headers = ext_aggregate_failed_images_count_by_severity_with_http_info(opts)
      data
    end

    # get the failed images count grouped into severity levels
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: cloud_info.cloud_region: Cloud region image_digest: Image digest (sha256 digest) cid: Customer ID cloud_info.namespace: Kubernetes namespace image_registry: Image registry cloud_info.cluster_name: Kubernetes cluster name compliance_finding.id: Compliance finding ID image_repository: Image repository compliance_finding.severity: Compliance finding severity; available values: 4, 3, 2, 1 (4: critical, 3: high, 2: medium, 1:low) compliance_finding.framework: Compliance finding framework (available values: CIS) image_id: Image ID cloud_info.cloud_account_id: Cloud account ID cloud_info.cloud_provider: Cloud provider compliance_finding.name: Compliance finding Name image_tag: Image tag
    # @return [Array<(DomainAggregateFailedAssetCountBySeverityResponse, Integer, Hash)>] DomainAggregateFailedAssetCountBySeverityResponse data, response status code and response headers
    def ext_aggregate_failed_images_count_by_severity_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContainerImageCompliance.ext_aggregate_failed_images_count_by_severity ...'
      end
      # resource path
      local_var_path = '/container-compliance/aggregates/failed-images-count-by-severity/v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainAggregateFailedAssetCountBySeverityResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ContainerImageCompliance.ext_aggregate_failed_images_count_by_severity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContainerImageCompliance#ext_aggregate_failed_images_count_by_severity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get the failed rules for each cluster grouped into severity levels
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: compliance_finding.severity: Compliance finding severity; available values: 4, 3, 2, 1 (4: critical, 3: high, 2: medium, 1:low) cloud_info.cluster_name: Kubernetes cluster name image_id: Image ID image_tag: Image tag compliance_finding.name: Compliance finding Name cloud_info.cloud_region: Cloud region image_digest: Image digest (sha256 digest) cid: Customer ID image_registry: Image registry cloud_info.cloud_provider: Cloud provider compliance_finding.id: Compliance finding ID image_repository: Image repository cloud_info.cloud_account_id: Cloud account ID asset_type: asset type (container, image) compliance_finding.framework: Compliance finding framework (available values: CIS)
    # @return [DomainAggregateFailedRulesByClustersResponse]
    def ext_aggregate_failed_rules_by_clusters(opts = {})
      data, _status_code, _headers = ext_aggregate_failed_rules_by_clusters_with_http_info(opts)
      data
    end

    # get the failed rules for each cluster grouped into severity levels
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: compliance_finding.severity: Compliance finding severity; available values: 4, 3, 2, 1 (4: critical, 3: high, 2: medium, 1:low) cloud_info.cluster_name: Kubernetes cluster name image_id: Image ID image_tag: Image tag compliance_finding.name: Compliance finding Name cloud_info.cloud_region: Cloud region image_digest: Image digest (sha256 digest) cid: Customer ID image_registry: Image registry cloud_info.cloud_provider: Cloud provider compliance_finding.id: Compliance finding ID image_repository: Image repository cloud_info.cloud_account_id: Cloud account ID asset_type: asset type (container, image) compliance_finding.framework: Compliance finding framework (available values: CIS)
    # @return [Array<(DomainAggregateFailedRulesByClustersResponse, Integer, Hash)>] DomainAggregateFailedRulesByClustersResponse data, response status code and response headers
    def ext_aggregate_failed_rules_by_clusters_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContainerImageCompliance.ext_aggregate_failed_rules_by_clusters ...'
      end
      # resource path
      local_var_path = '/container-compliance/aggregates/failed-rules-by-clusters/v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainAggregateFailedRulesByClustersResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ContainerImageCompliance.ext_aggregate_failed_rules_by_clusters",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContainerImageCompliance#ext_aggregate_failed_rules_by_clusters\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get images with failed rules, rule count grouped by severity for each image
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: compliance_finding.id: Compliance finding ID image_digest: Image digest (sha256 digest) cloud_info.cloud_account_id: Cloud account ID cid: Customer ID image_registry: Image registry cloud_info.cloud_region: Cloud region cloud_info.cloud_provider: Cloud provider image_repository: Image repository image_id: Image ID asset_type: asset type (container, image) compliance_finding.severity: Compliance finding severity; available values: 4, 3, 2, 1 (4: critical, 3: high, 2: medium, 1:low) compliance_finding.framework: Compliance finding framework (available values: CIS) image_tag: Image tag cloud_info.namespace: Kubernetes namespace cloud_info.cluster_name: Kubernetes cluster name compliance_finding.name: Compliance finding Name
    # @return [DomainAggregateFailedRulesByImagesResponse]
    def ext_aggregate_failed_rules_by_images(opts = {})
      data, _status_code, _headers = ext_aggregate_failed_rules_by_images_with_http_info(opts)
      data
    end

    # get images with failed rules, rule count grouped by severity for each image
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: compliance_finding.id: Compliance finding ID image_digest: Image digest (sha256 digest) cloud_info.cloud_account_id: Cloud account ID cid: Customer ID image_registry: Image registry cloud_info.cloud_region: Cloud region cloud_info.cloud_provider: Cloud provider image_repository: Image repository image_id: Image ID asset_type: asset type (container, image) compliance_finding.severity: Compliance finding severity; available values: 4, 3, 2, 1 (4: critical, 3: high, 2: medium, 1:low) compliance_finding.framework: Compliance finding framework (available values: CIS) image_tag: Image tag cloud_info.namespace: Kubernetes namespace cloud_info.cluster_name: Kubernetes cluster name compliance_finding.name: Compliance finding Name
    # @return [Array<(DomainAggregateFailedRulesByImagesResponse, Integer, Hash)>] DomainAggregateFailedRulesByImagesResponse data, response status code and response headers
    def ext_aggregate_failed_rules_by_images_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContainerImageCompliance.ext_aggregate_failed_rules_by_images ...'
      end
      # resource path
      local_var_path = '/container-compliance/aggregates/failed-rules-by-images/v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainAggregateFailedRulesByImagesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ContainerImageCompliance.ext_aggregate_failed_rules_by_images",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContainerImageCompliance#ext_aggregate_failed_rules_by_images\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get the failed rules count grouped into severity levels
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: compliance_finding.severity: Compliance finding severity; available values: 4, 3, 2, 1 (4: critical, 3: high, 2: medium, 1:low) cloud_info.cloud_provider: Cloud provider asset_type: asset type (container, image) cloud_info.cloud_account_id: Cloud account ID cid: Customer ID image_digest: Image digest (sha256 digest) image_repository: Image repository image_tag: Image tag compliance_finding.framework: Compliance finding framework (available values: CIS) image_registry: Image registry cloud_info.cloud_region: Cloud region image_id: Image ID cloud_info.cluster_name: Kubernetes cluster name compliance_finding.name: Compliance finding Name compliance_finding.id: Compliance finding ID
    # @return [DomainAggregateFailedRulesCountBySeverityResponse]
    def ext_aggregate_failed_rules_count_by_severity(opts = {})
      data, _status_code, _headers = ext_aggregate_failed_rules_count_by_severity_with_http_info(opts)
      data
    end

    # get the failed rules count grouped into severity levels
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: compliance_finding.severity: Compliance finding severity; available values: 4, 3, 2, 1 (4: critical, 3: high, 2: medium, 1:low) cloud_info.cloud_provider: Cloud provider asset_type: asset type (container, image) cloud_info.cloud_account_id: Cloud account ID cid: Customer ID image_digest: Image digest (sha256 digest) image_repository: Image repository image_tag: Image tag compliance_finding.framework: Compliance finding framework (available values: CIS) image_registry: Image registry cloud_info.cloud_region: Cloud region image_id: Image ID cloud_info.cluster_name: Kubernetes cluster name compliance_finding.name: Compliance finding Name compliance_finding.id: Compliance finding ID
    # @return [Array<(DomainAggregateFailedRulesCountBySeverityResponse, Integer, Hash)>] DomainAggregateFailedRulesCountBySeverityResponse data, response status code and response headers
    def ext_aggregate_failed_rules_count_by_severity_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContainerImageCompliance.ext_aggregate_failed_rules_count_by_severity ...'
      end
      # resource path
      local_var_path = '/container-compliance/aggregates/failed-rules-count-by-severity/v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainAggregateFailedRulesCountBySeverityResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ContainerImageCompliance.ext_aggregate_failed_rules_count_by_severity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContainerImageCompliance#ext_aggregate_failed_rules_count_by_severity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get the assessments for each image
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: cid: Customer ID image_repository: Image repository cloud_info.cloud_region: Cloud region compliance_finding.severity: Compliance finding severity; available values: 4, 3, 2, 1 (4: critical, 3: high, 2: medium, 1:low) asset_type: asset type (container, image) image_digest: Image digest (sha256 digest) cloud_info.cloud_account_id: Cloud account ID compliance_finding.name: Compliance finding Name cloud_info.namespace: Kubernetes namespace image_registry: Image registry compliance_finding.framework: Compliance finding framework (available values: CIS) compliance_finding.id: Compliance finding ID image_tag: Image tag image_id: Image ID cloud_info.cluster_name: Kubernetes cluster name cloud_info.cloud_provider: Cloud provider
    # @option opts [String] :after &#39;after&#39; value from the last response. Keep it empty for the first request.
    # @option opts [String] :limit number of images to return in the response after &#39;after&#39; key. Keep it empty for the default number of 10000
    # @return [DomainAggregateImageAssessmentsResponse]
    def ext_aggregate_image_assessments(opts = {})
      data, _status_code, _headers = ext_aggregate_image_assessments_with_http_info(opts)
      data
    end

    # get the assessments for each image
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: cid: Customer ID image_repository: Image repository cloud_info.cloud_region: Cloud region compliance_finding.severity: Compliance finding severity; available values: 4, 3, 2, 1 (4: critical, 3: high, 2: medium, 1:low) asset_type: asset type (container, image) image_digest: Image digest (sha256 digest) cloud_info.cloud_account_id: Cloud account ID compliance_finding.name: Compliance finding Name cloud_info.namespace: Kubernetes namespace image_registry: Image registry compliance_finding.framework: Compliance finding framework (available values: CIS) compliance_finding.id: Compliance finding ID image_tag: Image tag image_id: Image ID cloud_info.cluster_name: Kubernetes cluster name cloud_info.cloud_provider: Cloud provider
    # @option opts [String] :after &#39;after&#39; value from the last response. Keep it empty for the first request.
    # @option opts [String] :limit number of images to return in the response after &#39;after&#39; key. Keep it empty for the default number of 10000
    # @return [Array<(DomainAggregateImageAssessmentsResponse, Integer, Hash)>] DomainAggregateImageAssessmentsResponse data, response status code and response headers
    def ext_aggregate_image_assessments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContainerImageCompliance.ext_aggregate_image_assessments ...'
      end
      # resource path
      local_var_path = '/container-compliance/aggregates/compliance-by-images/v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainAggregateImageAssessmentsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ContainerImageCompliance.ext_aggregate_image_assessments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContainerImageCompliance#ext_aggregate_image_assessments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get the assessments for each rule
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: compliance_finding.framework: Compliance finding framework (available values: CIS) cloud_info.cloud_region: Cloud region image_id: Image ID compliance_finding.name: Compliance finding Name cid: Customer ID image_digest: Image digest (sha256 digest) cloud_info.cluster_name: Kubernetes cluster name cloud_info.cloud_provider: Cloud provider compliance_finding.id: Compliance finding ID image_tag: Image tag cloud_info.cloud_account_id: Cloud account ID compliance_finding.severity: Compliance finding severity; available values: 4, 3, 2, 1 (4: critical, 3: high, 2: medium, 1:low) image_registry: Image registry image_repository: Image repository
    # @return [DomainAggregateRulesAssessmentsResponse]
    def ext_aggregate_rules_assessments(opts = {})
      data, _status_code, _headers = ext_aggregate_rules_assessments_with_http_info(opts)
      data
    end

    # get the assessments for each rule
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: compliance_finding.framework: Compliance finding framework (available values: CIS) cloud_info.cloud_region: Cloud region image_id: Image ID compliance_finding.name: Compliance finding Name cid: Customer ID image_digest: Image digest (sha256 digest) cloud_info.cluster_name: Kubernetes cluster name cloud_info.cloud_provider: Cloud provider compliance_finding.id: Compliance finding ID image_tag: Image tag cloud_info.cloud_account_id: Cloud account ID compliance_finding.severity: Compliance finding severity; available values: 4, 3, 2, 1 (4: critical, 3: high, 2: medium, 1:low) image_registry: Image registry image_repository: Image repository
    # @return [Array<(DomainAggregateRulesAssessmentsResponse, Integer, Hash)>] DomainAggregateRulesAssessmentsResponse data, response status code and response headers
    def ext_aggregate_rules_assessments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContainerImageCompliance.ext_aggregate_rules_assessments ...'
      end
      # resource path
      local_var_path = '/container-compliance/aggregates/compliance-by-rules/v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainAggregateRulesAssessmentsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ContainerImageCompliance.ext_aggregate_rules_assessments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContainerImageCompliance#ext_aggregate_rules_assessments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get the rules grouped by their statuses
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: container_id: Container ID container_name: Container name image_digest: Image digest (sha256 digest) cloud_info.cloud_region: Cloud region compliance_finding.severity: Compliance finding severity; available values: 4, 3, 2, 1 (4: critical, 3: high, 2: medium, 1:low) image_id: Image ID cloud_info.cloud_account_id: Cloud account ID cid: Customer ID image_repository: Image repository image_tag: Image tag compliance_finding.name: Compliance finding Name cloud_info.cluster_name: Kubernetes cluster name compliance_finding.id: Compliance finding ID asset_type: asset type (container, image) cloud_info.cloud_provider: Cloud provider image_registry: Image registry compliance_finding.framework: Compliance finding framework (available values: CIS)
    # @return [DomainAggregateRulesByStatusResponse]
    def ext_aggregate_rules_by_status(opts = {})
      data, _status_code, _headers = ext_aggregate_rules_by_status_with_http_info(opts)
      data
    end

    # get the rules grouped by their statuses
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter results using a query in Falcon Query Language (FQL). Supported Filters: container_id: Container ID container_name: Container name image_digest: Image digest (sha256 digest) cloud_info.cloud_region: Cloud region compliance_finding.severity: Compliance finding severity; available values: 4, 3, 2, 1 (4: critical, 3: high, 2: medium, 1:low) image_id: Image ID cloud_info.cloud_account_id: Cloud account ID cid: Customer ID image_repository: Image repository image_tag: Image tag compliance_finding.name: Compliance finding Name cloud_info.cluster_name: Kubernetes cluster name compliance_finding.id: Compliance finding ID asset_type: asset type (container, image) cloud_info.cloud_provider: Cloud provider image_registry: Image registry compliance_finding.framework: Compliance finding framework (available values: CIS)
    # @return [Array<(DomainAggregateRulesByStatusResponse, Integer, Hash)>] DomainAggregateRulesByStatusResponse data, response status code and response headers
    def ext_aggregate_rules_by_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContainerImageCompliance.ext_aggregate_rules_by_status ...'
      end
      # resource path
      local_var_path = '/container-compliance/aggregates/rules-by-status/v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainAggregateRulesByStatusResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ContainerImageCompliance.ext_aggregate_rules_by_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContainerImageCompliance#ext_aggregate_rules_by_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
