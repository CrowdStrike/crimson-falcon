=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'cgi'

module Falcon
  class UserManagement
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get host aggregates as specified via json in request body.
    # @param body [Array<MsaAggregateQueryRequest>]
    # @param [Hash] opts the optional parameters
    # @return [FlightcontrolapiAggregatesResponse]
    def aggregate_users_v1(body, opts = {})
      data, _status_code, _headers = aggregate_users_v1_with_http_info(body, opts)
      data
    end

    # Get host aggregates as specified via json in request body.
    # @param body [Array<MsaAggregateQueryRequest>]
    # @param [Hash] opts the optional parameters
    # @return [Array<(FlightcontrolapiAggregatesResponse, Integer, Hash)>] FlightcontrolapiAggregatesResponse data, response status code and response headers
    def aggregate_users_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserManagement.aggregate_users_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserManagement.aggregate_users_v1"
      end
      # resource path
      local_var_path = '/user-management/aggregates/users/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'FlightcontrolapiAggregatesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"UserManagement.aggregate_users_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserManagement#aggregate_users_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deprecated : Please use GET /user-management/combined/user-roles/v2. Get User Grant(s). This endpoint lists both direct as well as flight control grants between a User and a Customer.
    # @param user_uuid [String] User UUID to get available roles for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cid Customer ID to get grants for. Empty CID would result in Role IDs for user against current CID in view.
    # @option opts [Boolean] :direct_only Specifies if to request direct Only role grants or all role grants between user and CID (specified in query params) (default to false)
    # @option opts [String] :filter Filter using a query in Falcon Query Language (FQL). Supported filters: expires_at, role_id, role_name
    # @option opts [Integer] :offset The offset to start retrieving records from (default to 0)
    # @option opts [Integer] :limit The maximum records to return. [1-500] (default to 100)
    # @option opts [String] :sort The property to sort by (default to 'role_name|asc')
    # @return [FlightcontrolapiCombinedUserRolesResponseV1]
    def combined_user_roles_v1(user_uuid, opts = {})
      data, _status_code, _headers = combined_user_roles_v1_with_http_info(user_uuid, opts)
      data
    end

    # Deprecated : Please use GET /user-management/combined/user-roles/v2. Get User Grant(s). This endpoint lists both direct as well as flight control grants between a User and a Customer.
    # @param user_uuid [String] User UUID to get available roles for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cid Customer ID to get grants for. Empty CID would result in Role IDs for user against current CID in view.
    # @option opts [Boolean] :direct_only Specifies if to request direct Only role grants or all role grants between user and CID (specified in query params) (default to false)
    # @option opts [String] :filter Filter using a query in Falcon Query Language (FQL). Supported filters: expires_at, role_id, role_name
    # @option opts [Integer] :offset The offset to start retrieving records from (default to 0)
    # @option opts [Integer] :limit The maximum records to return. [1-500] (default to 100)
    # @option opts [String] :sort The property to sort by (default to 'role_name|asc')
    # @return [Array<(FlightcontrolapiCombinedUserRolesResponseV1, Integer, Hash)>] FlightcontrolapiCombinedUserRolesResponseV1 data, response status code and response headers
    def combined_user_roles_v1_with_http_info(user_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserManagement.combined_user_roles_v1 ...'
      end
      # verify the required parameter 'user_uuid' is set
      if @api_client.config.client_side_validation && user_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'user_uuid' when calling UserManagement.combined_user_roles_v1"
      end
      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling UserManagement.combined_user_roles_v1, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 500
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling UserManagement.combined_user_roles_v1, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling UserManagement.combined_user_roles_v1, must be greater than or equal to 1.'
      end

      allowable_values = ["cid|asc", "cid|desc", "expires_at|asc", "expires_at|desc", "role_name|asc", "role_name|desc", "type|asc", "type|desc", "user_uuid|asc", "user_uuid|desc"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/user-management/combined/user-roles/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'user_uuid'] = user_uuid
      query_params[:'cid'] = opts[:'cid'] if !opts[:'cid'].nil?
      query_params[:'direct_only'] = opts[:'direct_only'] if !opts[:'direct_only'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FlightcontrolapiCombinedUserRolesResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"UserManagement.combined_user_roles_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserManagement#combined_user_roles_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get User Grant(s). This endpoint lists both direct as well as flight control grants between a User and a Customer.
    # @param user_uuid [String] User UUID to get available roles for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cid Customer ID to get grants for. Empty CID would result in Role IDs for user against current CID in view.
    # @option opts [Boolean] :direct_only Specifies if to request direct Only role grants or all role grants between user and CID (specified in query params) (default to false)
    # @option opts [String] :filter Filter using a query in Falcon Query Language (FQL). Supported filters: expires_at, role_id, role_name
    # @option opts [Integer] :offset The offset to start retrieving records from (default to 0)
    # @option opts [Integer] :limit The maximum records to return. [1-500] (default to 100)
    # @option opts [String] :sort The property to sort by (default to 'role_name|asc')
    # @return [FlightcontrolapiCombinedUserRolesResponseV2]
    def combined_user_roles_v2(user_uuid, opts = {})
      data, _status_code, _headers = combined_user_roles_v2_with_http_info(user_uuid, opts)
      data
    end

    # Get User Grant(s). This endpoint lists both direct as well as flight control grants between a User and a Customer.
    # @param user_uuid [String] User UUID to get available roles for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cid Customer ID to get grants for. Empty CID would result in Role IDs for user against current CID in view.
    # @option opts [Boolean] :direct_only Specifies if to request direct Only role grants or all role grants between user and CID (specified in query params) (default to false)
    # @option opts [String] :filter Filter using a query in Falcon Query Language (FQL). Supported filters: expires_at, role_id, role_name
    # @option opts [Integer] :offset The offset to start retrieving records from (default to 0)
    # @option opts [Integer] :limit The maximum records to return. [1-500] (default to 100)
    # @option opts [String] :sort The property to sort by (default to 'role_name|asc')
    # @return [Array<(FlightcontrolapiCombinedUserRolesResponseV2, Integer, Hash)>] FlightcontrolapiCombinedUserRolesResponseV2 data, response status code and response headers
    def combined_user_roles_v2_with_http_info(user_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserManagement.combined_user_roles_v2 ...'
      end
      # verify the required parameter 'user_uuid' is set
      if @api_client.config.client_side_validation && user_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'user_uuid' when calling UserManagement.combined_user_roles_v2"
      end
      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling UserManagement.combined_user_roles_v2, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 500
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling UserManagement.combined_user_roles_v2, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling UserManagement.combined_user_roles_v2, must be greater than or equal to 1.'
      end

      allowable_values = ["cid|asc", "cid|desc", "expires_at|asc", "expires_at|desc", "role_name|asc", "role_name|desc", "type|asc", "type|desc", "user_uuid|asc", "user_uuid|desc"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/user-management/combined/user-roles/v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'user_uuid'] = user_uuid
      query_params[:'cid'] = opts[:'cid'] if !opts[:'cid'].nil?
      query_params[:'direct_only'] = opts[:'direct_only'] if !opts[:'direct_only'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FlightcontrolapiCombinedUserRolesResponseV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"UserManagement.combined_user_roles_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserManagement#combined_user_roles_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deprecated : Please use POST /user-management/entities/users/v1. Create a new user. After creating a user, assign one or more roles with POST /user-roles/entities/user-roles/v1
    # @param body [DomainUserCreateRequest] Attributes for this user. &#x60;uid&#x60; (required) is the user&#39;s email address, which is their username in Falcon.  Optional attributes:  &lt;ul&gt;&lt;li&gt;&#x60;firstName&#x60;&lt;/li&gt;&lt;li&gt;&#x60;lastName&#x60;&lt;/li&gt;&lt;li&gt;&#x60;password&#x60;&lt;/li&gt;&lt;/ul&gt;  As a best practice, we recommend omitting &#x60;password&#x60;. If single sign-on is enabled for your customer account, the &#x60;password&#x60; attribute is ignored. If single sign-on is not enabled, we send a user activation request to their email address when you create the user with no &#x60;password&#x60;. The user should use the activation email to set their own password.
    # @param [Hash] opts the optional parameters
    # @return [ApiUserMetadataResponse]
    def create_user(body, opts = {})
      data, _status_code, _headers = create_user_with_http_info(body, opts)
      data
    end

    # Deprecated : Please use POST /user-management/entities/users/v1. Create a new user. After creating a user, assign one or more roles with POST /user-roles/entities/user-roles/v1
    # @param body [DomainUserCreateRequest] Attributes for this user. &#x60;uid&#x60; (required) is the user&#39;s email address, which is their username in Falcon.  Optional attributes:  &lt;ul&gt;&lt;li&gt;&#x60;firstName&#x60;&lt;/li&gt;&lt;li&gt;&#x60;lastName&#x60;&lt;/li&gt;&lt;li&gt;&#x60;password&#x60;&lt;/li&gt;&lt;/ul&gt;  As a best practice, we recommend omitting &#x60;password&#x60;. If single sign-on is enabled for your customer account, the &#x60;password&#x60; attribute is ignored. If single sign-on is not enabled, we send a user activation request to their email address when you create the user with no &#x60;password&#x60;. The user should use the activation email to set their own password.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiUserMetadataResponse, Integer, Hash)>] ApiUserMetadataResponse data, response status code and response headers
    def create_user_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserManagement.create_user ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserManagement.create_user"
      end
      # resource path
      local_var_path = '/users/entities/users/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiUserMetadataResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"UserManagement.create_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserManagement#create_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new user. After creating a user, assign one or more roles with POST '/user-management/entities/user-role-actions/v1'
    # @param body [DomainCreateUserRequest] Attributes for this user. &#x60;uid&#x60; (required) is the user&#39;s email address, which is their username in Falcon.  Optional attributes:  &lt;ul&gt;&lt;li&gt;&#x60;firstName&#x60;&lt;/li&gt;&lt;li&gt;&#x60;lastName&#x60;&lt;/li&gt;&lt;li&gt;&#x60;password&#x60;&lt;/li&gt;&lt;/ul&gt;  As a best practice, we recommend omitting &#x60;password&#x60;. If single sign-on is enabled for your customer account, the &#x60;password&#x60; attribute is ignored. If single sign-on is not enabled, we send a user activation request to their email address when you create the user with no &#x60;password&#x60;. The user should use the activation email to set their own password.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :validate_only Validate of user is allowed, but do not create user. (default to false)
    # @return [FlightcontrolapiUserResponse]
    def create_user_v1(body, opts = {})
      data, _status_code, _headers = create_user_v1_with_http_info(body, opts)
      data
    end

    # Create a new user. After creating a user, assign one or more roles with POST &#39;/user-management/entities/user-role-actions/v1&#39;
    # @param body [DomainCreateUserRequest] Attributes for this user. &#x60;uid&#x60; (required) is the user&#39;s email address, which is their username in Falcon.  Optional attributes:  &lt;ul&gt;&lt;li&gt;&#x60;firstName&#x60;&lt;/li&gt;&lt;li&gt;&#x60;lastName&#x60;&lt;/li&gt;&lt;li&gt;&#x60;password&#x60;&lt;/li&gt;&lt;/ul&gt;  As a best practice, we recommend omitting &#x60;password&#x60;. If single sign-on is enabled for your customer account, the &#x60;password&#x60; attribute is ignored. If single sign-on is not enabled, we send a user activation request to their email address when you create the user with no &#x60;password&#x60;. The user should use the activation email to set their own password.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :validate_only Validate of user is allowed, but do not create user. (default to false)
    # @return [Array<(FlightcontrolapiUserResponse, Integer, Hash)>] FlightcontrolapiUserResponse data, response status code and response headers
    def create_user_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserManagement.create_user_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserManagement.create_user_v1"
      end
      # resource path
      local_var_path = '/user-management/entities/users/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'validate_only'] = opts[:'validate_only'] if !opts[:'validate_only'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'FlightcontrolapiUserResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"UserManagement.create_user_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserManagement#create_user_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deprecated : Please use DELETE /user-management/entities/users/v1. Delete a user permanently
    # @param user_uuid [String] ID of a user. Find a user&#39;s ID from &#x60;/users/entities/user/v1&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [MsaReplyMetaOnly]
    def delete_user(user_uuid, opts = {})
      data, _status_code, _headers = delete_user_with_http_info(user_uuid, opts)
      data
    end

    # Deprecated : Please use DELETE /user-management/entities/users/v1. Delete a user permanently
    # @param user_uuid [String] ID of a user. Find a user&#39;s ID from &#x60;/users/entities/user/v1&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MsaReplyMetaOnly, Integer, Hash)>] MsaReplyMetaOnly data, response status code and response headers
    def delete_user_with_http_info(user_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserManagement.delete_user ...'
      end
      # verify the required parameter 'user_uuid' is set
      if @api_client.config.client_side_validation && user_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'user_uuid' when calling UserManagement.delete_user"
      end
      # resource path
      local_var_path = '/users/entities/users/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'user_uuid'] = user_uuid

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaReplyMetaOnly'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"UserManagement.delete_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserManagement#delete_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a user permanently.
    # @param user_uuid [String] User UUID.
    # @param [Hash] opts the optional parameters
    # @return [MsaspecResponseFields]
    def delete_user_v1(user_uuid, opts = {})
      data, _status_code, _headers = delete_user_v1_with_http_info(user_uuid, opts)
      data
    end

    # Delete a user permanently.
    # @param user_uuid [String] User UUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MsaspecResponseFields, Integer, Hash)>] MsaspecResponseFields data, response status code and response headers
    def delete_user_v1_with_http_info(user_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserManagement.delete_user_v1 ...'
      end
      # verify the required parameter 'user_uuid' is set
      if @api_client.config.client_side_validation && user_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'user_uuid' when calling UserManagement.delete_user_v1"
      end
      # resource path
      local_var_path = '/user-management/entities/users/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'user_uuid'] = user_uuid

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaspecResponseFields'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"UserManagement.delete_user_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserManagement#delete_user_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get info about a role
    # @param ids [Array<String>] ID of a role. Find a role ID from &#x60;/user-management/queries/roles/v1&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cid Customer ID to get available roles for. Empty CID would result in Role IDs for current CID in view.
    # @return [FlightcontrolapiGetRolesResponse]
    def entities_roles_v1(ids, opts = {})
      data, _status_code, _headers = entities_roles_v1_with_http_info(ids, opts)
      data
    end

    # Get info about a role
    # @param ids [Array<String>] ID of a role. Find a role ID from &#x60;/user-management/queries/roles/v1&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cid Customer ID to get available roles for. Empty CID would result in Role IDs for current CID in view.
    # @return [Array<(FlightcontrolapiGetRolesResponse, Integer, Hash)>] FlightcontrolapiGetRolesResponse data, response status code and response headers
    def entities_roles_v1_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserManagement.entities_roles_v1 ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling UserManagement.entities_roles_v1"
      end
      # resource path
      local_var_path = '/user-management/entities/roles/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)
      query_params[:'cid'] = opts[:'cid'] if !opts[:'cid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FlightcontrolapiGetRolesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"UserManagement.entities_roles_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserManagement#entities_roles_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deprecated : Please use GET /user-management/queries/roles/v1. Show role IDs for all roles available in your customer account. For more information on each role, provide the role ID to `/customer/entities/roles/v1`.
    # @param [Hash] opts the optional parameters
    # @return [MsaQueryResponse]
    def get_available_role_ids(opts = {})
      data, _status_code, _headers = get_available_role_ids_with_http_info(opts)
      data
    end

    # Deprecated : Please use GET /user-management/queries/roles/v1. Show role IDs for all roles available in your customer account. For more information on each role, provide the role ID to &#x60;/customer/entities/roles/v1&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MsaQueryResponse, Integer, Hash)>] MsaQueryResponse data, response status code and response headers
    def get_available_role_ids_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserManagement.get_available_role_ids ...'
      end
      # resource path
      local_var_path = '/user-roles/queries/user-role-ids-by-cid/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"UserManagement.get_available_role_ids",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserManagement#get_available_role_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deprecated : Please use GET /user-management/entities/roles/v1. Get info about a role
    # @param ids [Array<String>] ID of a role. Find a role ID from &#x60;/customer/queries/roles/v1&#x60; or &#x60;/users/queries/roles/v1&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [ApiUserRoleResponse]
    def get_roles(ids, opts = {})
      data, _status_code, _headers = get_roles_with_http_info(ids, opts)
      data
    end

    # Deprecated : Please use GET /user-management/entities/roles/v1. Get info about a role
    # @param ids [Array<String>] ID of a role. Find a role ID from &#x60;/customer/queries/roles/v1&#x60; or &#x60;/users/queries/roles/v1&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiUserRoleResponse, Integer, Hash)>] ApiUserRoleResponse data, response status code and response headers
    def get_roles_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserManagement.get_roles ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling UserManagement.get_roles"
      end
      # resource path
      local_var_path = '/user-roles/entities/user-roles/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiUserRoleResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"UserManagement.get_roles",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserManagement#get_roles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deprecated : Please use GET /user-management/combined/user-roles/v1. Show role IDs of roles assigned to a user. For more information on each role, provide the role ID to `/customer/entities/roles/v1`.
    # @param user_uuid [String] ID of a user. Find a user&#39;s ID from &#x60;/users/entities/user/v1&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [MsaQueryResponse]
    def get_user_role_ids(user_uuid, opts = {})
      data, _status_code, _headers = get_user_role_ids_with_http_info(user_uuid, opts)
      data
    end

    # Deprecated : Please use GET /user-management/combined/user-roles/v1. Show role IDs of roles assigned to a user. For more information on each role, provide the role ID to &#x60;/customer/entities/roles/v1&#x60;.
    # @param user_uuid [String] ID of a user. Find a user&#39;s ID from &#x60;/users/entities/user/v1&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MsaQueryResponse, Integer, Hash)>] MsaQueryResponse data, response status code and response headers
    def get_user_role_ids_with_http_info(user_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserManagement.get_user_role_ids ...'
      end
      # verify the required parameter 'user_uuid' is set
      if @api_client.config.client_side_validation && user_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'user_uuid' when calling UserManagement.get_user_role_ids"
      end
      # resource path
      local_var_path = '/user-roles/queries/user-role-ids-by-user-uuid/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'user_uuid'] = user_uuid

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"UserManagement.get_user_role_ids",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserManagement#get_user_role_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deprecated : Please use POST /user-management/entities/user-role-actions/v1. Assign one or more roles to a user
    # @param user_uuid [String] ID of a user. Find a user&#39;s ID from &#x60;/users/entities/user/v1&#x60;.
    # @param body [DomainRoleIDs] Role ID(s) of the role you want to assign
    # @param [Hash] opts the optional parameters
    # @return [ApiUserRoleIDsResponse]
    def grant_user_role_ids(user_uuid, body, opts = {})
      data, _status_code, _headers = grant_user_role_ids_with_http_info(user_uuid, body, opts)
      data
    end

    # Deprecated : Please use POST /user-management/entities/user-role-actions/v1. Assign one or more roles to a user
    # @param user_uuid [String] ID of a user. Find a user&#39;s ID from &#x60;/users/entities/user/v1&#x60;.
    # @param body [DomainRoleIDs] Role ID(s) of the role you want to assign
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiUserRoleIDsResponse, Integer, Hash)>] ApiUserRoleIDsResponse data, response status code and response headers
    def grant_user_role_ids_with_http_info(user_uuid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserManagement.grant_user_role_ids ...'
      end
      # verify the required parameter 'user_uuid' is set
      if @api_client.config.client_side_validation && user_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'user_uuid' when calling UserManagement.grant_user_role_ids"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserManagement.grant_user_role_ids"
      end
      # resource path
      local_var_path = '/user-roles/entities/user-roles/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'user_uuid'] = user_uuid

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiUserRoleIDsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"UserManagement.grant_user_role_ids",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserManagement#grant_user_role_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show role IDs for all roles available in your customer account. For more information on each role, provide the role ID to `/user-management/entities/roles/v1`.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cid Customer ID to get available roles for. Empty CID would result in Role IDs for current CID in view.
    # @option opts [String] :user_uuid User UUID to get available roles for. Empty User UUID would returns all roles IDs available for customer.
    # @option opts [String] :action Actionable purpose of the query (default to 'grant')
    # @return [MsaspecQueryResponse]
    def queries_roles_v1(opts = {})
      data, _status_code, _headers = queries_roles_v1_with_http_info(opts)
      data
    end

    # Show role IDs for all roles available in your customer account. For more information on each role, provide the role ID to &#x60;/user-management/entities/roles/v1&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cid Customer ID to get available roles for. Empty CID would result in Role IDs for current CID in view.
    # @option opts [String] :user_uuid User UUID to get available roles for. Empty User UUID would returns all roles IDs available for customer.
    # @option opts [String] :action Actionable purpose of the query (default to 'grant')
    # @return [Array<(MsaspecQueryResponse, Integer, Hash)>] MsaspecQueryResponse data, response status code and response headers
    def queries_roles_v1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserManagement.queries_roles_v1 ...'
      end
      # resource path
      local_var_path = '/user-management/queries/roles/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cid'] = opts[:'cid'] if !opts[:'cid'].nil?
      query_params[:'user_uuid'] = opts[:'user_uuid'] if !opts[:'user_uuid'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaspecQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"UserManagement.queries_roles_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserManagement#queries_roles_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List user IDs for all users in your customer account. For more information on each user, provide the user ID to `/user-management/entities/users/GET/v1`.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter using a query in Falcon Query Language (FQL). Supported filters: assigned_cids, cid, direct_assigned_cids, factors, first_name, has_temporary_roles, last_name, name, status, temporarily_assigned_cids, uid
    # @option opts [Integer] :offset The offset to start retrieving records from (default to 0)
    # @option opts [Integer] :limit The maximum records to return. [1-500] (default to 100)
    # @option opts [String] :sort The property to sort by (default to 'uid|asc')
    # @return [MsaspecQueryResponse]
    def query_user_v1(opts = {})
      data, _status_code, _headers = query_user_v1_with_http_info(opts)
      data
    end

    # List user IDs for all users in your customer account. For more information on each user, provide the user ID to &#x60;/user-management/entities/users/GET/v1&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter using a query in Falcon Query Language (FQL). Supported filters: assigned_cids, cid, direct_assigned_cids, factors, first_name, has_temporary_roles, last_name, name, status, temporarily_assigned_cids, uid
    # @option opts [Integer] :offset The offset to start retrieving records from (default to 0)
    # @option opts [Integer] :limit The maximum records to return. [1-500] (default to 100)
    # @option opts [String] :sort The property to sort by (default to 'uid|asc')
    # @return [Array<(MsaspecQueryResponse, Integer, Hash)>] MsaspecQueryResponse data, response status code and response headers
    def query_user_v1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserManagement.query_user_v1 ...'
      end
      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling UserManagement.query_user_v1, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 500
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling UserManagement.query_user_v1, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling UserManagement.query_user_v1, must be greater than or equal to 1.'
      end

      allowable_values = ["cid_name|asc", "cid_name|desc", "created_at|asc", "created_at|desc", "first_name|asc", "first_name|desc", "has_temporary_roles|asc", "has_temporary_roles|desc", "last_login_at|asc", "last_login_at|desc", "last_name|asc", "last_name|desc", "name|asc", "name|desc", "status|asc", "status|desc", "temporarily_assigned_cids|asc", "temporarily_assigned_cids|desc", "uid|asc", "uid|desc"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/user-management/queries/users/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaspecQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"UserManagement.query_user_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserManagement#query_user_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deprecated : Please use POST /user-management/entities/users/GET/v1. List the usernames (usually an email address) for all users in your customer account
    # @param [Hash] opts the optional parameters
    # @return [MsaQueryResponse]
    def retrieve_emails_by_cid(opts = {})
      data, _status_code, _headers = retrieve_emails_by_cid_with_http_info(opts)
      data
    end

    # Deprecated : Please use POST /user-management/entities/users/GET/v1. List the usernames (usually an email address) for all users in your customer account
    # @param [Hash] opts the optional parameters
    # @return [Array<(MsaQueryResponse, Integer, Hash)>] MsaQueryResponse data, response status code and response headers
    def retrieve_emails_by_cid_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserManagement.retrieve_emails_by_cid ...'
      end
      # resource path
      local_var_path = '/users/queries/emails-by-cid/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"UserManagement.retrieve_emails_by_cid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserManagement#retrieve_emails_by_cid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deprecated : Please use POST /user-management/entities/users/GET/v1. Get info about a user
    # @param ids [Array<String>] ID of a user. Find a user&#39;s ID from &#x60;/users/entities/user/v1&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [ApiUserMetadataResponse]
    def retrieve_user(ids, opts = {})
      data, _status_code, _headers = retrieve_user_with_http_info(ids, opts)
      data
    end

    # Deprecated : Please use POST /user-management/entities/users/GET/v1. Get info about a user
    # @param ids [Array<String>] ID of a user. Find a user&#39;s ID from &#x60;/users/entities/user/v1&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiUserMetadataResponse, Integer, Hash)>] ApiUserMetadataResponse data, response status code and response headers
    def retrieve_user_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserManagement.retrieve_user ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling UserManagement.retrieve_user"
      end
      # resource path
      local_var_path = '/users/entities/users/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiUserMetadataResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"UserManagement.retrieve_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserManagement#retrieve_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deprecated : Please use GET /user-management/queries/users/v1. Get a user's ID by providing a username (usually an email address)
    # @param uid [Array<String>] A username. This is usually the user&#39;s email address, but may vary based on your configuration.
    # @param [Hash] opts the optional parameters
    # @return [MsaQueryResponse]
    def retrieve_user_uuid(uid, opts = {})
      data, _status_code, _headers = retrieve_user_uuid_with_http_info(uid, opts)
      data
    end

    # Deprecated : Please use GET /user-management/queries/users/v1. Get a user&#39;s ID by providing a username (usually an email address)
    # @param uid [Array<String>] A username. This is usually the user&#39;s email address, but may vary based on your configuration.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MsaQueryResponse, Integer, Hash)>] MsaQueryResponse data, response status code and response headers
    def retrieve_user_uuid_with_http_info(uid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserManagement.retrieve_user_uuid ...'
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling UserManagement.retrieve_user_uuid"
      end
      # resource path
      local_var_path = '/users/queries/user-uuids-by-email/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'uid'] = @api_client.build_collection_param(uid, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"UserManagement.retrieve_user_uuid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserManagement#retrieve_user_uuid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deprecated : Please use GET /user-management/queries/users/v1. List user IDs for all users in your customer account. For more information on each user, provide the user ID to `/users/entities/user/v1`.
    # @param [Hash] opts the optional parameters
    # @return [MsaQueryResponse]
    def retrieve_user_uuids_by_cid(opts = {})
      data, _status_code, _headers = retrieve_user_uuids_by_cid_with_http_info(opts)
      data
    end

    # Deprecated : Please use GET /user-management/queries/users/v1. List user IDs for all users in your customer account. For more information on each user, provide the user ID to &#x60;/users/entities/user/v1&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MsaQueryResponse, Integer, Hash)>] MsaQueryResponse data, response status code and response headers
    def retrieve_user_uuids_by_cid_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserManagement.retrieve_user_uuids_by_cid ...'
      end
      # resource path
      local_var_path = '/users/queries/user-uuids-by-cid/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"UserManagement.retrieve_user_uuids_by_cid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserManagement#retrieve_user_uuids_by_cid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get info about users including their name, UID and CID by providing user UUIDs
    # @param body [MsaspecIdsRequest] Maximum of 5000 User UUIDs can be specified per request.
    # @param [Hash] opts the optional parameters
    # @return [FlightcontrolapiUserResponse]
    def retrieve_users_getv1(body, opts = {})
      data, _status_code, _headers = retrieve_users_getv1_with_http_info(body, opts)
      data
    end

    # Get info about users including their name, UID and CID by providing user UUIDs
    # @param body [MsaspecIdsRequest] Maximum of 5000 User UUIDs can be specified per request.
    # @param [Hash] opts the optional parameters
    # @return [Array<(FlightcontrolapiUserResponse, Integer, Hash)>] FlightcontrolapiUserResponse data, response status code and response headers
    def retrieve_users_getv1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserManagement.retrieve_users_getv1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserManagement.retrieve_users_getv1"
      end
      # resource path
      local_var_path = '/user-management/entities/users/GET/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'FlightcontrolapiUserResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"UserManagement.retrieve_users_getv1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserManagement#retrieve_users_getv1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deprecated : Please use POST /user-management/entities/user-role-actions/v1. Revoke one or more roles from a user
    # @param user_uuid [String] ID of a user. Find a user&#39;s ID from &#x60;/users/entities/user/v1&#x60;.
    # @param ids [Array<String>] One or more role IDs to revoke. Find a role&#39;s ID from &#x60;/users/queries/roles/v1&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [ApiUserRoleIDsResponse]
    def revoke_user_role_ids(user_uuid, ids, opts = {})
      data, _status_code, _headers = revoke_user_role_ids_with_http_info(user_uuid, ids, opts)
      data
    end

    # Deprecated : Please use POST /user-management/entities/user-role-actions/v1. Revoke one or more roles from a user
    # @param user_uuid [String] ID of a user. Find a user&#39;s ID from &#x60;/users/entities/user/v1&#x60;.
    # @param ids [Array<String>] One or more role IDs to revoke. Find a role&#39;s ID from &#x60;/users/queries/roles/v1&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiUserRoleIDsResponse, Integer, Hash)>] ApiUserRoleIDsResponse data, response status code and response headers
    def revoke_user_role_ids_with_http_info(user_uuid, ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserManagement.revoke_user_role_ids ...'
      end
      # verify the required parameter 'user_uuid' is set
      if @api_client.config.client_side_validation && user_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'user_uuid' when calling UserManagement.revoke_user_role_ids"
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling UserManagement.revoke_user_role_ids"
      end
      # resource path
      local_var_path = '/user-roles/entities/user-roles/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'user_uuid'] = user_uuid
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiUserRoleIDsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"UserManagement.revoke_user_role_ids",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserManagement#revoke_user_role_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deprecated : Please use PATCH /user-management/entities/users/v1. Modify an existing user's first or last name
    # @param user_uuid [String] ID of a user. Find a user&#39;s ID from &#x60;/users/entities/user/v1&#x60;.
    # @param body [DomainUpdateUserFields] Attributes for this user. All attributes (shown below) are optional.
    # @param [Hash] opts the optional parameters
    # @return [ApiUserMetadataResponse]
    def update_user(user_uuid, body, opts = {})
      data, _status_code, _headers = update_user_with_http_info(user_uuid, body, opts)
      data
    end

    # Deprecated : Please use PATCH /user-management/entities/users/v1. Modify an existing user&#39;s first or last name
    # @param user_uuid [String] ID of a user. Find a user&#39;s ID from &#x60;/users/entities/user/v1&#x60;.
    # @param body [DomainUpdateUserFields] Attributes for this user. All attributes (shown below) are optional.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiUserMetadataResponse, Integer, Hash)>] ApiUserMetadataResponse data, response status code and response headers
    def update_user_with_http_info(user_uuid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserManagement.update_user ...'
      end
      # verify the required parameter 'user_uuid' is set
      if @api_client.config.client_side_validation && user_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'user_uuid' when calling UserManagement.update_user"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserManagement.update_user"
      end
      # resource path
      local_var_path = '/users/entities/users/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'user_uuid'] = user_uuid

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiUserMetadataResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"UserManagement.update_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserManagement#update_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Modify an existing user's first or last name.
    # @param user_uuid [String] user uuid
    # @param body [DomainUpdateUserRequest] Both firstName and lastName have to specified.
    # @param [Hash] opts the optional parameters
    # @return [FlightcontrolapiUserResponse]
    def update_user_v1(user_uuid, body, opts = {})
      data, _status_code, _headers = update_user_v1_with_http_info(user_uuid, body, opts)
      data
    end

    # Modify an existing user&#39;s first or last name.
    # @param user_uuid [String] user uuid
    # @param body [DomainUpdateUserRequest] Both firstName and lastName have to specified.
    # @param [Hash] opts the optional parameters
    # @return [Array<(FlightcontrolapiUserResponse, Integer, Hash)>] FlightcontrolapiUserResponse data, response status code and response headers
    def update_user_v1_with_http_info(user_uuid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserManagement.update_user_v1 ...'
      end
      # verify the required parameter 'user_uuid' is set
      if @api_client.config.client_side_validation && user_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'user_uuid' when calling UserManagement.update_user_v1"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserManagement.update_user_v1"
      end
      # resource path
      local_var_path = '/user-management/entities/users/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'user_uuid'] = user_uuid

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'FlightcontrolapiUserResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"UserManagement.update_user_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserManagement#update_user_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Apply actions to one or more User. Available action names: reset_2fa, reset_password. User UUIDs can be provided in `ids` param as part of request payload.
    # @param body [DomainUserActionRequest] User UUIDs and Action Name params are required. Allowed values for Action Name param includes &#39;reset_2fa&#39; and &#39;reset_password&#39;
    # @param [Hash] opts the optional parameters
    # @return [MsaspecResponseFields]
    def user_action_v1(body, opts = {})
      data, _status_code, _headers = user_action_v1_with_http_info(body, opts)
      data
    end

    # Apply actions to one or more User. Available action names: reset_2fa, reset_password. User UUIDs can be provided in &#x60;ids&#x60; param as part of request payload.
    # @param body [DomainUserActionRequest] User UUIDs and Action Name params are required. Allowed values for Action Name param includes &#39;reset_2fa&#39; and &#39;reset_password&#39;
    # @param [Hash] opts the optional parameters
    # @return [Array<(MsaspecResponseFields, Integer, Hash)>] MsaspecResponseFields data, response status code and response headers
    def user_action_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserManagement.user_action_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserManagement.user_action_v1"
      end
      # resource path
      local_var_path = '/user-management/entities/user-actions/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'MsaspecResponseFields'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"UserManagement.user_action_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserManagement#user_action_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Grant or Revoke one or more role(s) to a user against a CID. User UUID, CID and Role ID(s) can be provided in request payload. Available Action(s) : grant, revoke
    # @param body [FlightcontrolapiGrantInput] CID, RoleID(s), User UUID and Action are required. Allowed values for Action param include &#39;grant&#39; and &#39;revoke&#39;.
    # @param [Hash] opts the optional parameters
    # @return [MsaspecResponseFields]
    def user_roles_action_v1(body, opts = {})
      data, _status_code, _headers = user_roles_action_v1_with_http_info(body, opts)
      data
    end

    # Grant or Revoke one or more role(s) to a user against a CID. User UUID, CID and Role ID(s) can be provided in request payload. Available Action(s) : grant, revoke
    # @param body [FlightcontrolapiGrantInput] CID, RoleID(s), User UUID and Action are required. Allowed values for Action param include &#39;grant&#39; and &#39;revoke&#39;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MsaspecResponseFields, Integer, Hash)>] MsaspecResponseFields data, response status code and response headers
    def user_roles_action_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserManagement.user_roles_action_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserManagement.user_roles_action_v1"
      end
      # resource path
      local_var_path = '/user-management/entities/user-role-actions/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'MsaspecResponseFields'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"UserManagement.user_roles_action_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserManagement#user_roles_action_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
