=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'cgi'

module Falcon
  class Alerts
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Deprecated: please use version v2 of this endpoint. Retrieves all Alerts ids that match a given query.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The first detection to return, where &#x60;0&#x60; is the latest detection. Use with the &#x60;offset&#x60; parameter to manage pagination of results.
    # @option opts [Integer] :limit The maximum number of detections to return in this response (default: 100; max: 10000). Use this parameter together with the &#x60;offset&#x60; parameter to manage pagination of the results.
    # @option opts [String] :sort Sort parameter takes the form &lt;field|direction&gt;. Direction can be either &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending) order. For example: &#x60;status|asc&#x60; or &#x60;status|desc&#x60;.  The sorting fields can be any keyword field that is part of #domain.Alert except for the text based fields. Most commonly used fields are status, cid, aggregate_id, timestamp, created_timestamp, updated_timestamp, assigned_to_name, assigned_to_uid, assigned_to_uuid, show_in_ui, tactic_id, tactic, technique, technique_id, pattern_id, product, comment, tags If the fields are missing from the Alerts, the service will fallback to its default ordering
    # @option opts [String] :filter Filter Alerts using a query in Falcon Query Language (FQL).Filter fields can be any keyword field that is part of #domain.Alert  An asterisk wildcard &#x60;*&#x60; includes all results.   Empty value means to not filter on anything. Most commonly used filter fields that supports exact match: cid, id, aggregate_id, product, type, pattern_id, platform ... Most commonly used filter fields that supports wildcard (*): assigned_to_name, assigned_to_uuid, tactic_id, technique ... Most commonly filter fields that supports range comparisons (&gt;, &lt;, &gt;&#x3D;, &lt;&#x3D;): severity, created_timestamp, timestamp, updated_timestamp... All filter fields and operations support negation (!).   The full list of valid filter options is extensive. Review it in our [documentation inside the Falcon console](https://falcon.crowdstrike.com/documentation/45/falcon-query-language-fql).
    # @option opts [String] :q Search all alert metadata for the provided string
    # @return [DetectsapiAlertQueryResponse]
    def get_queries_alerts_v1(opts = {})
      data, _status_code, _headers = get_queries_alerts_v1_with_http_info(opts)
      data
    end

    # Deprecated: please use version v2 of this endpoint. Retrieves all Alerts ids that match a given query.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The first detection to return, where &#x60;0&#x60; is the latest detection. Use with the &#x60;offset&#x60; parameter to manage pagination of results.
    # @option opts [Integer] :limit The maximum number of detections to return in this response (default: 100; max: 10000). Use this parameter together with the &#x60;offset&#x60; parameter to manage pagination of the results.
    # @option opts [String] :sort Sort parameter takes the form &lt;field|direction&gt;. Direction can be either &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending) order. For example: &#x60;status|asc&#x60; or &#x60;status|desc&#x60;.  The sorting fields can be any keyword field that is part of #domain.Alert except for the text based fields. Most commonly used fields are status, cid, aggregate_id, timestamp, created_timestamp, updated_timestamp, assigned_to_name, assigned_to_uid, assigned_to_uuid, show_in_ui, tactic_id, tactic, technique, technique_id, pattern_id, product, comment, tags If the fields are missing from the Alerts, the service will fallback to its default ordering
    # @option opts [String] :filter Filter Alerts using a query in Falcon Query Language (FQL).Filter fields can be any keyword field that is part of #domain.Alert  An asterisk wildcard &#x60;*&#x60; includes all results.   Empty value means to not filter on anything. Most commonly used filter fields that supports exact match: cid, id, aggregate_id, product, type, pattern_id, platform ... Most commonly used filter fields that supports wildcard (*): assigned_to_name, assigned_to_uuid, tactic_id, technique ... Most commonly filter fields that supports range comparisons (&gt;, &lt;, &gt;&#x3D;, &lt;&#x3D;): severity, created_timestamp, timestamp, updated_timestamp... All filter fields and operations support negation (!).   The full list of valid filter options is extensive. Review it in our [documentation inside the Falcon console](https://falcon.crowdstrike.com/documentation/45/falcon-query-language-fql).
    # @option opts [String] :q Search all alert metadata for the provided string
    # @return [Array<(DetectsapiAlertQueryResponse, Integer, Hash)>] DetectsapiAlertQueryResponse data, response status code and response headers
    def get_queries_alerts_v1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Alerts.get_queries_alerts_v1 ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 10000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling Alerts.get_queries_alerts_v1, must be smaller than or equal to 10000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling Alerts.get_queries_alerts_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/alerts/queries/alerts/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DetectsapiAlertQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Alerts.get_queries_alerts_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Alerts#get_queries_alerts_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves all Alerts ids that match a given query.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_hidden allows previously hidden alerts to be retrieved (default to true)
    # @option opts [Integer] :offset The first detection to return, where &#x60;0&#x60; is the latest detection. Use with the &#x60;offset&#x60; parameter to manage pagination of results.
    # @option opts [Integer] :limit The maximum number of detections to return in this response (default: 100; max: 10000). Use this parameter together with the &#x60;offset&#x60; parameter to manage pagination of the results.
    # @option opts [String] :sort Sort parameter takes the form &lt;field|direction&gt;. Direction can be either &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending) order. For example: &#x60;status|asc&#x60; or &#x60;status|desc&#x60;.  The sorting fields can be any keyword field that is part of #domain.Alert except for the text based fields. Most commonly used fields are status, cid, aggregate_id, timestamp, created_timestamp, updated_timestamp, assigned_to_name, assigned_to_uid, assigned_to_uuid, show_in_ui, tactic_id, tactic, technique, technique_id, pattern_id, product, comment, tags If the fields are missing from the Alerts, the service will fallback to its default ordering
    # @option opts [String] :filter Filter Alerts using a query in Falcon Query Language (FQL).Filter fields can be any keyword field that is part of #domain.Alert  An asterisk wildcard &#x60;*&#x60; includes all results.   Empty value means to not filter on anything. Most commonly used filter fields that supports exact match: cid, id, aggregate_id, product, type, pattern_id, platform ... Most commonly used filter fields that supports wildcard (*): assigned_to_name, assigned_to_uuid, tactic_id, technique ... Most commonly filter fields that supports range comparisons (&gt;, &lt;, &gt;&#x3D;, &lt;&#x3D;): severity, created_timestamp, timestamp, updated_timestamp... All filter fields and operations support negation (!).   The full list of valid filter options is extensive. Review it in our [documentation inside the Falcon console](https://falcon.crowdstrike.com/documentation/45/falcon-query-language-fql).
    # @option opts [String] :q Search all alert metadata for the provided string
    # @return [DetectsapiAlertQueryResponse]
    def get_queries_alerts_v2(opts = {})
      data, _status_code, _headers = get_queries_alerts_v2_with_http_info(opts)
      data
    end

    # Retrieves all Alerts ids that match a given query.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_hidden allows previously hidden alerts to be retrieved (default to true)
    # @option opts [Integer] :offset The first detection to return, where &#x60;0&#x60; is the latest detection. Use with the &#x60;offset&#x60; parameter to manage pagination of results.
    # @option opts [Integer] :limit The maximum number of detections to return in this response (default: 100; max: 10000). Use this parameter together with the &#x60;offset&#x60; parameter to manage pagination of the results.
    # @option opts [String] :sort Sort parameter takes the form &lt;field|direction&gt;. Direction can be either &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending) order. For example: &#x60;status|asc&#x60; or &#x60;status|desc&#x60;.  The sorting fields can be any keyword field that is part of #domain.Alert except for the text based fields. Most commonly used fields are status, cid, aggregate_id, timestamp, created_timestamp, updated_timestamp, assigned_to_name, assigned_to_uid, assigned_to_uuid, show_in_ui, tactic_id, tactic, technique, technique_id, pattern_id, product, comment, tags If the fields are missing from the Alerts, the service will fallback to its default ordering
    # @option opts [String] :filter Filter Alerts using a query in Falcon Query Language (FQL).Filter fields can be any keyword field that is part of #domain.Alert  An asterisk wildcard &#x60;*&#x60; includes all results.   Empty value means to not filter on anything. Most commonly used filter fields that supports exact match: cid, id, aggregate_id, product, type, pattern_id, platform ... Most commonly used filter fields that supports wildcard (*): assigned_to_name, assigned_to_uuid, tactic_id, technique ... Most commonly filter fields that supports range comparisons (&gt;, &lt;, &gt;&#x3D;, &lt;&#x3D;): severity, created_timestamp, timestamp, updated_timestamp... All filter fields and operations support negation (!).   The full list of valid filter options is extensive. Review it in our [documentation inside the Falcon console](https://falcon.crowdstrike.com/documentation/45/falcon-query-language-fql).
    # @option opts [String] :q Search all alert metadata for the provided string
    # @return [Array<(DetectsapiAlertQueryResponse, Integer, Hash)>] DetectsapiAlertQueryResponse data, response status code and response headers
    def get_queries_alerts_v2_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Alerts.get_queries_alerts_v2 ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 10000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling Alerts.get_queries_alerts_v2, must be smaller than or equal to 10000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling Alerts.get_queries_alerts_v2, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/alerts/queries/alerts/v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include_hidden'] = opts[:'include_hidden'] if !opts[:'include_hidden'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DetectsapiAlertQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Alerts.get_queries_alerts_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Alerts#get_queries_alerts_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deprecated: Please use version v3 of this endpoint. Perform actions on Alerts identified by composite ID(s) in request. Each action has a name and a description which describes what the action does. If a request adds and removes tag in a single request, the order of processing would be to remove tags before adding new ones in.
    # @param body [DetectsapiPatchEntitiesAlertsV2Request] &#x60;ids&#x60; - IDs of Alerts to modify.  &#x60;action_parameters&#x60; values - &#x60;assign_to_uuid&#x60;  - Assign Alert to user UUID, such as &#x60;00000000-0000-0000-0000-000000000000&#x60; - &#x60;assign_to_user_id&#x60;  - Assign Alert to user ID, such as &#x60;user@example.com&#x60; - &#x60;assign_to_name&#x60;  - Assign Alert to username, such as &#x60;John Doe&#x60; - &#x60;unassign&#x60;  - Unassign Alert clears out the assigned user UUID, user ID, and username. - &#x60;add_tag&#x60;   - Add a tag to the Alert. - &#x60;remove_tag&#x60;  - Remove a tag from the Alert. - &#x60;remove_tags_by_prefix&#x60;  - Remove tags from the Alert based on the prefix. - &#x60;append_comment&#x60;  - Comments are displayed with the Alert in Falcon and are usually used to provide context or notes for other Falcon users. An Alert can have multiple comments over time. - &#x60;update_status&#x60; values  - &#x60;new&#x60;  - &#x60;in_progress&#x60;  - &#x60;reopened&#x60;  - &#x60;closed&#x60; - &#x60;show_in_ui&#x60; values  - &#x60;true&#x60;: This alert is displayed in Falcon  - &#x60;false&#x60;: This alert is not displayed in Falcon.
    # @param [Hash] opts the optional parameters
    # @return [DetectsapiResponseFields]
    def patch_entities_alerts_v2(body, opts = {})
      data, _status_code, _headers = patch_entities_alerts_v2_with_http_info(body, opts)
      data
    end

    # Deprecated: Please use version v3 of this endpoint. Perform actions on Alerts identified by composite ID(s) in request. Each action has a name and a description which describes what the action does. If a request adds and removes tag in a single request, the order of processing would be to remove tags before adding new ones in.
    # @param body [DetectsapiPatchEntitiesAlertsV2Request] &#x60;ids&#x60; - IDs of Alerts to modify.  &#x60;action_parameters&#x60; values - &#x60;assign_to_uuid&#x60;  - Assign Alert to user UUID, such as &#x60;00000000-0000-0000-0000-000000000000&#x60; - &#x60;assign_to_user_id&#x60;  - Assign Alert to user ID, such as &#x60;user@example.com&#x60; - &#x60;assign_to_name&#x60;  - Assign Alert to username, such as &#x60;John Doe&#x60; - &#x60;unassign&#x60;  - Unassign Alert clears out the assigned user UUID, user ID, and username. - &#x60;add_tag&#x60;   - Add a tag to the Alert. - &#x60;remove_tag&#x60;  - Remove a tag from the Alert. - &#x60;remove_tags_by_prefix&#x60;  - Remove tags from the Alert based on the prefix. - &#x60;append_comment&#x60;  - Comments are displayed with the Alert in Falcon and are usually used to provide context or notes for other Falcon users. An Alert can have multiple comments over time. - &#x60;update_status&#x60; values  - &#x60;new&#x60;  - &#x60;in_progress&#x60;  - &#x60;reopened&#x60;  - &#x60;closed&#x60; - &#x60;show_in_ui&#x60; values  - &#x60;true&#x60;: This alert is displayed in Falcon  - &#x60;false&#x60;: This alert is not displayed in Falcon.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DetectsapiResponseFields, Integer, Hash)>] DetectsapiResponseFields data, response status code and response headers
    def patch_entities_alerts_v2_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Alerts.patch_entities_alerts_v2 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling Alerts.patch_entities_alerts_v2"
      end
      # resource path
      local_var_path = '/alerts/entities/alerts/v2'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DetectsapiResponseFields'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Alerts.patch_entities_alerts_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Alerts#patch_entities_alerts_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Perform actions on Alerts identified by composite ID(s) in request. Each action has a name and a description which describes what the action does. If a request adds and removes tag in a single request, the order of processing would be to remove tags before adding new ones in.
    # @param body [DetectsapiPatchEntitiesAlertsV3Request] &#x60;composite_ids&#x60; - CompositeIDs of Alerts to modify.  &#x60;action_parameters&#x60; values - &#x60;assign_to_uuid&#x60;  - Assign Alert to user UUID, such as &#x60;00000000-0000-0000-0000-000000000000&#x60; - &#x60;assign_to_user_id&#x60;  - Assign Alert to user ID, such as &#x60;user@example.com&#x60; - &#x60;assign_to_name&#x60;  - Assign Alert to username, such as &#x60;John Doe&#x60; - &#x60;unassign&#x60;  - Unassign Alert clears out the assigned user UUID, user ID, and username. - &#x60;add_tag&#x60;   - Add a tag to the Alert. - &#x60;remove_tag&#x60;  - Remove a tag from the Alert. - &#x60;remove_tags_by_prefix&#x60;  - Remove tags from the Alert based on the prefix. - &#x60;append_comment&#x60;  - Comments are displayed with the Alert in Falcon and are usually used to provide context or notes for other Falcon users. An Alert can have multiple comments over time. - &#x60;update_status&#x60; values  - &#x60;new&#x60;  - &#x60;in_progress&#x60;  - &#x60;reopened&#x60;  - &#x60;closed&#x60; - &#x60;show_in_ui&#x60; values  - &#x60;true&#x60;: This alert is displayed in Falcon  - &#x60;false&#x60;: This alert is not displayed in Falcon.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_hidden allows previously hidden alerts to be retrieved (default to true)
    # @return [DetectsapiResponseFields]
    def patch_entities_alerts_v3(body, opts = {})
      data, _status_code, _headers = patch_entities_alerts_v3_with_http_info(body, opts)
      data
    end

    # Perform actions on Alerts identified by composite ID(s) in request. Each action has a name and a description which describes what the action does. If a request adds and removes tag in a single request, the order of processing would be to remove tags before adding new ones in.
    # @param body [DetectsapiPatchEntitiesAlertsV3Request] &#x60;composite_ids&#x60; - CompositeIDs of Alerts to modify.  &#x60;action_parameters&#x60; values - &#x60;assign_to_uuid&#x60;  - Assign Alert to user UUID, such as &#x60;00000000-0000-0000-0000-000000000000&#x60; - &#x60;assign_to_user_id&#x60;  - Assign Alert to user ID, such as &#x60;user@example.com&#x60; - &#x60;assign_to_name&#x60;  - Assign Alert to username, such as &#x60;John Doe&#x60; - &#x60;unassign&#x60;  - Unassign Alert clears out the assigned user UUID, user ID, and username. - &#x60;add_tag&#x60;   - Add a tag to the Alert. - &#x60;remove_tag&#x60;  - Remove a tag from the Alert. - &#x60;remove_tags_by_prefix&#x60;  - Remove tags from the Alert based on the prefix. - &#x60;append_comment&#x60;  - Comments are displayed with the Alert in Falcon and are usually used to provide context or notes for other Falcon users. An Alert can have multiple comments over time. - &#x60;update_status&#x60; values  - &#x60;new&#x60;  - &#x60;in_progress&#x60;  - &#x60;reopened&#x60;  - &#x60;closed&#x60; - &#x60;show_in_ui&#x60; values  - &#x60;true&#x60;: This alert is displayed in Falcon  - &#x60;false&#x60;: This alert is not displayed in Falcon.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_hidden allows previously hidden alerts to be retrieved (default to true)
    # @return [Array<(DetectsapiResponseFields, Integer, Hash)>] DetectsapiResponseFields data, response status code and response headers
    def patch_entities_alerts_v3_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Alerts.patch_entities_alerts_v3 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling Alerts.patch_entities_alerts_v3"
      end
      # resource path
      local_var_path = '/alerts/entities/alerts/v3'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include_hidden'] = opts[:'include_hidden'] if !opts[:'include_hidden'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DetectsapiResponseFields'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Alerts.patch_entities_alerts_v3",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Alerts#patch_entities_alerts_v3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deprecated: Please use version v2 of this endpoint. Retrieves aggregate values for Alerts across all CIDs.
    # @param body [Array<DetectsapiAggregateAlertQueryRequest>] request body takes a list of aggregate-alert query requests
    # @param [Hash] opts the optional parameters
    # @return [DetectsapiAggregatesResponse]
    def post_aggregates_alerts_v1(body, opts = {})
      data, _status_code, _headers = post_aggregates_alerts_v1_with_http_info(body, opts)
      data
    end

    # Deprecated: Please use version v2 of this endpoint. Retrieves aggregate values for Alerts across all CIDs.
    # @param body [Array<DetectsapiAggregateAlertQueryRequest>] request body takes a list of aggregate-alert query requests
    # @param [Hash] opts the optional parameters
    # @return [Array<(DetectsapiAggregatesResponse, Integer, Hash)>] DetectsapiAggregatesResponse data, response status code and response headers
    def post_aggregates_alerts_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Alerts.post_aggregates_alerts_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling Alerts.post_aggregates_alerts_v1"
      end
      # resource path
      local_var_path = '/alerts/aggregates/alerts/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DetectsapiAggregatesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Alerts.post_aggregates_alerts_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Alerts#post_aggregates_alerts_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves aggregate values for Alerts across all CIDs.
    # @param body [Array<DetectsapiAggregateAlertQueryRequest>] request body takes a list of aggregate-alert query requests
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_hidden allows previously hidden alerts to be retrieved (default to true)
    # @return [DetectsapiAggregatesResponse]
    def post_aggregates_alerts_v2(body, opts = {})
      data, _status_code, _headers = post_aggregates_alerts_v2_with_http_info(body, opts)
      data
    end

    # Retrieves aggregate values for Alerts across all CIDs.
    # @param body [Array<DetectsapiAggregateAlertQueryRequest>] request body takes a list of aggregate-alert query requests
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_hidden allows previously hidden alerts to be retrieved (default to true)
    # @return [Array<(DetectsapiAggregatesResponse, Integer, Hash)>] DetectsapiAggregatesResponse data, response status code and response headers
    def post_aggregates_alerts_v2_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Alerts.post_aggregates_alerts_v2 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling Alerts.post_aggregates_alerts_v2"
      end
      # resource path
      local_var_path = '/alerts/aggregates/alerts/v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include_hidden'] = opts[:'include_hidden'] if !opts[:'include_hidden'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DetectsapiAggregatesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Alerts.post_aggregates_alerts_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Alerts#post_aggregates_alerts_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves all Alerts that match a particular FQL filter. This API is intended for retrieval of large amounts of Alerts(>10k) using a pagination based on a `after` token. If you need to use `offset` pagination, consider using GET /alerts/queries/alerts/* and POST /alerts/entities/alerts/* APIs.
    # @param body [DetectsapiPostCombinedAlertsV1RequestSwagger] &#x60;after&#x60; - The &#x60;after&#x60; token is used for pagination of results. The &#x60;after&#x60; token is present when more results are available on the next page. To retrieve all Alerts:    - Use the &#x60;after&#x60; token in subsequent requests to fetch the next page.   - Continue this process until you reach a page without an &#x60;after&#x60; token, indicating the last page.  This value is highly dependant on the &#x60;sort&#x60; parameter, so if you plan to change the sort order, you will have to re-start your search from the first page (without &#x60;after&#x60; parameter).  &#x60;filter&#x60; - Filter Alerts using a query in Falcon Query Language (FQL).Filter fields can be any keyword field that is part of #domain.Alert  An asterisk wildcard &#x60;*&#x60; includes all results.   Empty value means to not filter on anything. Most commonly used filter fields that supports exact match: cid, id, aggregate_id, product, type, pattern_id, platform ... Most commonly used filter fields that supports wildcard (*): assigned_to_name, assigned_to_uuid, tactic_id, technique ... Most commonly filter fields that supports range comparisons (&gt;, &lt;, &gt;&#x3D;, &lt;&#x3D;): severity, created_timestamp, timestamp, updated_timestamp... All filter fields and operations support negation (!).   The full list of valid filter options is extensive. Review it in our [documentation inside the Falcon console](https://falcon.crowdstrike.com/documentation/45/falcon-query-language-fql).  &#x60;limit&#x60; - The maximum number of detections to return in this response (default: 100; max: 1000). Use this parameter together with the &#x60;after&#x60; parameter to manage pagination of the results.  &#x60;sort&#x60; - Sort parameter takes the form of &#x60;&lt;field|direction&gt;&#x60;.   The sorting fields can be any keyword field that is part of #domain.Alert except for the text based fields. Most commonly used fields for sorting are: timestamp, created_timestamp, updated_timestamp, status, aggregate_id, assigned_to_name, assigned_to_uid, assigned_to_uuid, tactic_id, tactic, technique, technique_id, pattern_id or product.  By default all the results are sorted by the &#x60;created_timestamp&#x60; field in the descending order.  **Important:** The pagination is done on live data in the order defined by the &#x60;sort&#x60; field parameter (default: &#x60;created_timestamp|desc&#x60;), so if you want to avoid inconsistent results where the same record might appear on multiple pages (or none), sort only on the fields that do not change over time (e.g. created_timestamp, composite_id, ...).
    # @param [Hash] opts the optional parameters
    # @return [DetectsapiPostCombinedAlertsV1ResponseSwagger]
    def post_combined_alerts_v1(body, opts = {})
      data, _status_code, _headers = post_combined_alerts_v1_with_http_info(body, opts)
      data
    end

    # Retrieves all Alerts that match a particular FQL filter. This API is intended for retrieval of large amounts of Alerts(&gt;10k) using a pagination based on a &#x60;after&#x60; token. If you need to use &#x60;offset&#x60; pagination, consider using GET /alerts/queries/alerts/* and POST /alerts/entities/alerts/* APIs.
    # @param body [DetectsapiPostCombinedAlertsV1RequestSwagger] &#x60;after&#x60; - The &#x60;after&#x60; token is used for pagination of results. The &#x60;after&#x60; token is present when more results are available on the next page. To retrieve all Alerts:    - Use the &#x60;after&#x60; token in subsequent requests to fetch the next page.   - Continue this process until you reach a page without an &#x60;after&#x60; token, indicating the last page.  This value is highly dependant on the &#x60;sort&#x60; parameter, so if you plan to change the sort order, you will have to re-start your search from the first page (without &#x60;after&#x60; parameter).  &#x60;filter&#x60; - Filter Alerts using a query in Falcon Query Language (FQL).Filter fields can be any keyword field that is part of #domain.Alert  An asterisk wildcard &#x60;*&#x60; includes all results.   Empty value means to not filter on anything. Most commonly used filter fields that supports exact match: cid, id, aggregate_id, product, type, pattern_id, platform ... Most commonly used filter fields that supports wildcard (*): assigned_to_name, assigned_to_uuid, tactic_id, technique ... Most commonly filter fields that supports range comparisons (&gt;, &lt;, &gt;&#x3D;, &lt;&#x3D;): severity, created_timestamp, timestamp, updated_timestamp... All filter fields and operations support negation (!).   The full list of valid filter options is extensive. Review it in our [documentation inside the Falcon console](https://falcon.crowdstrike.com/documentation/45/falcon-query-language-fql).  &#x60;limit&#x60; - The maximum number of detections to return in this response (default: 100; max: 1000). Use this parameter together with the &#x60;after&#x60; parameter to manage pagination of the results.  &#x60;sort&#x60; - Sort parameter takes the form of &#x60;&lt;field|direction&gt;&#x60;.   The sorting fields can be any keyword field that is part of #domain.Alert except for the text based fields. Most commonly used fields for sorting are: timestamp, created_timestamp, updated_timestamp, status, aggregate_id, assigned_to_name, assigned_to_uid, assigned_to_uuid, tactic_id, tactic, technique, technique_id, pattern_id or product.  By default all the results are sorted by the &#x60;created_timestamp&#x60; field in the descending order.  **Important:** The pagination is done on live data in the order defined by the &#x60;sort&#x60; field parameter (default: &#x60;created_timestamp|desc&#x60;), so if you want to avoid inconsistent results where the same record might appear on multiple pages (or none), sort only on the fields that do not change over time (e.g. created_timestamp, composite_id, ...).
    # @param [Hash] opts the optional parameters
    # @return [Array<(DetectsapiPostCombinedAlertsV1ResponseSwagger, Integer, Hash)>] DetectsapiPostCombinedAlertsV1ResponseSwagger data, response status code and response headers
    def post_combined_alerts_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Alerts.post_combined_alerts_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling Alerts.post_combined_alerts_v1"
      end
      # resource path
      local_var_path = '/alerts/combined/alerts/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DetectsapiPostCombinedAlertsV1ResponseSwagger'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Alerts.post_combined_alerts_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Alerts#post_combined_alerts_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deprecated: please use version v2 of this endpoint. Retrieves all Alerts given their ids.
    # @param body [DetectsapiPostEntitiesAlertsV1Request]
    # @param [Hash] opts the optional parameters
    # @return [DetectsapiPostEntitiesAlertsV1ResponseSwagger]
    def post_entities_alerts_v1(body, opts = {})
      data, _status_code, _headers = post_entities_alerts_v1_with_http_info(body, opts)
      data
    end

    # Deprecated: please use version v2 of this endpoint. Retrieves all Alerts given their ids.
    # @param body [DetectsapiPostEntitiesAlertsV1Request]
    # @param [Hash] opts the optional parameters
    # @return [Array<(DetectsapiPostEntitiesAlertsV1ResponseSwagger, Integer, Hash)>] DetectsapiPostEntitiesAlertsV1ResponseSwagger data, response status code and response headers
    def post_entities_alerts_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Alerts.post_entities_alerts_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling Alerts.post_entities_alerts_v1"
      end
      # resource path
      local_var_path = '/alerts/entities/alerts/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DetectsapiPostEntitiesAlertsV1ResponseSwagger'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Alerts.post_entities_alerts_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Alerts#post_entities_alerts_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves all Alerts given their composite ids.
    # @param body [DetectsapiPostEntitiesAlertsV2Request]
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_hidden allows previously hidden alerts to be retrieved (default to true)
    # @return [DetectsapiPostEntitiesAlertsV2ResponseSwagger]
    def post_entities_alerts_v2(body, opts = {})
      data, _status_code, _headers = post_entities_alerts_v2_with_http_info(body, opts)
      data
    end

    # Retrieves all Alerts given their composite ids.
    # @param body [DetectsapiPostEntitiesAlertsV2Request]
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_hidden allows previously hidden alerts to be retrieved (default to true)
    # @return [Array<(DetectsapiPostEntitiesAlertsV2ResponseSwagger, Integer, Hash)>] DetectsapiPostEntitiesAlertsV2ResponseSwagger data, response status code and response headers
    def post_entities_alerts_v2_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Alerts.post_entities_alerts_v2 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling Alerts.post_entities_alerts_v2"
      end
      # resource path
      local_var_path = '/alerts/entities/alerts/v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include_hidden'] = opts[:'include_hidden'] if !opts[:'include_hidden'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DetectsapiPostEntitiesAlertsV2ResponseSwagger'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Alerts.post_entities_alerts_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Alerts#post_entities_alerts_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
