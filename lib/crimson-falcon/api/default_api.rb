=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'cgi'

module Falcon
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Creates a new account in our system for a customer.
    # @param body [RestAWSAccountCreateRequestExtv1]
    # @param [Hash] opts the optional parameters
    # @return [RestAWSAccountCreateResponseExtV1]
    def cloud_registration_aws_create_account(body, opts = {})
      data, _status_code, _headers = cloud_registration_aws_create_account_with_http_info(body, opts)
      data
    end

    # Creates a new account in our system for a customer.
    # @param body [RestAWSAccountCreateRequestExtv1]
    # @param [Hash] opts the optional parameters
    # @return [Array<(RestAWSAccountCreateResponseExtV1, Integer, Hash)>] RestAWSAccountCreateResponseExtV1 data, response status code and response headers
    def cloud_registration_aws_create_account_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.cloud_registration_aws_create_account ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.cloud_registration_aws_create_account"
      end
      # resource path
      local_var_path = '/cloud-security-registration-aws/entities/account/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RestAWSAccountCreateResponseExtV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.cloud_registration_aws_create_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#cloud_registration_aws_create_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes an existing AWS account or organization in our system.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :ids AWS account IDs to remove
    # @option opts [Array<String>] :organization_ids AWS organization IDs to remove
    # @return [MsaspecResponseFields]
    def cloud_registration_aws_delete_account(opts = {})
      data, _status_code, _headers = cloud_registration_aws_delete_account_with_http_info(opts)
      data
    end

    # Deletes an existing AWS account or organization in our system.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :ids AWS account IDs to remove
    # @option opts [Array<String>] :organization_ids AWS organization IDs to remove
    # @return [Array<(MsaspecResponseFields, Integer, Hash)>] MsaspecResponseFields data, response status code and response headers
    def cloud_registration_aws_delete_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.cloud_registration_aws_delete_account ...'
      end
      # resource path
      local_var_path = '/cloud-security-registration-aws/entities/account/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :multi) if !opts[:'ids'].nil?
      query_params[:'organization-ids'] = @api_client.build_collection_param(opts[:'organization_ids'], :multi) if !opts[:'organization_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaspecResponseFields'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.cloud_registration_aws_delete_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#cloud_registration_aws_delete_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve existing AWS accounts by account IDs
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :ids AWS account IDs to filter
    # @return [RestAWSAccountCreateResponseExtV1]
    def cloud_registration_aws_get_accounts(opts = {})
      data, _status_code, _headers = cloud_registration_aws_get_accounts_with_http_info(opts)
      data
    end

    # Retrieve existing AWS accounts by account IDs
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :ids AWS account IDs to filter
    # @return [Array<(RestAWSAccountCreateResponseExtV1, Integer, Hash)>] RestAWSAccountCreateResponseExtV1 data, response status code and response headers
    def cloud_registration_aws_get_accounts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.cloud_registration_aws_get_accounts ...'
      end
      # resource path
      local_var_path = '/cloud-security-registration-aws/entities/account/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :multi) if !opts[:'ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RestAWSAccountCreateResponseExtV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.cloud_registration_aws_get_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#cloud_registration_aws_get_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve existing AWS accounts by account IDs
    # @param products [Array<String>] Products registered for an account
    # @param features [Array<String>] Features registered for an account
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organization_ids Organization IDs used to filter accounts
    # @option opts [String] :account_status Account status to filter results by.
    # @option opts [Integer] :limit The maximum number of items to return. When not specified or 0, 100 is used. When larger than 500, 500 is used. (default to 100)
    # @option opts [Integer] :offset The offset to start retrieving records from.
    # @option opts [String] :group_by Field to group by.
    # @return [RestAWSAccountCreateResponseExtV1]
    def cloud_registration_aws_query_accounts(products, features, opts = {})
      data, _status_code, _headers = cloud_registration_aws_query_accounts_with_http_info(products, features, opts)
      data
    end

    # Retrieve existing AWS accounts by account IDs
    # @param products [Array<String>] Products registered for an account
    # @param features [Array<String>] Features registered for an account
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organization_ids Organization IDs used to filter accounts
    # @option opts [String] :account_status Account status to filter results by.
    # @option opts [Integer] :limit The maximum number of items to return. When not specified or 0, 100 is used. When larger than 500, 500 is used. (default to 100)
    # @option opts [Integer] :offset The offset to start retrieving records from.
    # @option opts [String] :group_by Field to group by.
    # @return [Array<(RestAWSAccountCreateResponseExtV1, Integer, Hash)>] RestAWSAccountCreateResponseExtV1 data, response status code and response headers
    def cloud_registration_aws_query_accounts_with_http_info(products, features, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.cloud_registration_aws_query_accounts ...'
      end
      # verify the required parameter 'products' is set
      if @api_client.config.client_side_validation && products.nil?
        fail ArgumentError, "Missing the required parameter 'products' when calling DefaultApi.cloud_registration_aws_query_accounts"
      end
      # verify the required parameter 'features' is set
      if @api_client.config.client_side_validation && features.nil?
        fail ArgumentError, "Missing the required parameter 'features' when calling DefaultApi.cloud_registration_aws_query_accounts"
      end
      allowable_values = ["provisioned", "operational"]
      if @api_client.config.client_side_validation && opts[:'account_status'] && !allowable_values.include?(opts[:'account_status'])
        fail ArgumentError, "invalid value for \"account_status\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 500
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.cloud_registration_aws_query_accounts, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.cloud_registration_aws_query_accounts, must be greater than or equal to 0.'
      end

      allowable_values = ["organization"]
      if @api_client.config.client_side_validation && opts[:'group_by'] && !allowable_values.include?(opts[:'group_by'])
        fail ArgumentError, "invalid value for \"group_by\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/cloud-security-registration-aws/queries/account/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'products'] = @api_client.build_collection_param(products, :multi)
      query_params[:'features'] = @api_client.build_collection_param(features, :multi)
      query_params[:'organization-ids'] = @api_client.build_collection_param(opts[:'organization_ids'], :multi) if !opts[:'organization_ids'].nil?
      query_params[:'account-status'] = opts[:'account_status'] if !opts[:'account_status'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'group_by'] = opts[:'group_by'] if !opts[:'group_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RestAWSAccountCreateResponseExtV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.cloud_registration_aws_query_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#cloud_registration_aws_query_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patches a existing account in our system for a customer.
    # @param body [RestAWSAccountCreateRequestExtv1]
    # @param [Hash] opts the optional parameters
    # @return [RestAWSAccountCreateResponseExtV1]
    def cloud_registration_aws_update_account(body, opts = {})
      data, _status_code, _headers = cloud_registration_aws_update_account_with_http_info(body, opts)
      data
    end

    # Patches a existing account in our system for a customer.
    # @param body [RestAWSAccountCreateRequestExtv1]
    # @param [Hash] opts the optional parameters
    # @return [Array<(RestAWSAccountCreateResponseExtV1, Integer, Hash)>] RestAWSAccountCreateResponseExtV1 data, response status code and response headers
    def cloud_registration_aws_update_account_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.cloud_registration_aws_update_account ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.cloud_registration_aws_update_account"
      end
      # resource path
      local_var_path = '/cloud-security-registration-aws/entities/account/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RestAWSAccountCreateResponseExtV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.cloud_registration_aws_update_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#cloud_registration_aws_update_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validates the AWS account in our system for a provided CID. For internal clients only.
    # @param products [String] Product registered for an account
    # @param feature [Array<String>] Features registered for an account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :account_id AWS Account ID
    # @option opts [String] :iam_role_arn IAM Role ARN
    # @return [RestAWSAccountValidationResponse]
    def cloud_registration_aws_validate_accounts(products, feature, opts = {})
      data, _status_code, _headers = cloud_registration_aws_validate_accounts_with_http_info(products, feature, opts)
      data
    end

    # Validates the AWS account in our system for a provided CID. For internal clients only.
    # @param products [String] Product registered for an account
    # @param feature [Array<String>] Features registered for an account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :account_id AWS Account ID
    # @option opts [String] :iam_role_arn IAM Role ARN
    # @return [Array<(RestAWSAccountValidationResponse, Integer, Hash)>] RestAWSAccountValidationResponse data, response status code and response headers
    def cloud_registration_aws_validate_accounts_with_http_info(products, feature, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.cloud_registration_aws_validate_accounts ...'
      end
      # verify the required parameter 'products' is set
      if @api_client.config.client_side_validation && products.nil?
        fail ArgumentError, "Missing the required parameter 'products' when calling DefaultApi.cloud_registration_aws_validate_accounts"
      end
      # verify the required parameter 'feature' is set
      if @api_client.config.client_side_validation && feature.nil?
        fail ArgumentError, "Missing the required parameter 'feature' when calling DefaultApi.cloud_registration_aws_validate_accounts"
      end
      pattern = Regexp.new(/^\d{12}$/)
      if @api_client.config.client_side_validation && !opts[:'account_id'].nil? && opts[:'account_id'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"account_id\"]' when calling DefaultApi.cloud_registration_aws_validate_accounts, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^arn:aws:iam::\d{12}:role\/.+/)
      if @api_client.config.client_side_validation && !opts[:'iam_role_arn'].nil? && opts[:'iam_role_arn'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"iam_role_arn\"]' when calling DefaultApi.cloud_registration_aws_validate_accounts, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/cloud-security-registration-aws/entities/account/validate/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'products'] = products
      query_params[:'feature'] = @api_client.build_collection_param(feature, :csv)
      query_params[:'account-id'] = opts[:'account_id'] if !opts[:'account_id'].nil?
      query_params[:'iam-role-arn'] = opts[:'iam_role_arn'] if !opts[:'iam_role_arn'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RestAWSAccountValidationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.cloud_registration_aws_validate_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#cloud_registration_aws_validate_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
