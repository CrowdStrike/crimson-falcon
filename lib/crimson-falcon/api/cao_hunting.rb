=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'cgi'

module Falcon
  class CaoHunting
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Aggregate intelligence queries
    # @param body [Array<MsaAggregateQueryRequest>]
    # @param [Hash] opts the optional parameters
    # @return [ApiIntelligenceQueryAggregatesResponse]
    def aggregate_intelligence_queries(body, opts = {})
      data, _status_code, _headers = aggregate_intelligence_queries_with_http_info(body, opts)
      data
    end

    # Aggregate intelligence queries
    # @param body [Array<MsaAggregateQueryRequest>]
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiIntelligenceQueryAggregatesResponse, Integer, Hash)>] ApiIntelligenceQueryAggregatesResponse data, response status code and response headers
    def aggregate_intelligence_queries_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CaoHunting.aggregate_intelligence_queries ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CaoHunting.aggregate_intelligence_queries"
      end
      # resource path
      local_var_path = '/hunting/aggregates/intelligence-queries/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiIntelligenceQueryAggregatesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CaoHunting.aggregate_intelligence_queries",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaoHunting#aggregate_intelligence_queries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates an Archive Export
    # @param language [String] The Query Language. Accepted Values:  &lt;li&gt;cql&lt;/li&gt;&lt;li&gt;snort&lt;/li&gt;&lt;li&gt;suricata&lt;/li&gt;&lt;li&gt;yara&lt;/li&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter The FQL Filter
    # @option opts [String] :archive_type The Archive Type can be one of &#39;zip&#39; and &#39;gzip&#39;. Defaults to &#39;zip&#39;.
    # @return [Array<Integer>]
    def get_archive_export(language, opts = {})
      data, _status_code, _headers = get_archive_export_with_http_info(language, opts)
      data
    end

    # Creates an Archive Export
    # @param language [String] The Query Language. Accepted Values:  &lt;li&gt;cql&lt;/li&gt;&lt;li&gt;snort&lt;/li&gt;&lt;li&gt;suricata&lt;/li&gt;&lt;li&gt;yara&lt;/li&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter The FQL Filter
    # @option opts [String] :archive_type The Archive Type can be one of &#39;zip&#39; and &#39;gzip&#39;. Defaults to &#39;zip&#39;.
    # @return [Array<(Array<Integer>, Integer, Hash)>] Array<Integer> data, response status code and response headers
    def get_archive_export_with_http_info(language, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CaoHunting.get_archive_export ...'
      end
      # verify the required parameter 'language' is set
      if @api_client.config.client_side_validation && language.nil?
        fail ArgumentError, "Missing the required parameter 'language' when calling CaoHunting.get_archive_export"
      end
      # resource path
      local_var_path = '/hunting/entities/archive-exports/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'language'] = language
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'archive_type'] = opts[:'archive_type'] if !opts[:'archive_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Integer>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CaoHunting.get_archive_export",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaoHunting#get_archive_export\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a list of Intelligence queries
    # @param ids [Array<String>] Intelligence queries IDs
    # @param [Hash] opts the optional parameters
    # @return [ApiIntelligenceQueryEntityResponse]
    def get_intelligence_queries(ids, opts = {})
      data, _status_code, _headers = get_intelligence_queries_with_http_info(ids, opts)
      data
    end

    # Retrieves a list of Intelligence queries
    # @param ids [Array<String>] Intelligence queries IDs
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiIntelligenceQueryEntityResponse, Integer, Hash)>] ApiIntelligenceQueryEntityResponse data, response status code and response headers
    def get_intelligence_queries_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CaoHunting.get_intelligence_queries ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling CaoHunting.get_intelligence_queries"
      end
      # resource path
      local_var_path = '/hunting/entities/intelligence-queries/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiIntelligenceQueryEntityResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CaoHunting.get_intelligence_queries",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaoHunting#get_intelligence_queries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search intelligence queries that match the provided conditions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset Starting index of result set from which to return IDs.
    # @option opts [Integer] :limit Number of IDs to return.
    # @option opts [String] :sort Order by fields.
    # @option opts [String] :filter FQL query specifying the filter parameters.
    # @option opts [String] :q Match phrase_prefix query criteria; included fields: _all (all filter string fields indexed).
    # @return [MsaspecQueryResponse]
    def search_intelligence_queries(opts = {})
      data, _status_code, _headers = search_intelligence_queries_with_http_info(opts)
      data
    end

    # Search intelligence queries that match the provided conditions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset Starting index of result set from which to return IDs.
    # @option opts [Integer] :limit Number of IDs to return.
    # @option opts [String] :sort Order by fields.
    # @option opts [String] :filter FQL query specifying the filter parameters.
    # @option opts [String] :q Match phrase_prefix query criteria; included fields: _all (all filter string fields indexed).
    # @return [Array<(MsaspecQueryResponse, Integer, Hash)>] MsaspecQueryResponse data, response status code and response headers
    def search_intelligence_queries_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CaoHunting.search_intelligence_queries ...'
      end
      # resource path
      local_var_path = '/hunting/queries/intelligence-queries/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaspecQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CaoHunting.search_intelligence_queries",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CaoHunting#search_intelligence_queries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
