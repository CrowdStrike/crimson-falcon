=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'cgi'

module Falcon
  class FoundryLogscaleApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Execute a dynamic saved search
    # @param body [ApidomainDynamicExecuteSearchRequestV1]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :app_id Application ID.
    # @option opts [Boolean] :include_schema_generation Include generated schemas in the response (default to false)
    # @option opts [Boolean] :include_test_data Include test data when executing searches (default to false)
    # @option opts [Boolean] :metadata Whether to include metadata in the response (default to false)
    # @option opts [String] :mode Mode to execute the query under.
    # @return [ApidomainQueryResponseWrapperV1]
    def create_saved_searches_dynamic_execute_alt_v1(body, opts = {})
      data, _status_code, _headers = create_saved_searches_dynamic_execute_alt_v1_with_http_info(body, opts)
      data
    end

    # Execute a dynamic saved search
    # @param body [ApidomainDynamicExecuteSearchRequestV1]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :app_id Application ID.
    # @option opts [Boolean] :include_schema_generation Include generated schemas in the response (default to false)
    # @option opts [Boolean] :include_test_data Include test data when executing searches (default to false)
    # @option opts [Boolean] :metadata Whether to include metadata in the response (default to false)
    # @option opts [String] :mode Mode to execute the query under.
    # @return [Array<(ApidomainQueryResponseWrapperV1, Integer, Hash)>] ApidomainQueryResponseWrapperV1 data, response status code and response headers
    def create_saved_searches_dynamic_execute_alt_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FoundryLogscaleApi.create_saved_searches_dynamic_execute_alt_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FoundryLogscaleApi.create_saved_searches_dynamic_execute_alt_v1"
      end
      allowable_values = ["sync", "async"]
      if @api_client.config.client_side_validation && opts[:'mode'] && !allowable_values.include?(opts[:'mode'])
        fail ArgumentError, "invalid value for \"mode\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/loggingapi/entities/saved-searches-dynamic-execute/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'app_id'] = opts[:'app_id'] if !opts[:'app_id'].nil?
      query_params[:'include_schema_generation'] = opts[:'include_schema_generation'] if !opts[:'include_schema_generation'].nil?
      query_params[:'include_test_data'] = opts[:'include_test_data'] if !opts[:'include_test_data'].nil?
      query_params[:'metadata'] = opts[:'metadata'] if !opts[:'metadata'].nil?
      query_params[:'mode'] = opts[:'mode'] if !opts[:'mode'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ApidomainQueryResponseWrapperV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FoundryLogscaleApi.create_saved_searches_dynamic_execute_alt_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FoundryLogscaleApi#create_saved_searches_dynamic_execute_alt_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Execute a dynamic saved search
    # @param body [ApidomainDynamicExecuteSearchRequestV1]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :app_id Application ID.
    # @option opts [Boolean] :include_schema_generation Include generated schemas in the response (default to false)
    # @option opts [Boolean] :include_test_data Include test data when executing searches (default to false)
    # @option opts [Boolean] :metadata Whether to include metadata in the response (default to false)
    # @option opts [String] :mode Mode to execute the query under.
    # @return [ApidomainQueryResponseWrapperV1]
    def create_saved_searches_dynamic_execute_v1(body, opts = {})
      data, _status_code, _headers = create_saved_searches_dynamic_execute_v1_with_http_info(body, opts)
      data
    end

    # Execute a dynamic saved search
    # @param body [ApidomainDynamicExecuteSearchRequestV1]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :app_id Application ID.
    # @option opts [Boolean] :include_schema_generation Include generated schemas in the response (default to false)
    # @option opts [Boolean] :include_test_data Include test data when executing searches (default to false)
    # @option opts [Boolean] :metadata Whether to include metadata in the response (default to false)
    # @option opts [String] :mode Mode to execute the query under.
    # @return [Array<(ApidomainQueryResponseWrapperV1, Integer, Hash)>] ApidomainQueryResponseWrapperV1 data, response status code and response headers
    def create_saved_searches_dynamic_execute_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FoundryLogscaleApi.create_saved_searches_dynamic_execute_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FoundryLogscaleApi.create_saved_searches_dynamic_execute_v1"
      end
      allowable_values = ["sync", "async"]
      if @api_client.config.client_side_validation && opts[:'mode'] && !allowable_values.include?(opts[:'mode'])
        fail ArgumentError, "invalid value for \"mode\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/loggingapi/entities/saved-searches/execute-dynamic/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'app_id'] = opts[:'app_id'] if !opts[:'app_id'].nil?
      query_params[:'include_schema_generation'] = opts[:'include_schema_generation'] if !opts[:'include_schema_generation'].nil?
      query_params[:'include_test_data'] = opts[:'include_test_data'] if !opts[:'include_test_data'].nil?
      query_params[:'metadata'] = opts[:'metadata'] if !opts[:'metadata'].nil?
      query_params[:'mode'] = opts[:'mode'] if !opts[:'mode'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ApidomainQueryResponseWrapperV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FoundryLogscaleApi.create_saved_searches_dynamic_execute_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FoundryLogscaleApi#create_saved_searches_dynamic_execute_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Execute a saved search
    # @param body [ApidomainSavedSearchExecuteRequestV1]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :app_id Application ID.
    # @option opts [Boolean] :detailed Whether to include search field details (default to false)
    # @option opts [Boolean] :include_test_data Include test data when executing searches (default to false)
    # @option opts [Boolean] :metadata Whether to include metadata in the response (default to false)
    # @return [ApidomainQueryResponseWrapperV1]
    def create_saved_searches_execute_alt_v1(body, opts = {})
      data, _status_code, _headers = create_saved_searches_execute_alt_v1_with_http_info(body, opts)
      data
    end

    # Execute a saved search
    # @param body [ApidomainSavedSearchExecuteRequestV1]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :app_id Application ID.
    # @option opts [Boolean] :detailed Whether to include search field details (default to false)
    # @option opts [Boolean] :include_test_data Include test data when executing searches (default to false)
    # @option opts [Boolean] :metadata Whether to include metadata in the response (default to false)
    # @return [Array<(ApidomainQueryResponseWrapperV1, Integer, Hash)>] ApidomainQueryResponseWrapperV1 data, response status code and response headers
    def create_saved_searches_execute_alt_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FoundryLogscaleApi.create_saved_searches_execute_alt_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FoundryLogscaleApi.create_saved_searches_execute_alt_v1"
      end
      # resource path
      local_var_path = '/loggingapi/entities/saved-searches-execute/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'app_id'] = opts[:'app_id'] if !opts[:'app_id'].nil?
      query_params[:'detailed'] = opts[:'detailed'] if !opts[:'detailed'].nil?
      query_params[:'include_test_data'] = opts[:'include_test_data'] if !opts[:'include_test_data'].nil?
      query_params[:'metadata'] = opts[:'metadata'] if !opts[:'metadata'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ApidomainQueryResponseWrapperV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FoundryLogscaleApi.create_saved_searches_execute_alt_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FoundryLogscaleApi#create_saved_searches_execute_alt_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Execute a saved search
    # @param body [ApidomainSavedSearchExecuteRequestV1]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :app_id Application ID.
    # @option opts [Boolean] :detailed Whether to include search field details (default to false)
    # @option opts [Boolean] :include_test_data Include test data when executing searches (default to false)
    # @option opts [Boolean] :metadata Whether to include metadata in the response (default to false)
    # @return [ApidomainQueryResponseWrapperV1]
    def create_saved_searches_execute_v1(body, opts = {})
      data, _status_code, _headers = create_saved_searches_execute_v1_with_http_info(body, opts)
      data
    end

    # Execute a saved search
    # @param body [ApidomainSavedSearchExecuteRequestV1]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :app_id Application ID.
    # @option opts [Boolean] :detailed Whether to include search field details (default to false)
    # @option opts [Boolean] :include_test_data Include test data when executing searches (default to false)
    # @option opts [Boolean] :metadata Whether to include metadata in the response (default to false)
    # @return [Array<(ApidomainQueryResponseWrapperV1, Integer, Hash)>] ApidomainQueryResponseWrapperV1 data, response status code and response headers
    def create_saved_searches_execute_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FoundryLogscaleApi.create_saved_searches_execute_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FoundryLogscaleApi.create_saved_searches_execute_v1"
      end
      # resource path
      local_var_path = '/loggingapi/entities/saved-searches/execute/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'app_id'] = opts[:'app_id'] if !opts[:'app_id'].nil?
      query_params[:'detailed'] = opts[:'detailed'] if !opts[:'detailed'].nil?
      query_params[:'include_test_data'] = opts[:'include_test_data'] if !opts[:'include_test_data'].nil?
      query_params[:'metadata'] = opts[:'metadata'] if !opts[:'metadata'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ApidomainQueryResponseWrapperV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FoundryLogscaleApi.create_saved_searches_execute_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FoundryLogscaleApi#create_saved_searches_execute_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Populate a saved search
    # @param [Hash] opts the optional parameters
    # @option opts [String] :app_id Application ID.
    # @return [ClientDataIngestResponseWrapperV1]
    def create_saved_searches_ingest_alt_v1(opts = {})
      data, _status_code, _headers = create_saved_searches_ingest_alt_v1_with_http_info(opts)
      data
    end

    # Populate a saved search
    # @param [Hash] opts the optional parameters
    # @option opts [String] :app_id Application ID.
    # @return [Array<(ClientDataIngestResponseWrapperV1, Integer, Hash)>] ClientDataIngestResponseWrapperV1 data, response status code and response headers
    def create_saved_searches_ingest_alt_v1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FoundryLogscaleApi.create_saved_searches_ingest_alt_v1 ...'
      end
      # resource path
      local_var_path = '/loggingapi/entities/saved-searches-ingest/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'app_id'] = opts[:'app_id'] if !opts[:'app_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ClientDataIngestResponseWrapperV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FoundryLogscaleApi.create_saved_searches_ingest_alt_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FoundryLogscaleApi#create_saved_searches_ingest_alt_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Populate a saved search
    # @param [Hash] opts the optional parameters
    # @option opts [String] :app_id Application ID.
    # @return [ClientDataIngestResponseWrapperV1]
    def create_saved_searches_ingest_v1(opts = {})
      data, _status_code, _headers = create_saved_searches_ingest_v1_with_http_info(opts)
      data
    end

    # Populate a saved search
    # @param [Hash] opts the optional parameters
    # @option opts [String] :app_id Application ID.
    # @return [Array<(ClientDataIngestResponseWrapperV1, Integer, Hash)>] ClientDataIngestResponseWrapperV1 data, response status code and response headers
    def create_saved_searches_ingest_v1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FoundryLogscaleApi.create_saved_searches_ingest_v1 ...'
      end
      # resource path
      local_var_path = '/loggingapi/entities/saved-searches/ingest/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'app_id'] = opts[:'app_id'] if !opts[:'app_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ClientDataIngestResponseWrapperV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FoundryLogscaleApi.create_saved_searches_ingest_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FoundryLogscaleApi#create_saved_searches_ingest_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the results of a saved search
    # @param job_id [String] Job ID for a previously executed async query
    # @param [Hash] opts the optional parameters
    # @option opts [String] :app_id Application ID.
    # @option opts [String] :limit Maximum number of records to return.
    # @option opts [Boolean] :metadata Whether to include metadata in the response (default to false)
    # @option opts [String] :offset Starting pagination offset of records to return.
    # @return [ApidomainQueryResponseWrapperV1]
    def get_saved_searches_execute_alt_v1(job_id, opts = {})
      data, _status_code, _headers = get_saved_searches_execute_alt_v1_with_http_info(job_id, opts)
      data
    end

    # Get the results of a saved search
    # @param job_id [String] Job ID for a previously executed async query
    # @param [Hash] opts the optional parameters
    # @option opts [String] :app_id Application ID.
    # @option opts [String] :limit Maximum number of records to return.
    # @option opts [Boolean] :metadata Whether to include metadata in the response (default to false)
    # @option opts [String] :offset Starting pagination offset of records to return.
    # @return [Array<(ApidomainQueryResponseWrapperV1, Integer, Hash)>] ApidomainQueryResponseWrapperV1 data, response status code and response headers
    def get_saved_searches_execute_alt_v1_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FoundryLogscaleApi.get_saved_searches_execute_alt_v1 ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling FoundryLogscaleApi.get_saved_searches_execute_alt_v1"
      end
      # resource path
      local_var_path = '/loggingapi/entities/saved-searches-execute/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'job_id'] = job_id
      query_params[:'app_id'] = opts[:'app_id'] if !opts[:'app_id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'metadata'] = opts[:'metadata'] if !opts[:'metadata'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApidomainQueryResponseWrapperV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FoundryLogscaleApi.get_saved_searches_execute_alt_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FoundryLogscaleApi#get_saved_searches_execute_alt_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the results of a saved search
    # @param job_id [String] Job ID for a previously executed async query
    # @param [Hash] opts the optional parameters
    # @option opts [String] :app_id Application ID.
    # @option opts [String] :limit Maximum number of records to return.
    # @option opts [Boolean] :metadata Whether to include metadata in the response (default to false)
    # @option opts [String] :offset Starting pagination offset of records to return.
    # @return [ApidomainQueryResponseWrapperV1]
    def get_saved_searches_execute_v1(job_id, opts = {})
      data, _status_code, _headers = get_saved_searches_execute_v1_with_http_info(job_id, opts)
      data
    end

    # Get the results of a saved search
    # @param job_id [String] Job ID for a previously executed async query
    # @param [Hash] opts the optional parameters
    # @option opts [String] :app_id Application ID.
    # @option opts [String] :limit Maximum number of records to return.
    # @option opts [Boolean] :metadata Whether to include metadata in the response (default to false)
    # @option opts [String] :offset Starting pagination offset of records to return.
    # @return [Array<(ApidomainQueryResponseWrapperV1, Integer, Hash)>] ApidomainQueryResponseWrapperV1 data, response status code and response headers
    def get_saved_searches_execute_v1_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FoundryLogscaleApi.get_saved_searches_execute_v1 ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling FoundryLogscaleApi.get_saved_searches_execute_v1"
      end
      # resource path
      local_var_path = '/loggingapi/entities/saved-searches/execute/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'job_id'] = job_id
      query_params[:'app_id'] = opts[:'app_id'] if !opts[:'app_id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'metadata'] = opts[:'metadata'] if !opts[:'metadata'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApidomainQueryResponseWrapperV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FoundryLogscaleApi.get_saved_searches_execute_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FoundryLogscaleApi#get_saved_searches_execute_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the results of a saved search as a file
    # @param job_id [String] Job ID for a previously executed async query
    # @param [Hash] opts the optional parameters
    # @option opts [String] :result_format Result Format
    # @return [File]
    def get_saved_searches_job_results_download_alt_v1(job_id, opts = {})
      data, _status_code, _headers = get_saved_searches_job_results_download_alt_v1_with_http_info(job_id, opts)
      data
    end

    # Get the results of a saved search as a file
    # @param job_id [String] Job ID for a previously executed async query
    # @param [Hash] opts the optional parameters
    # @option opts [String] :result_format Result Format
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_saved_searches_job_results_download_alt_v1_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FoundryLogscaleApi.get_saved_searches_job_results_download_alt_v1 ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling FoundryLogscaleApi.get_saved_searches_job_results_download_alt_v1"
      end
      allowable_values = ["json", "csv"]
      if @api_client.config.client_side_validation && opts[:'result_format'] && !allowable_values.include?(opts[:'result_format'])
        fail ArgumentError, "invalid value for \"result_format\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/loggingapi/entities/saved-searches-job-results-download/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'job_id'] = job_id
      query_params[:'result_format'] = opts[:'result_format'] if !opts[:'result_format'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FoundryLogscaleApi.get_saved_searches_job_results_download_alt_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FoundryLogscaleApi#get_saved_searches_job_results_download_alt_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the results of a saved search as a file
    # @param job_id [String] Job ID for a previously executed async query
    # @param [Hash] opts the optional parameters
    # @option opts [String] :result_format Result Format
    # @return [File]
    def get_saved_searches_job_results_download_v1(job_id, opts = {})
      data, _status_code, _headers = get_saved_searches_job_results_download_v1_with_http_info(job_id, opts)
      data
    end

    # Get the results of a saved search as a file
    # @param job_id [String] Job ID for a previously executed async query
    # @param [Hash] opts the optional parameters
    # @option opts [String] :result_format Result Format
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_saved_searches_job_results_download_v1_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FoundryLogscaleApi.get_saved_searches_job_results_download_v1 ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling FoundryLogscaleApi.get_saved_searches_job_results_download_v1"
      end
      allowable_values = ["json", "csv"]
      if @api_client.config.client_side_validation && opts[:'result_format'] && !allowable_values.include?(opts[:'result_format'])
        fail ArgumentError, "invalid value for \"result_format\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/loggingapi/entities/saved-searches/job-results-download/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'job_id'] = job_id
      query_params[:'result_format'] = opts[:'result_format'] if !opts[:'result_format'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FoundryLogscaleApi.get_saved_searches_job_results_download_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FoundryLogscaleApi#get_saved_searches_job_results_download_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Ingest data into the application repository
    # @param data_file [File] Data file to ingest
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :tag Custom tag for ingested data in the form tag:value
    # @option opts [String] :tag_source Tag the data with the specified source
    # @option opts [Boolean] :test_data Tag the data with test-ingest (default to false)
    # @return [ClientDataIngestResponseWrapperV1]
    def ingest_data_v1(data_file, opts = {})
      data, _status_code, _headers = ingest_data_v1_with_http_info(data_file, opts)
      data
    end

    # Ingest data into the application repository
    # @param data_file [File] Data file to ingest
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :tag Custom tag for ingested data in the form tag:value
    # @option opts [String] :tag_source Tag the data with the specified source
    # @option opts [Boolean] :test_data Tag the data with test-ingest (default to false)
    # @return [Array<(ClientDataIngestResponseWrapperV1, Integer, Hash)>] ClientDataIngestResponseWrapperV1 data, response status code and response headers
    def ingest_data_v1_with_http_info(data_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FoundryLogscaleApi.ingest_data_v1 ...'
      end
      # verify the required parameter 'data_file' is set
      if @api_client.config.client_side_validation && data_file.nil?
        fail ArgumentError, "Missing the required parameter 'data_file' when calling FoundryLogscaleApi.ingest_data_v1"
      end
      # resource path
      local_var_path = '/loggingapi/entities/data-ingestion/ingest/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['data_file'] = data_file
      form_params['tag'] = @api_client.build_collection_param(opts[:'tag'], :csv) if !opts[:'tag'].nil?
      form_params['tag_source'] = opts[:'tag_source'] if !opts[:'tag_source'].nil?
      form_params['test_data'] = opts[:'test_data'] if !opts[:'test_data'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ClientDataIngestResponseWrapperV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FoundryLogscaleApi.ingest_data_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FoundryLogscaleApi#ingest_data_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists available repositories and views
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :check_test_data Include whether test data is present in the application repository (default to false)
    # @return [ApidomainRepoViewListItemWrapperV1]
    def list_repos_v1(opts = {})
      data, _status_code, _headers = list_repos_v1_with_http_info(opts)
      data
    end

    # Lists available repositories and views
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :check_test_data Include whether test data is present in the application repository (default to false)
    # @return [Array<(ApidomainRepoViewListItemWrapperV1, Integer, Hash)>] ApidomainRepoViewListItemWrapperV1 data, response status code and response headers
    def list_repos_v1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FoundryLogscaleApi.list_repos_v1 ...'
      end
      # resource path
      local_var_path = '/loggingapi/combined/repos/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'check_test_data'] = opts[:'check_test_data'] if !opts[:'check_test_data'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApidomainRepoViewListItemWrapperV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FoundryLogscaleApi.list_repos_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FoundryLogscaleApi#list_repos_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List views
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :check_test_data Include whether test data is present in the application repository (default to false)
    # @return [ApidomainRepoViewListItemWrapperV1]
    def list_view_v1(opts = {})
      data, _status_code, _headers = list_view_v1_with_http_info(opts)
      data
    end

    # List views
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :check_test_data Include whether test data is present in the application repository (default to false)
    # @return [Array<(ApidomainRepoViewListItemWrapperV1, Integer, Hash)>] ApidomainRepoViewListItemWrapperV1 data, response status code and response headers
    def list_view_v1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FoundryLogscaleApi.list_view_v1 ...'
      end
      # resource path
      local_var_path = '/loggingapi/entities/views/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'check_test_data'] = opts[:'check_test_data'] if !opts[:'check_test_data'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApidomainRepoViewListItemWrapperV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FoundryLogscaleApi.list_view_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FoundryLogscaleApi#list_view_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
