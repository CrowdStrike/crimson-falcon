=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'cgi'

module Falcon
  class Hosts
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Search for hosts in your environment by platform, hostname, IP, and other criteria. Returns full device records.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset The offset to page from, provided from the previous call as the \&quot;next\&quot; value, for the next result set. For the first call, do not supply an offset.
    # @option opts [Integer] :limit The maximum records to return. [1-10000] (default to 100)
    # @option opts [String] :sort The property to sort by (e.g. status.desc or hostname.asc). If not specified, the default sort will be device_id.asc. This should be supplied for each consecutive call.
    # @option opts [String] :filter The filter expression that should be used to limit the results. This should be supplied for each consecutive call.
    # @option opts [String] :fields The fields to return, comma delimited if specifying more than one field. For example: fields&#x3D;hostname,device_id would return device records only containing the hostname and device_id
    # @return [DeviceapiDeviceCombinedResponseSwagger]
    def combined_devices_by_filter(opts = {})
      data, _status_code, _headers = combined_devices_by_filter_with_http_info(opts)
      data
    end

    # Search for hosts in your environment by platform, hostname, IP, and other criteria. Returns full device records.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset The offset to page from, provided from the previous call as the \&quot;next\&quot; value, for the next result set. For the first call, do not supply an offset.
    # @option opts [Integer] :limit The maximum records to return. [1-10000] (default to 100)
    # @option opts [String] :sort The property to sort by (e.g. status.desc or hostname.asc). If not specified, the default sort will be device_id.asc. This should be supplied for each consecutive call.
    # @option opts [String] :filter The filter expression that should be used to limit the results. This should be supplied for each consecutive call.
    # @option opts [String] :fields The fields to return, comma delimited if specifying more than one field. For example: fields&#x3D;hostname,device_id would return device records only containing the hostname and device_id
    # @return [Array<(DeviceapiDeviceCombinedResponseSwagger, Integer, Hash)>] DeviceapiDeviceCombinedResponseSwagger data, response status code and response headers
    def combined_devices_by_filter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Hosts.combined_devices_by_filter ...'
      end
      allowable_values = ["device_policies.jumpcloud.policy_id", "group_hash", "k8s_cluster_id", "linux_sensor_mode", "host_utc_offset", "first_seen", "platform_id", "pod_annotations", "internet_exposure", "filesystem_containment_status", "device_policies.browser-extension.policy_id", "agent_load_flags", "os_version", "device_policies.system-tray.applied", "device_policies.fim.policy_type", "device_policies.automox.applied", "device_policies.consumer-subscription.applied", "device_policies.sca.applied", "device_policies.firewall.applied", "bios_version", "migration_completed_time", "default_gateway_ip", "device_policies.fim.applied", "device_policies.vulnerability-management.policy_type", "device_policies.vulnerability-management.applied", "instance_id", "service_provider_account_id", "device_policies.firewall.policy_type", "connection_ip", "local_ip", "device_policies.consumer-subscription.policy_type", "device_policies.host-retention.policy_type", "device_policies.mobile.applied", "chassis_type", "device_policies.network-scan-content.policy_type", "groups", "last_seen", "device_policies.sensor_update.policy_id", "device_policies.sensor_update.uninstall_protection", "device_policies.kubernetes-admission-control.applied", "device_policies.system-tray.policy_type", "device_policies.content-update.applied", "device_policies.it-automation.policy_id", "managed_apps.jumpcloud.version", "device_policies.remote_response.applied", "device_policies.browser-extension.policy_type", "external_ip", "policies.policy_type", "device_policies.ztl.policy_type", "device_policies.aws-verified-access.policy_id", "kernel_version", "product_type", "device_policies.content-update.policy_id", "ou", "device_policies.prevention.policy_type", "service_provider", "cpu_vendor", "site_name", "device_policies.jumpcloud.policy_type", "local_ip.raw", "managed_apps.airlock.version", "pod_namespace", "cid", "device_policies.airlock.applied", "device_policies.kubernetes-admission-control.policy_type", "device_policies.vulnerability-management.policy_id", "device_policies.data-protection.policy_type", "device_policies.mobile.policy_type", "pod_host_ip4", "connection_mac_address", "device_id", "major_version", "device_policies.consumer-subscription.policy_id", "mac_address", "managed_apps.identity-protection.version", "device_policies.remote_response.policy_type", "pod_hostname", "first_login_timestamp", "device_policies.device_control.policy_type", "device_policies.identity-protection.applied", "managed_apps.aws-verified-access.version", "pod_id", "release_group", "device_policies.ztl.applied", "license_activation_state", "os_product_name", "first_login_user", "device_policies.identity-protection.policy_type", "device_policies.jumpcloud.applied", "device_policies.host-retention.applied", "last_login_timestamp", "policies.applied", "device_policies.sensor_update.policy_type", "device_policies.airlock.policy_type", "device_policies.kubernetes-admission-control.policy_id", "product_type_desc", "device_policies.device_control.applied", "device_policies.it-automation.applied", "device_policies.firewall.rule_set_id", "device_policies.mobile.policy_id", "serial_number", "detection_suppression_status", "last_login_uid", "last_login_user_sid", "modified_timestamp", "device_policies.data-protection.applied", "device_policies.automox.policy_id", "device_policies.netskope.applied", "device_policies.data-protection.policy_id", "machine_domain", "minor_version", "platform_name", "status", "device_policies.system-tray.policy_id", "device_policies.firewall.policy_id", "os_build", "device_policies.prevention.policy_id", "device_policies.netskope.policy_type", "pod_ip4", "device_policies.browser-extension.applied", "config_id_base", "last_login_user", "system_product_name", "policy_id", "policies.policy_id", "device_policies.remote_response.policy_id", "config_id_platform", "hostname", "device_policies.device_control.policy_id", "device_policies.fim.policy_id", "_all", "managed_apps.automox.version", "deployment_type", "chassis_type_desc", "device_policies.sca.policy_type", "device_policies.sca.policy_id", "device_policies.it-automation.policy_type", "email", "k8s_cluster_git_version", "last_reboot", "pod_ip6", "agent_version", "config_id_build", "device_policies.airlock.policy_id", "device_policies.netskope.policy_id", "reduced_functionality_mode", "rtr_state", "cpu_signature", "pod_service_account_name", "k8s_cluster_version", "device_policies.network-scan-content.applied", "device_policies.automox.policy_type", "device_policies.content-update.policy_type", "device_policies.aws-verified-access.policy_type", "zone_group", "pod_host_ip6", "pod_name", "device_policies.prevention.applied", "device_policies.sensor_update.applied", "device_policies.ztl.policy_id", "device_policies.aws-verified-access.applied", "pod_labels", "bios_manufacturer", "managed_apps.netskope.version", "tags", "device_policies.network-scan-content.policy_id", "system_manufacturer", "device_policies.identity-protection.policy_id", "device_policies.host-retention.policy_id"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/devices/combined/devices/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeviceapiDeviceCombinedResponseSwagger'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Hosts.combined_devices_by_filter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Hosts#combined_devices_by_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search for hidden hosts in your environment by platform, hostname, IP, and other criteria. Returns full device records.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset The offset to page from, provided from the previous call as the \&quot;next\&quot; value, for the next result set. For the first call, do not supply an offset.
    # @option opts [Integer] :limit The maximum records to return. [1-10000] (default to 100)
    # @option opts [String] :sort The property to sort by (e.g. status.desc or hostname.asc). If not specified, the default sort will be device_id.asc. This should be supplied for each consecutive call.
    # @option opts [String] :filter The filter expression that should be used to limit the results. This should be supplied for each consecutive call.
    # @option opts [String] :fields The fields to return, comma delimited if specifying more than one field. For example: fields&#x3D;hostname,device_id would return device records only containing the hostname and device_id
    # @return [DeviceapiDeviceCombinedResponseSwagger]
    def combined_hidden_devices_by_filter(opts = {})
      data, _status_code, _headers = combined_hidden_devices_by_filter_with_http_info(opts)
      data
    end

    # Search for hidden hosts in your environment by platform, hostname, IP, and other criteria. Returns full device records.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset The offset to page from, provided from the previous call as the \&quot;next\&quot; value, for the next result set. For the first call, do not supply an offset.
    # @option opts [Integer] :limit The maximum records to return. [1-10000] (default to 100)
    # @option opts [String] :sort The property to sort by (e.g. status.desc or hostname.asc). If not specified, the default sort will be device_id.asc. This should be supplied for each consecutive call.
    # @option opts [String] :filter The filter expression that should be used to limit the results. This should be supplied for each consecutive call.
    # @option opts [String] :fields The fields to return, comma delimited if specifying more than one field. For example: fields&#x3D;hostname,device_id would return device records only containing the hostname and device_id
    # @return [Array<(DeviceapiDeviceCombinedResponseSwagger, Integer, Hash)>] DeviceapiDeviceCombinedResponseSwagger data, response status code and response headers
    def combined_hidden_devices_by_filter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Hosts.combined_hidden_devices_by_filter ...'
      end
      allowable_values = ["device_policies.jumpcloud.policy_id", "group_hash", "k8s_cluster_id", "linux_sensor_mode", "host_utc_offset", "first_seen", "platform_id", "pod_annotations", "internet_exposure", "filesystem_containment_status", "device_policies.browser-extension.policy_id", "agent_load_flags", "os_version", "device_policies.system-tray.applied", "device_policies.fim.policy_type", "device_policies.automox.applied", "device_policies.consumer-subscription.applied", "device_policies.sca.applied", "device_policies.firewall.applied", "bios_version", "migration_completed_time", "default_gateway_ip", "device_policies.fim.applied", "device_policies.vulnerability-management.policy_type", "device_policies.vulnerability-management.applied", "instance_id", "service_provider_account_id", "device_policies.firewall.policy_type", "connection_ip", "local_ip", "device_policies.consumer-subscription.policy_type", "device_policies.host-retention.policy_type", "device_policies.mobile.applied", "chassis_type", "device_policies.network-scan-content.policy_type", "groups", "last_seen", "device_policies.sensor_update.policy_id", "device_policies.sensor_update.uninstall_protection", "device_policies.kubernetes-admission-control.applied", "device_policies.system-tray.policy_type", "device_policies.content-update.applied", "device_policies.it-automation.policy_id", "managed_apps.jumpcloud.version", "device_policies.remote_response.applied", "device_policies.browser-extension.policy_type", "external_ip", "policies.policy_type", "device_policies.ztl.policy_type", "device_policies.aws-verified-access.policy_id", "kernel_version", "product_type", "device_policies.content-update.policy_id", "ou", "device_policies.prevention.policy_type", "service_provider", "cpu_vendor", "site_name", "device_policies.jumpcloud.policy_type", "local_ip.raw", "managed_apps.airlock.version", "pod_namespace", "cid", "device_policies.airlock.applied", "device_policies.kubernetes-admission-control.policy_type", "device_policies.vulnerability-management.policy_id", "device_policies.data-protection.policy_type", "device_policies.mobile.policy_type", "pod_host_ip4", "connection_mac_address", "device_id", "major_version", "device_policies.consumer-subscription.policy_id", "mac_address", "managed_apps.identity-protection.version", "device_policies.remote_response.policy_type", "pod_hostname", "first_login_timestamp", "device_policies.device_control.policy_type", "device_policies.identity-protection.applied", "managed_apps.aws-verified-access.version", "pod_id", "release_group", "device_policies.ztl.applied", "license_activation_state", "os_product_name", "first_login_user", "device_policies.identity-protection.policy_type", "device_policies.jumpcloud.applied", "device_policies.host-retention.applied", "last_login_timestamp", "policies.applied", "device_policies.sensor_update.policy_type", "device_policies.airlock.policy_type", "device_policies.kubernetes-admission-control.policy_id", "product_type_desc", "device_policies.device_control.applied", "device_policies.it-automation.applied", "device_policies.firewall.rule_set_id", "device_policies.mobile.policy_id", "serial_number", "detection_suppression_status", "last_login_uid", "last_login_user_sid", "modified_timestamp", "device_policies.data-protection.applied", "device_policies.automox.policy_id", "device_policies.netskope.applied", "device_policies.data-protection.policy_id", "machine_domain", "minor_version", "platform_name", "status", "device_policies.system-tray.policy_id", "device_policies.firewall.policy_id", "os_build", "device_policies.prevention.policy_id", "device_policies.netskope.policy_type", "pod_ip4", "device_policies.browser-extension.applied", "config_id_base", "last_login_user", "system_product_name", "policy_id", "policies.policy_id", "device_policies.remote_response.policy_id", "config_id_platform", "hostname", "device_policies.device_control.policy_id", "device_policies.fim.policy_id", "_all", "managed_apps.automox.version", "deployment_type", "chassis_type_desc", "device_policies.sca.policy_type", "device_policies.sca.policy_id", "device_policies.it-automation.policy_type", "email", "k8s_cluster_git_version", "last_reboot", "pod_ip6", "agent_version", "config_id_build", "device_policies.airlock.policy_id", "device_policies.netskope.policy_id", "reduced_functionality_mode", "rtr_state", "cpu_signature", "pod_service_account_name", "k8s_cluster_version", "device_policies.network-scan-content.applied", "device_policies.automox.policy_type", "device_policies.content-update.policy_type", "device_policies.aws-verified-access.policy_type", "zone_group", "pod_host_ip6", "pod_name", "device_policies.prevention.applied", "device_policies.sensor_update.applied", "device_policies.ztl.policy_id", "device_policies.aws-verified-access.applied", "pod_labels", "bios_manufacturer", "managed_apps.netskope.version", "tags", "device_policies.network-scan-content.policy_id", "system_manufacturer", "device_policies.identity-protection.policy_id", "device_policies.host-retention.policy_id"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/devices/combined/devices-hidden/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeviceapiDeviceCombinedResponseSwagger'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Hosts.combined_hidden_devices_by_filter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Hosts#combined_hidden_devices_by_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Performs the specified action on the provided group IDs.
    # @param ids [Array<String>] The group ids to act on
    # @param action_name [String] The action to perform.
    # @param body [MsaEntityActionRequest]
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :disable_hostname_check Bool to disable hostname check on add-member (default to false)
    # @return [DeviceapiGroupsResponseV1]
    def entities_perform_action(ids, action_name, body, opts = {})
      data, _status_code, _headers = entities_perform_action_with_http_info(ids, action_name, body, opts)
      data
    end

    # Performs the specified action on the provided group IDs.
    # @param ids [Array<String>] The group ids to act on
    # @param action_name [String] The action to perform.
    # @param body [MsaEntityActionRequest]
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :disable_hostname_check Bool to disable hostname check on add-member (default to false)
    # @return [Array<(DeviceapiGroupsResponseV1, Integer, Hash)>] DeviceapiGroupsResponseV1 data, response status code and response headers
    def entities_perform_action_with_http_info(ids, action_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Hosts.entities_perform_action ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling Hosts.entities_perform_action"
      end
      # verify the required parameter 'action_name' is set
      if @api_client.config.client_side_validation && action_name.nil?
        fail ArgumentError, "Missing the required parameter 'action_name' when calling Hosts.entities_perform_action"
      end
      # verify enum value
      allowable_values = ["add_group_member", "remove_all", "remove_group_member"]
      if @api_client.config.client_side_validation && !allowable_values.include?(action_name)
        fail ArgumentError, "invalid value for \"action_name\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling Hosts.entities_perform_action"
      end
      # resource path
      local_var_path = '/devices/entities/group-actions/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)
      query_params[:'action_name'] = action_name
      query_params[:'disable_hostname_check'] = opts[:'disable_hostname_check'] if !opts[:'disable_hostname_check'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DeviceapiGroupsResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Hosts.entities_perform_action",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Hosts#entities_perform_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details on one or more hosts by providing host IDs as a query parameter.  Supports up to a maximum 100 IDs.
    # @param ids [Array<String>] The host agentIDs used to get details on
    # @param [Hash] opts the optional parameters
    # @return [DeviceapiDeviceDetailsResponseSwagger]
    def get_device_details_v2(ids, opts = {})
      data, _status_code, _headers = get_device_details_v2_with_http_info(ids, opts)
      data
    end

    # Get details on one or more hosts by providing host IDs as a query parameter.  Supports up to a maximum 100 IDs.
    # @param ids [Array<String>] The host agentIDs used to get details on
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeviceapiDeviceDetailsResponseSwagger, Integer, Hash)>] DeviceapiDeviceDetailsResponseSwagger data, response status code and response headers
    def get_device_details_v2_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Hosts.get_device_details_v2 ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling Hosts.get_device_details_v2"
      end
      if @api_client.config.client_side_validation && ids.length > 100
        fail ArgumentError, 'invalid value for "ids" when calling Hosts.get_device_details_v2, number of items must be less than or equal to 100.'
      end

      # resource path
      local_var_path = '/devices/entities/devices/v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeviceapiDeviceDetailsResponseSwagger'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Hosts.get_device_details_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Hosts#get_device_details_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the online status for one or more hosts by specifying each host’s unique ID. Successful requests return an HTTP 200 response and the status for each host identified by a `state` of `online`, `offline`, or `unknown` for each host, identified by host `id`.  Make a `GET` request to `/devices/queries/devices/v1` to get a list of host IDs.
    # @param ids [Array<String>] The unique ID of the host to get the online status of.
    # @param [Hash] opts the optional parameters
    # @return [StateOnlineStateRespV1]
    def get_online_state_v1(ids, opts = {})
      data, _status_code, _headers = get_online_state_v1_with_http_info(ids, opts)
      data
    end

    # Get the online status for one or more hosts by specifying each host’s unique ID. Successful requests return an HTTP 200 response and the status for each host identified by a &#x60;state&#x60; of &#x60;online&#x60;, &#x60;offline&#x60;, or &#x60;unknown&#x60; for each host, identified by host &#x60;id&#x60;.  Make a &#x60;GET&#x60; request to &#x60;/devices/queries/devices/v1&#x60; to get a list of host IDs.
    # @param ids [Array<String>] The unique ID of the host to get the online status of.
    # @param [Hash] opts the optional parameters
    # @return [Array<(StateOnlineStateRespV1, Integer, Hash)>] StateOnlineStateRespV1 data, response status code and response headers
    def get_online_state_v1_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Hosts.get_online_state_v1 ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling Hosts.get_online_state_v1"
      end
      # resource path
      local_var_path = '/devices/entities/online-state/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StateOnlineStateRespV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Hosts.get_online_state_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Hosts#get_online_state_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Take various actions on the hosts in your environment. Contain or lift containment on a host. Delete or restore a host.
    # @param action_name [String] Specify one of these actions:  - &#x60;contain&#x60; - This action contains the host, which stops any network communications to locations other than the CrowdStrike cloud and IPs specified in your [containment policy](https://falcon.crowdstrike.com/support/documentation/11/getting-started-guide#containmentpolicy) - &#x60;lift_containment&#x60;: This action lifts containment on the host, which returns its network communications to normal - &#x60;hide_host&#x60;: This action will delete a host. After the host is deleted, no new detections for that host will be reported via UI or APIs - &#x60;unhide_host&#x60;: This action will restore a host. Detection reporting will resume after the host is restored
    # @param body [MsaEntityActionRequestV2] The host agent ID (AID) of the host you want to contain. Get an agent ID from a detection, the Falcon console, or the Streaming API.  Provide the ID in JSON format with the key &#x60;ids&#x60; and the value in square brackets, such as:   &#x60;\&quot;ids\&quot;: [\&quot;123456789\&quot;]&#x60;
    # @param [Hash] opts the optional parameters
    # @return [MsaReplyAffectedEntities]
    def perform_action_v2(action_name, body, opts = {})
      data, _status_code, _headers = perform_action_v2_with_http_info(action_name, body, opts)
      data
    end

    # Take various actions on the hosts in your environment. Contain or lift containment on a host. Delete or restore a host.
    # @param action_name [String] Specify one of these actions:  - &#x60;contain&#x60; - This action contains the host, which stops any network communications to locations other than the CrowdStrike cloud and IPs specified in your [containment policy](https://falcon.crowdstrike.com/support/documentation/11/getting-started-guide#containmentpolicy) - &#x60;lift_containment&#x60;: This action lifts containment on the host, which returns its network communications to normal - &#x60;hide_host&#x60;: This action will delete a host. After the host is deleted, no new detections for that host will be reported via UI or APIs - &#x60;unhide_host&#x60;: This action will restore a host. Detection reporting will resume after the host is restored
    # @param body [MsaEntityActionRequestV2] The host agent ID (AID) of the host you want to contain. Get an agent ID from a detection, the Falcon console, or the Streaming API.  Provide the ID in JSON format with the key &#x60;ids&#x60; and the value in square brackets, such as:   &#x60;\&quot;ids\&quot;: [\&quot;123456789\&quot;]&#x60;
    # @param [Hash] opts the optional parameters
    # @return [Array<(MsaReplyAffectedEntities, Integer, Hash)>] MsaReplyAffectedEntities data, response status code and response headers
    def perform_action_v2_with_http_info(action_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Hosts.perform_action_v2 ...'
      end
      # verify the required parameter 'action_name' is set
      if @api_client.config.client_side_validation && action_name.nil?
        fail ArgumentError, "Missing the required parameter 'action_name' when calling Hosts.perform_action_v2"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling Hosts.perform_action_v2"
      end
      # resource path
      local_var_path = '/devices/entities/devices-actions/v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'action_name'] = action_name

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'MsaReplyAffectedEntities'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Hosts.perform_action_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Hosts#perform_action_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details on one or more hosts by providing host IDs in a POST body.  Supports up to a maximum 5000 IDs.
    # @param body [MsaIdsRequest]
    # @param [Hash] opts the optional parameters
    # @return [DeviceapiDeviceDetailsResponseSwagger]
    def post_device_details_v2(body, opts = {})
      data, _status_code, _headers = post_device_details_v2_with_http_info(body, opts)
      data
    end

    # Get details on one or more hosts by providing host IDs in a POST body.  Supports up to a maximum 5000 IDs.
    # @param body [MsaIdsRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeviceapiDeviceDetailsResponseSwagger, Integer, Hash)>] DeviceapiDeviceDetailsResponseSwagger data, response status code and response headers
    def post_device_details_v2_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Hosts.post_device_details_v2 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling Hosts.post_device_details_v2"
      end
      # resource path
      local_var_path = '/devices/entities/devices/v2'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DeviceapiDeviceDetailsResponseSwagger'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Hosts.post_device_details_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Hosts#post_device_details_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve details about recent login sessions for a set of devices.
    # @param body [MsaIdsRequest]
    # @param [Hash] opts the optional parameters
    # @return [DeviceapiLoginHistoryResponseV1]
    def query_device_login_history(body, opts = {})
      data, _status_code, _headers = query_device_login_history_with_http_info(body, opts)
      data
    end

    # Retrieve details about recent login sessions for a set of devices.
    # @param body [MsaIdsRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeviceapiLoginHistoryResponseV1, Integer, Hash)>] DeviceapiLoginHistoryResponseV1 data, response status code and response headers
    def query_device_login_history_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Hosts.query_device_login_history ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling Hosts.query_device_login_history"
      end
      # resource path
      local_var_path = '/devices/combined/devices/login-history/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DeviceapiLoginHistoryResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Hosts.query_device_login_history",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Hosts#query_device_login_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve details about recent interactive login sessions for a set of devices powered by the Host Timeline. A max of 10 device ids can be specified
    # @param body [MsaIdsRequest]
    # @param [Hash] opts the optional parameters
    # @return [DeviceapiLoginHistoryResponseV1]
    def query_device_login_history_v2(body, opts = {})
      data, _status_code, _headers = query_device_login_history_v2_with_http_info(body, opts)
      data
    end

    # Retrieve details about recent interactive login sessions for a set of devices powered by the Host Timeline. A max of 10 device ids can be specified
    # @param body [MsaIdsRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeviceapiLoginHistoryResponseV1, Integer, Hash)>] DeviceapiLoginHistoryResponseV1 data, response status code and response headers
    def query_device_login_history_v2_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Hosts.query_device_login_history_v2 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling Hosts.query_device_login_history_v2"
      end
      # resource path
      local_var_path = '/devices/combined/devices/login-history/v2'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DeviceapiLoginHistoryResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Hosts.query_device_login_history_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Hosts#query_device_login_history_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search for hosts in your environment by platform, hostname, IP, and other criteria.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The offset to start retrieving records from
    # @option opts [Integer] :limit The maximum records to return. [1-5000]
    # @option opts [String] :sort The property to sort by (e.g. status.desc or hostname.asc)
    # @option opts [String] :filter The filter expression that should be used to limit the results
    # @return [MsaQueryResponse]
    def query_devices_by_filter(opts = {})
      data, _status_code, _headers = query_devices_by_filter_with_http_info(opts)
      data
    end

    # Search for hosts in your environment by platform, hostname, IP, and other criteria.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The offset to start retrieving records from
    # @option opts [Integer] :limit The maximum records to return. [1-5000]
    # @option opts [String] :sort The property to sort by (e.g. status.desc or hostname.asc)
    # @option opts [String] :filter The filter expression that should be used to limit the results
    # @return [Array<(MsaQueryResponse, Integer, Hash)>] MsaQueryResponse data, response status code and response headers
    def query_devices_by_filter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Hosts.query_devices_by_filter ...'
      end
      # resource path
      local_var_path = '/devices/queries/devices/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Hosts.query_devices_by_filter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Hosts#query_devices_by_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search for hosts in your environment by platform, hostname, IP, and other criteria with continuous pagination capability (based on offset pointer which expires after 2 minutes with no maximum limit)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset The offset to page from, provided from the previous scroll call, for the next result set. For the first call, do not supply an offset.
    # @option opts [Integer] :limit The maximum records to return. [1-10000]
    # @option opts [String] :sort The property to sort by (e.g. status.desc or hostname.asc)
    # @option opts [String] :filter The filter expression that should be used to limit the results
    # @return [DeviceapiDeviceResponse]
    def query_devices_by_filter_scroll(opts = {})
      data, _status_code, _headers = query_devices_by_filter_scroll_with_http_info(opts)
      data
    end

    # Search for hosts in your environment by platform, hostname, IP, and other criteria with continuous pagination capability (based on offset pointer which expires after 2 minutes with no maximum limit)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset The offset to page from, provided from the previous scroll call, for the next result set. For the first call, do not supply an offset.
    # @option opts [Integer] :limit The maximum records to return. [1-10000]
    # @option opts [String] :sort The property to sort by (e.g. status.desc or hostname.asc)
    # @option opts [String] :filter The filter expression that should be used to limit the results
    # @return [Array<(DeviceapiDeviceResponse, Integer, Hash)>] DeviceapiDeviceResponse data, response status code and response headers
    def query_devices_by_filter_scroll_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Hosts.query_devices_by_filter_scroll ...'
      end
      # resource path
      local_var_path = '/devices/queries/devices-scroll/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeviceapiDeviceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Hosts.query_devices_by_filter_scroll",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Hosts#query_devices_by_filter_scroll\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve history of IP and MAC addresses of devices.
    # @param body [MsaIdsRequest]
    # @param [Hash] opts the optional parameters
    # @return [DeviceapiNetworkAddressHistoryResponseV1]
    def query_get_network_address_history_v1(body, opts = {})
      data, _status_code, _headers = query_get_network_address_history_v1_with_http_info(body, opts)
      data
    end

    # Retrieve history of IP and MAC addresses of devices.
    # @param body [MsaIdsRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeviceapiNetworkAddressHistoryResponseV1, Integer, Hash)>] DeviceapiNetworkAddressHistoryResponseV1 data, response status code and response headers
    def query_get_network_address_history_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Hosts.query_get_network_address_history_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling Hosts.query_get_network_address_history_v1"
      end
      # resource path
      local_var_path = '/devices/combined/devices/network-address-history/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DeviceapiNetworkAddressHistoryResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Hosts.query_get_network_address_history_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Hosts#query_get_network_address_history_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve hidden hosts that match the provided filter criteria.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The offset to start retrieving records from
    # @option opts [Integer] :limit The maximum records to return. [1-5000]
    # @option opts [String] :sort The property to sort by (e.g. status.desc or hostname.asc)
    # @option opts [String] :filter The filter expression that should be used to limit the results
    # @return [MsaQueryResponse]
    def query_hidden_devices(opts = {})
      data, _status_code, _headers = query_hidden_devices_with_http_info(opts)
      data
    end

    # Retrieve hidden hosts that match the provided filter criteria.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The offset to start retrieving records from
    # @option opts [Integer] :limit The maximum records to return. [1-5000]
    # @option opts [String] :sort The property to sort by (e.g. status.desc or hostname.asc)
    # @option opts [String] :filter The filter expression that should be used to limit the results
    # @return [Array<(MsaQueryResponse, Integer, Hash)>] MsaQueryResponse data, response status code and response headers
    def query_hidden_devices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Hosts.query_hidden_devices ...'
      end
      # resource path
      local_var_path = '/devices/queries/devices-hidden/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Hosts.query_hidden_devices",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Hosts#query_hidden_devices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Append or remove one or more Falcon Grouping Tags on one or more hosts.  Tags must be of the form FalconGroupingTags/
    # @param body [DeviceapiUpdateDeviceTagsRequestV1]
    # @param [Hash] opts the optional parameters
    # @return [DeviceapiUpdateDeviceTagsSwaggerV1]
    def update_device_tags(body, opts = {})
      data, _status_code, _headers = update_device_tags_with_http_info(body, opts)
      data
    end

    # Append or remove one or more Falcon Grouping Tags on one or more hosts.  Tags must be of the form FalconGroupingTags/
    # @param body [DeviceapiUpdateDeviceTagsRequestV1]
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeviceapiUpdateDeviceTagsSwaggerV1, Integer, Hash)>] DeviceapiUpdateDeviceTagsSwaggerV1 data, response status code and response headers
    def update_device_tags_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Hosts.update_device_tags ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling Hosts.update_device_tags"
      end
      # resource path
      local_var_path = '/devices/entities/devices/tags/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DeviceapiUpdateDeviceTagsSwaggerV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Hosts.update_device_tags",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Hosts#update_device_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
