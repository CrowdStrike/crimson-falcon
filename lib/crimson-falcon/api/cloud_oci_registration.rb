=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'cgi'

module Falcon
  class CloudOciRegistration
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create OCI tenancy account in CSPM
    # @param body [DomainOCITenancyCreateRequestExtV1]
    # @param [Hash] opts the optional parameters
    # @return [DomainOCITenancyCreateResponseExtV1]
    def cloud_security_registration_oci_create_account(body, opts = {})
      data, _status_code, _headers = cloud_security_registration_oci_create_account_with_http_info(body, opts)
      data
    end

    # Create OCI tenancy account in CSPM
    # @param body [DomainOCITenancyCreateRequestExtV1]
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainOCITenancyCreateResponseExtV1, Integer, Hash)>] DomainOCITenancyCreateResponseExtV1 data, response status code and response headers
    def cloud_security_registration_oci_create_account_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudOciRegistration.cloud_security_registration_oci_create_account ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CloudOciRegistration.cloud_security_registration_oci_create_account"
      end
      # resource path
      local_var_path = '/cloud-security-registration-oci/entities/accounts/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainOCITenancyCreateResponseExtV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CloudOciRegistration.cloud_security_registration_oci_create_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudOciRegistration#cloud_security_registration_oci_create_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an existing OCI tenancy in CSPM.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :ids OCI tenancy ocids to remove
    # @return [MsaspecResponseFields]
    def cloud_security_registration_oci_delete_account(opts = {})
      data, _status_code, _headers = cloud_security_registration_oci_delete_account_with_http_info(opts)
      data
    end

    # Delete an existing OCI tenancy in CSPM.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :ids OCI tenancy ocids to remove
    # @return [Array<(MsaspecResponseFields, Integer, Hash)>] MsaspecResponseFields data, response status code and response headers
    def cloud_security_registration_oci_delete_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudOciRegistration.cloud_security_registration_oci_delete_account ...'
      end
      # resource path
      local_var_path = '/cloud-security-registration-oci/entities/accounts/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :multi) if !opts[:'ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaspecResponseFields'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CloudOciRegistration.cloud_security_registration_oci_delete_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudOciRegistration#cloud_security_registration_oci_delete_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve script to create resources in tenancy OCID
    # @param body [DomainOCIDownloadScriptRequestV1]
    # @param [Hash] opts the optional parameters
    # @return [DomainOCIProvisionGetAccountScriptResponseV1]
    def cloud_security_registration_oci_download_script(body, opts = {})
      data, _status_code, _headers = cloud_security_registration_oci_download_script_with_http_info(body, opts)
      data
    end

    # Retrieve script to create resources in tenancy OCID
    # @param body [DomainOCIDownloadScriptRequestV1]
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainOCIProvisionGetAccountScriptResponseV1, Integer, Hash)>] DomainOCIProvisionGetAccountScriptResponseV1 data, response status code and response headers
    def cloud_security_registration_oci_download_script_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudOciRegistration.cloud_security_registration_oci_download_script ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CloudOciRegistration.cloud_security_registration_oci_download_script"
      end
      # resource path
      local_var_path = '/cloud-security-registration-oci/entities/scripts/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainOCIProvisionGetAccountScriptResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CloudOciRegistration.cloud_security_registration_oci_download_script",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudOciRegistration#cloud_security_registration_oci_download_script\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a list of OCI tenancies with support for FQL filtering, sorting, and pagination
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL (Falcon Query Language) string for filtering results. Allowed filters are Set{key_age, overall_status, created_at, updated_at, tenancy_ocid, tenancy_name, home_region}
    # @option opts [String] :sort Field and direction for sorting results - allowed sort fields are Set{overall_status, created_at, updated_at, tenancy_ocid, tenancy_name, home_region, key_age}
    # @option opts [String] :next_token Token for cursor-based pagination. Currently unsupported.
    # @option opts [Integer] :limit Maximum number of records to return (default: 100, max: 10000) (default to 100)
    # @option opts [Integer] :offset Starting index of result (default to 0)
    # @return [DomainOCITenancyResponseExtV1]
    def cloud_security_registration_oci_get_account(opts = {})
      data, _status_code, _headers = cloud_security_registration_oci_get_account_with_http_info(opts)
      data
    end

    # Retrieve a list of OCI tenancies with support for FQL filtering, sorting, and pagination
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL (Falcon Query Language) string for filtering results. Allowed filters are Set{key_age, overall_status, created_at, updated_at, tenancy_ocid, tenancy_name, home_region}
    # @option opts [String] :sort Field and direction for sorting results - allowed sort fields are Set{overall_status, created_at, updated_at, tenancy_ocid, tenancy_name, home_region, key_age}
    # @option opts [String] :next_token Token for cursor-based pagination. Currently unsupported.
    # @option opts [Integer] :limit Maximum number of records to return (default: 100, max: 10000) (default to 100)
    # @option opts [Integer] :offset Starting index of result (default to 0)
    # @return [Array<(DomainOCITenancyResponseExtV1, Integer, Hash)>] DomainOCITenancyResponseExtV1 data, response status code and response headers
    def cloud_security_registration_oci_get_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudOciRegistration.cloud_security_registration_oci_get_account ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 10000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling CloudOciRegistration.cloud_security_registration_oci_get_account, must be smaller than or equal to 10000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling CloudOciRegistration.cloud_security_registration_oci_get_account, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling CloudOciRegistration.cloud_security_registration_oci_get_account, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/cloud-security-registration-oci/combined/accounts/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'next_token'] = opts[:'next_token'] if !opts[:'next_token'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainOCITenancyResponseExtV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CloudOciRegistration.cloud_security_registration_oci_get_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudOciRegistration#cloud_security_registration_oci_get_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refresh key for the OCI Tenancy
    # @param body [DomainOCITenancyRotateKeyRequestExtV1]
    # @param [Hash] opts the optional parameters
    # @return [DomainOCITenancyRotateKeyResponseExtV1]
    def cloud_security_registration_oci_rotate_key(body, opts = {})
      data, _status_code, _headers = cloud_security_registration_oci_rotate_key_with_http_info(body, opts)
      data
    end

    # Refresh key for the OCI Tenancy
    # @param body [DomainOCITenancyRotateKeyRequestExtV1]
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainOCITenancyRotateKeyResponseExtV1, Integer, Hash)>] DomainOCITenancyRotateKeyResponseExtV1 data, response status code and response headers
    def cloud_security_registration_oci_rotate_key_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudOciRegistration.cloud_security_registration_oci_rotate_key ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CloudOciRegistration.cloud_security_registration_oci_rotate_key"
      end
      # resource path
      local_var_path = '/cloud-security-registration-oci/entities/account-rotate-keys/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainOCITenancyRotateKeyResponseExtV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CloudOciRegistration.cloud_security_registration_oci_rotate_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudOciRegistration#cloud_security_registration_oci_rotate_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patch an existing OCI account in our system for a customer.
    # @param body [DomainOCITenancyUpdateRequestExtV1]
    # @param [Hash] opts the optional parameters
    # @return [DomainOCITenancyUpdateResponseExtV1]
    def cloud_security_registration_oci_update_account(body, opts = {})
      data, _status_code, _headers = cloud_security_registration_oci_update_account_with_http_info(body, opts)
      data
    end

    # Patch an existing OCI account in our system for a customer.
    # @param body [DomainOCITenancyUpdateRequestExtV1]
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainOCITenancyUpdateResponseExtV1, Integer, Hash)>] DomainOCITenancyUpdateResponseExtV1 data, response status code and response headers
    def cloud_security_registration_oci_update_account_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudOciRegistration.cloud_security_registration_oci_update_account ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CloudOciRegistration.cloud_security_registration_oci_update_account"
      end
      # resource path
      local_var_path = '/cloud-security-registration-oci/entities/accounts/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainOCITenancyUpdateResponseExtV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CloudOciRegistration.cloud_security_registration_oci_update_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudOciRegistration#cloud_security_registration_oci_update_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate the OCI account in CSPM for a provided CID. For internal clients only.
    # @param body [DomainOCIValidateRequestV1]
    # @param [Hash] opts the optional parameters
    # @return [DomainOCITenancyValidationResponse]
    def cloud_security_registration_oci_validate_tenancy(body, opts = {})
      data, _status_code, _headers = cloud_security_registration_oci_validate_tenancy_with_http_info(body, opts)
      data
    end

    # Validate the OCI account in CSPM for a provided CID. For internal clients only.
    # @param body [DomainOCIValidateRequestV1]
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainOCITenancyValidationResponse, Integer, Hash)>] DomainOCITenancyValidationResponse data, response status code and response headers
    def cloud_security_registration_oci_validate_tenancy_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudOciRegistration.cloud_security_registration_oci_validate_tenancy ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CloudOciRegistration.cloud_security_registration_oci_validate_tenancy"
      end
      # resource path
      local_var_path = '/cloud-security-registration-oci/entities/account-validate/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainOCITenancyValidationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CloudOciRegistration.cloud_security_registration_oci_validate_tenancy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudOciRegistration#cloud_security_registration_oci_validate_tenancy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
