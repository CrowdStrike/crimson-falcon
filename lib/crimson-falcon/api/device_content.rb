=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'cgi'

module Falcon
  class DeviceContent
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve the host content state for a number of ids between 1 and 100.
    # @param ids [Array<String>] The ids of the devices to fetch the content state of.
    # @param [Hash] opts the optional parameters
    # @return [DevicecontentapiEntitiesResponseV1]
    def entities_states_v1(ids, opts = {})
      data, _status_code, _headers = entities_states_v1_with_http_info(ids, opts)
      data
    end

    # Retrieve the host content state for a number of ids between 1 and 100.
    # @param ids [Array<String>] The ids of the devices to fetch the content state of.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DevicecontentapiEntitiesResponseV1, Integer, Hash)>] DevicecontentapiEntitiesResponseV1 data, response status code and response headers
    def entities_states_v1_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceContent.entities_states_v1 ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling DeviceContent.entities_states_v1"
      end
      # resource path
      local_var_path = '/device-content/entities/states/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DevicecontentapiEntitiesResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"DeviceContent.entities_states_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceContent#entities_states_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query for the content state of the host.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The max number of resource ids to return. (default to 100)
    # @option opts [String] :sort What field to sort the results on. (default to 'last_seen.desc')
    # @option opts [Integer] :offset The offset token returned from the previous query. If none was returned, there are no more pages to the result set.
    # @option opts [String] :filter The FQL search filter
    # @return [DevicecontentapiQueryResponseV1]
    def queries_states_v1(opts = {})
      data, _status_code, _headers = queries_states_v1_with_http_info(opts)
      data
    end

    # Query for the content state of the host.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The max number of resource ids to return. (default to 100)
    # @option opts [String] :sort What field to sort the results on. (default to 'last_seen.desc')
    # @option opts [Integer] :offset The offset token returned from the previous query. If none was returned, there are no more pages to the result set.
    # @option opts [String] :filter The FQL search filter
    # @return [Array<(DevicecontentapiQueryResponseV1, Integer, Hash)>] DevicecontentapiQueryResponseV1 data, response status code and response headers
    def queries_states_v1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceContent.queries_states_v1 ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 10000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DeviceContent.queries_states_v1, must be smaller than or equal to 10000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DeviceContent.queries_states_v1, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/device-content/queries/states/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DevicecontentapiQueryResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"DeviceContent.queries_states_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceContent#queries_states_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
