=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'cgi'

module Falcon
  class ZeroTrustAssessmentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Zero Trust Assessment data for one or more hosts by providing agent IDs (AID) and a customer ID (CID).
    # @param ids [Array<String>] One or more agent IDs, which you can find in the data.zta file, or the Falcon console.
    # @param [Hash] opts the optional parameters
    # @return [DomainAssessmentsResponse]
    def get_assessment_v1(ids, opts = {})
      data, _status_code, _headers = get_assessment_v1_with_http_info(ids, opts)
      data
    end

    # Get Zero Trust Assessment data for one or more hosts by providing agent IDs (AID) and a customer ID (CID).
    # @param ids [Array<String>] One or more agent IDs, which you can find in the data.zta file, or the Falcon console.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainAssessmentsResponse, Integer, Hash)>] DomainAssessmentsResponse data, response status code and response headers
    def get_assessment_v1_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ZeroTrustAssessmentApi.get_assessment_v1 ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling ZeroTrustAssessmentApi.get_assessment_v1"
      end
      # resource path
      local_var_path = '/zero-trust-assessment/entities/assessments/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainAssessmentsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ZeroTrustAssessmentApi.get_assessment_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZeroTrustAssessmentApi#get_assessment_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Zero Trust Assessment data for one or more hosts by providing a customer ID (CID) and a range of scores.
    # @param filter [String] FQL query specifying the filter score.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of scores to return in this response (min: 1, max: 1000, default: 100). Use with the &#x60;after&#x60; parameter to manage pagination of results.
    # @option opts [String] :after A pagination token used with the &#x60;limit&#x60; parameter to manage pagination of results. On your first request, don&#39;t provide an &#x60;after&#x60; token. On subsequent requests, provide the &#x60;after&#x60; token from the previous response to continue from that place in the results.
    # @option opts [String] :sort Sort accounts by their properties. A single sort field is allowed. Defaults to ascending. Supported sort option include:  &lt;ul&gt;&lt;li&gt;score|desc&lt;/li&gt;&lt;li&gt;score|asc&lt;/li&gt;&lt;/ul&gt; (default to 'score')
    # @return [DomainAssessmentsByScoreResponse]
    def get_assessments_by_score_v1(filter, opts = {})
      data, _status_code, _headers = get_assessments_by_score_v1_with_http_info(filter, opts)
      data
    end

    # Get Zero Trust Assessment data for one or more hosts by providing a customer ID (CID) and a range of scores.
    # @param filter [String] FQL query specifying the filter score.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of scores to return in this response (min: 1, max: 1000, default: 100). Use with the &#x60;after&#x60; parameter to manage pagination of results.
    # @option opts [String] :after A pagination token used with the &#x60;limit&#x60; parameter to manage pagination of results. On your first request, don&#39;t provide an &#x60;after&#x60; token. On subsequent requests, provide the &#x60;after&#x60; token from the previous response to continue from that place in the results.
    # @option opts [String] :sort Sort accounts by their properties. A single sort field is allowed. Defaults to ascending. Supported sort option include:  &lt;ul&gt;&lt;li&gt;score|desc&lt;/li&gt;&lt;li&gt;score|asc&lt;/li&gt;&lt;/ul&gt; (default to 'score')
    # @return [Array<(DomainAssessmentsByScoreResponse, Integer, Hash)>] DomainAssessmentsByScoreResponse data, response status code and response headers
    def get_assessments_by_score_v1_with_http_info(filter, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ZeroTrustAssessmentApi.get_assessments_by_score_v1 ...'
      end
      # verify the required parameter 'filter' is set
      if @api_client.config.client_side_validation && filter.nil?
        fail ArgumentError, "Missing the required parameter 'filter' when calling ZeroTrustAssessmentApi.get_assessments_by_score_v1"
      end
      # resource path
      local_var_path = '/zero-trust-assessment/queries/assessments/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = filter
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainAssessmentsByScoreResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ZeroTrustAssessmentApi.get_assessments_by_score_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZeroTrustAssessmentApi#get_assessments_by_score_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the Zero Trust Assessment audit report for one customer ID (CID).
    # @param [Hash] opts the optional parameters
    # @return [DomainAuditResponse]
    def get_audit_v1(opts = {})
      data, _status_code, _headers = get_audit_v1_with_http_info(opts)
      data
    end

    # Get the Zero Trust Assessment audit report for one customer ID (CID).
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainAuditResponse, Integer, Hash)>] DomainAuditResponse data, response status code and response headers
    def get_audit_v1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ZeroTrustAssessmentApi.get_audit_v1 ...'
      end
      # resource path
      local_var_path = '/zero-trust-assessment/entities/audit/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainAuditResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ZeroTrustAssessmentApi.get_audit_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZeroTrustAssessmentApi#get_audit_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
