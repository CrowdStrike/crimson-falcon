=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'cgi'

module Falcon
  class KubernetesContainerCompliance
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returns cluster details along with aggregated assessment results organized by cluster, including pass/fail assessment counts for various asset types.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The zero-based position of the first record to return.
    # @option opts [Integer] :limit The maximum number of records to return. (1-500) Default is 20.
    # @option opts [String] :filter FQL filter expression used to limit the results. Filter fields include: cid, cloud_info.cloud_account_id, cloud_info.cloud_provider, cloud_info.cloud_region, cloud_info.cluster_id, cloud_info.cluster_name, cloud_info.cluster_type, compliance_finding.framework_name, compliance_finding.framework_name_version, compliance_finding.framework_version, compliance_finding.severity
    # @return [DomainAPIAggregateResponseGroupByClustersV2]
    def aggregate_assessments_grouped_by_clusters_v2(opts = {})
      data, _status_code, _headers = aggregate_assessments_grouped_by_clusters_v2_with_http_info(opts)
      data
    end

    # Returns cluster details along with aggregated assessment results organized by cluster, including pass/fail assessment counts for various asset types.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The zero-based position of the first record to return.
    # @option opts [Integer] :limit The maximum number of records to return. (1-500) Default is 20.
    # @option opts [String] :filter FQL filter expression used to limit the results. Filter fields include: cid, cloud_info.cloud_account_id, cloud_info.cloud_provider, cloud_info.cloud_region, cloud_info.cluster_id, cloud_info.cluster_name, cloud_info.cluster_type, compliance_finding.framework_name, compliance_finding.framework_name_version, compliance_finding.framework_version, compliance_finding.severity
    # @return [Array<(DomainAPIAggregateResponseGroupByClustersV2, Integer, Hash)>] DomainAPIAggregateResponseGroupByClustersV2 data, response status code and response headers
    def aggregate_assessments_grouped_by_clusters_v2_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KubernetesContainerCompliance.aggregate_assessments_grouped_by_clusters_v2 ...'
      end
      # resource path
      local_var_path = '/container-compliance/aggregates/clusters/v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainAPIAggregateResponseGroupByClustersV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"KubernetesContainerCompliance.aggregate_assessments_grouped_by_clusters_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KubernetesContainerCompliance#aggregate_assessments_grouped_by_clusters_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns rule details along with aggregated assessment results organized by compliance rule, including pass/fail assessment counts.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The zero-based position of the first record to return.
    # @option opts [Integer] :limit The maximum number of records to return. (1-500) Default is 20.
    # @option opts [String] :filter FQL filter expression used to limit the results. Filter fields include: cid, cloud_info.cloud_account_id, cloud_info.cloud_provider, cloud_info.cloud_region, cloud_info.cluster_id, cloud_info.cluster_name, cloud_info.cluster_type, compliance_finding.asset_type, compliance_finding.framework_name, compliance_finding.framework_name_version, compliance_finding.framework_version, compliance_finding.id, compliance_finding.severity, compliance_finding.status
    # @return [DomainAPIAggregateResponseGroupByRulesV1]
    def aggregate_assessments_grouped_by_rules_v2(opts = {})
      data, _status_code, _headers = aggregate_assessments_grouped_by_rules_v2_with_http_info(opts)
      data
    end

    # Returns rule details along with aggregated assessment results organized by compliance rule, including pass/fail assessment counts.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The zero-based position of the first record to return.
    # @option opts [Integer] :limit The maximum number of records to return. (1-500) Default is 20.
    # @option opts [String] :filter FQL filter expression used to limit the results. Filter fields include: cid, cloud_info.cloud_account_id, cloud_info.cloud_provider, cloud_info.cloud_region, cloud_info.cluster_id, cloud_info.cluster_name, cloud_info.cluster_type, compliance_finding.asset_type, compliance_finding.framework_name, compliance_finding.framework_name_version, compliance_finding.framework_version, compliance_finding.id, compliance_finding.severity, compliance_finding.status
    # @return [Array<(DomainAPIAggregateResponseGroupByRulesV1, Integer, Hash)>] DomainAPIAggregateResponseGroupByRulesV1 data, response status code and response headers
    def aggregate_assessments_grouped_by_rules_v2_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KubernetesContainerCompliance.aggregate_assessments_grouped_by_rules_v2 ...'
      end
      # resource path
      local_var_path = '/container-compliance/aggregates/rules/v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainAPIAggregateResponseGroupByRulesV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"KubernetesContainerCompliance.aggregate_assessments_grouped_by_rules_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KubernetesContainerCompliance#aggregate_assessments_grouped_by_rules_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Provides aggregated compliance assessment metrics and rule status information, organized by asset type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL filter expression used to limit the results. Filter fields include: cid, cloud_info.cloud_account_id, cloud_info.cloud_provider, cloud_info.cloud_region, cloud_info.cluster_id, cloud_info.cluster_name, cloud_info.cluster_type, compliance_finding.asset_type, compliance_finding.framework_name, compliance_finding.framework_name_version, compliance_finding.framework_version, compliance_finding.severity
    # @return [DomainAPIAggregateResponseComplianceByAssetTypeV1]
    def aggregate_compliance_by_asset_type(opts = {})
      data, _status_code, _headers = aggregate_compliance_by_asset_type_with_http_info(opts)
      data
    end

    # Provides aggregated compliance assessment metrics and rule status information, organized by asset type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL filter expression used to limit the results. Filter fields include: cid, cloud_info.cloud_account_id, cloud_info.cloud_provider, cloud_info.cloud_region, cloud_info.cluster_id, cloud_info.cluster_name, cloud_info.cluster_type, compliance_finding.asset_type, compliance_finding.framework_name, compliance_finding.framework_name_version, compliance_finding.framework_version, compliance_finding.severity
    # @return [Array<(DomainAPIAggregateResponseComplianceByAssetTypeV1, Integer, Hash)>] DomainAPIAggregateResponseComplianceByAssetTypeV1 data, response status code and response headers
    def aggregate_compliance_by_asset_type_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KubernetesContainerCompliance.aggregate_compliance_by_asset_type ...'
      end
      # resource path
      local_var_path = '/container-compliance/aggregates/compliance-by-asset-type/v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainAPIAggregateResponseComplianceByAssetTypeV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"KubernetesContainerCompliance.aggregate_compliance_by_asset_type",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KubernetesContainerCompliance#aggregate_compliance_by_asset_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Provides aggregated compliance assessment metrics and rule status information, organized by Kubernetes cluster type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL filter expression used to limit the results. Filter fields include: cid, cloud_info.cloud_account_id, cloud_info.cloud_provider, cloud_info.cloud_region, cloud_info.cluster_id, cloud_info.cluster_name, cloud_info.cluster_type, compliance_finding.asset_type, compliance_finding.framework_name, compliance_finding.framework_name_version, compliance_finding.framework_version, compliance_finding.severity
    # @return [DomainAPIAggregateResponseComplianceByClusterTypeV1]
    def aggregate_compliance_by_cluster_type(opts = {})
      data, _status_code, _headers = aggregate_compliance_by_cluster_type_with_http_info(opts)
      data
    end

    # Provides aggregated compliance assessment metrics and rule status information, organized by Kubernetes cluster type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL filter expression used to limit the results. Filter fields include: cid, cloud_info.cloud_account_id, cloud_info.cloud_provider, cloud_info.cloud_region, cloud_info.cluster_id, cloud_info.cluster_name, cloud_info.cluster_type, compliance_finding.asset_type, compliance_finding.framework_name, compliance_finding.framework_name_version, compliance_finding.framework_version, compliance_finding.severity
    # @return [Array<(DomainAPIAggregateResponseComplianceByClusterTypeV1, Integer, Hash)>] DomainAPIAggregateResponseComplianceByClusterTypeV1 data, response status code and response headers
    def aggregate_compliance_by_cluster_type_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KubernetesContainerCompliance.aggregate_compliance_by_cluster_type ...'
      end
      # resource path
      local_var_path = '/container-compliance/aggregates/compliance-by-cluster-type/v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainAPIAggregateResponseComplianceByClusterTypeV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"KubernetesContainerCompliance.aggregate_compliance_by_cluster_type",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KubernetesContainerCompliance#aggregate_compliance_by_cluster_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Provides aggregated compliance assessment metrics and rule status information, organized by compliance framework.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL filter expression used to limit the results. Filter fields include: cid, cloud_info.cloud_account_id, cloud_info.cloud_provider, cloud_info.cloud_region, cloud_info.cluster_id, cloud_info.cluster_name, cloud_info.cluster_type, compliance_finding.asset_type, compliance_finding.framework_name, compliance_finding.framework_name_version, compliance_finding.framework_version, compliance_finding.severity
    # @return [DomainAPIAggregateResponseComplianceByFrameworkV1]
    def aggregate_compliance_by_framework(opts = {})
      data, _status_code, _headers = aggregate_compliance_by_framework_with_http_info(opts)
      data
    end

    # Provides aggregated compliance assessment metrics and rule status information, organized by compliance framework.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL filter expression used to limit the results. Filter fields include: cid, cloud_info.cloud_account_id, cloud_info.cloud_provider, cloud_info.cloud_region, cloud_info.cluster_id, cloud_info.cluster_name, cloud_info.cluster_type, compliance_finding.asset_type, compliance_finding.framework_name, compliance_finding.framework_name_version, compliance_finding.framework_version, compliance_finding.severity
    # @return [Array<(DomainAPIAggregateResponseComplianceByFrameworkV1, Integer, Hash)>] DomainAPIAggregateResponseComplianceByFrameworkV1 data, response status code and response headers
    def aggregate_compliance_by_framework_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KubernetesContainerCompliance.aggregate_compliance_by_framework ...'
      end
      # resource path
      local_var_path = '/container-compliance/aggregates/compliance-by-framework/v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainAPIAggregateResponseComplianceByFrameworkV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"KubernetesContainerCompliance.aggregate_compliance_by_framework",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KubernetesContainerCompliance#aggregate_compliance_by_framework\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the most non-compliant clusters, ranked in descending order based on the number of failed compliance rules across severity levels (critical, high, medium, and low).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL filter expression used to limit the results. Filter fields include: cid, cloud_info.cloud_account_id, cloud_info.cloud_provider, cloud_info.cloud_region, cloud_info.cluster_id, cloud_info.cluster_name, cloud_info.cluster_type, compliance_finding.asset_type, compliance_finding.framework_name, compliance_finding.framework_name_version, compliance_finding.framework_version, compliance_finding.severity
    # @option opts [Integer] :limit The maximum number of records to return. (1-100) Default is 10.
    # @return [DomainAPIAggregateResponseFailedRulesByClustersTypeV2]
    def aggregate_failed_rules_by_clusters_v3(opts = {})
      data, _status_code, _headers = aggregate_failed_rules_by_clusters_v3_with_http_info(opts)
      data
    end

    # Retrieves the most non-compliant clusters, ranked in descending order based on the number of failed compliance rules across severity levels (critical, high, medium, and low).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL filter expression used to limit the results. Filter fields include: cid, cloud_info.cloud_account_id, cloud_info.cloud_provider, cloud_info.cloud_region, cloud_info.cluster_id, cloud_info.cluster_name, cloud_info.cluster_type, compliance_finding.asset_type, compliance_finding.framework_name, compliance_finding.framework_name_version, compliance_finding.framework_version, compliance_finding.severity
    # @option opts [Integer] :limit The maximum number of records to return. (1-100) Default is 10.
    # @return [Array<(DomainAPIAggregateResponseFailedRulesByClustersTypeV2, Integer, Hash)>] DomainAPIAggregateResponseFailedRulesByClustersTypeV2 data, response status code and response headers
    def aggregate_failed_rules_by_clusters_v3_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KubernetesContainerCompliance.aggregate_failed_rules_by_clusters_v3 ...'
      end
      # resource path
      local_var_path = '/container-compliance/aggregates/failed-rules-by-clusters/v3'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainAPIAggregateResponseFailedRulesByClustersTypeV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"KubernetesContainerCompliance.aggregate_failed_rules_by_clusters_v3",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KubernetesContainerCompliance#aggregate_failed_rules_by_clusters_v3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the most non-compliant container images, ranked in descending order based on the number of failed assessments across severity levels (critical, high, medium, and low).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL filter expression used to limit the results. Filter fields include: cid, cloud_info.cloud_account_id, cloud_info.cloud_provider, cloud_info.cloud_region, cloud_info.cluster_id, cloud_info.cluster_name, cloud_info.cluster_type, compliance_finding.asset_type, compliance_finding.framework_name, compliance_finding.framework_name_version, compliance_finding.framework_version, compliance_finding.severity
    # @option opts [Integer] :limit The maximum number of records to return. (1-100) Default is 10.
    # @return [DomainAPIAggregateResponseTopFailedImagesV1]
    def aggregate_top_failed_images(opts = {})
      data, _status_code, _headers = aggregate_top_failed_images_with_http_info(opts)
      data
    end

    # Retrieves the most non-compliant container images, ranked in descending order based on the number of failed assessments across severity levels (critical, high, medium, and low).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL filter expression used to limit the results. Filter fields include: cid, cloud_info.cloud_account_id, cloud_info.cloud_provider, cloud_info.cloud_region, cloud_info.cluster_id, cloud_info.cluster_name, cloud_info.cluster_type, compliance_finding.asset_type, compliance_finding.framework_name, compliance_finding.framework_name_version, compliance_finding.framework_version, compliance_finding.severity
    # @option opts [Integer] :limit The maximum number of records to return. (1-100) Default is 10.
    # @return [Array<(DomainAPIAggregateResponseTopFailedImagesV1, Integer, Hash)>] DomainAPIAggregateResponseTopFailedImagesV1 data, response status code and response headers
    def aggregate_top_failed_images_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KubernetesContainerCompliance.aggregate_top_failed_images ...'
      end
      # resource path
      local_var_path = '/container-compliance/aggregates/top-failed-images/v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainAPIAggregateResponseTopFailedImagesV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"KubernetesContainerCompliance.aggregate_top_failed_images",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KubernetesContainerCompliance#aggregate_top_failed_images\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns detailed compliance assessment results for container images, providing the information needed to identify compliance violations.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL filter expression used to limit the results. Filter fields include: cid, cloud_info.cloud_account_id, cloud_info.cloud_provider, cloud_info.cloud_region, cloud_info.cluster_id, cloud_info.cluster_name, cloud_info.cluster_type, cloud_info.namespace, compliance_finding.asset_uid, compliance_finding.framework_name, compliance_finding.framework_name_version, compliance_finding.framework_version, compliance_finding.id, compliance_finding.severity, compliance_finding.status, image_digest, image_id, image_registry, image_repository, image_tag
    # @option opts [String] :after A pagination token used with the &#x60;limit&#x60; parameter to manage pagination of results. On your first request, don&#39;t provide an &#x60;after&#x60; token. On subsequent requests, provide the &#x60;after&#x60; token from the previous response to continue from that place in the results.
    # @option opts [Integer] :limit The maximum number of images for which assessments are to be returned: 1-100. Default is 100. Use with the after parameter to manage pagination of results.
    # @return [DomainAPIResponseImagesFindingsV1]
    def combined_images_findings(opts = {})
      data, _status_code, _headers = combined_images_findings_with_http_info(opts)
      data
    end

    # Returns detailed compliance assessment results for container images, providing the information needed to identify compliance violations.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL filter expression used to limit the results. Filter fields include: cid, cloud_info.cloud_account_id, cloud_info.cloud_provider, cloud_info.cloud_region, cloud_info.cluster_id, cloud_info.cluster_name, cloud_info.cluster_type, cloud_info.namespace, compliance_finding.asset_uid, compliance_finding.framework_name, compliance_finding.framework_name_version, compliance_finding.framework_version, compliance_finding.id, compliance_finding.severity, compliance_finding.status, image_digest, image_id, image_registry, image_repository, image_tag
    # @option opts [String] :after A pagination token used with the &#x60;limit&#x60; parameter to manage pagination of results. On your first request, don&#39;t provide an &#x60;after&#x60; token. On subsequent requests, provide the &#x60;after&#x60; token from the previous response to continue from that place in the results.
    # @option opts [Integer] :limit The maximum number of images for which assessments are to be returned: 1-100. Default is 100. Use with the after parameter to manage pagination of results.
    # @return [Array<(DomainAPIResponseImagesFindingsV1, Integer, Hash)>] DomainAPIResponseImagesFindingsV1 data, response status code and response headers
    def combined_images_findings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KubernetesContainerCompliance.combined_images_findings ...'
      end
      # resource path
      local_var_path = '/container-compliance/combined/findings-by-images/v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainAPIResponseImagesFindingsV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"KubernetesContainerCompliance.combined_images_findings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KubernetesContainerCompliance#combined_images_findings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns detailed compliance assessment results for kubernetes nodes, providing the information needed to identify compliance violations.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL filter expression used to limit the results. Filter fields include: cid, cloud_info.cloud_account_id, cloud_info.cloud_provider, cloud_info.cloud_region, cloud_info.cluster_id, cloud_info.cluster_name, cloud_info.cluster_type, compliance_finding.asset_type, compliance_finding.asset_uid, compliance_finding.framework_name, compliance_finding.framework_name_version, compliance_finding.framework_version, compliance_finding.id, compliance_finding.severity, compliance_finding.status, aid, node_id, node_name, node_type
    # @option opts [String] :after A pagination token used with the &#x60;limit&#x60; parameter to manage pagination of results. On your first request, don&#39;t provide an &#x60;after&#x60; token. On subsequent requests, provide the &#x60;after&#x60; token from the previous response to continue from that place in the results.
    # @option opts [Integer] :limit The maximum number of nodes for which assessments are to be returned: 1-100. Default is 100. Use with the after parameter to manage pagination of results.
    # @return [DomainAPIResponseNodesFindingsV1]
    def combined_nodes_findings(opts = {})
      data, _status_code, _headers = combined_nodes_findings_with_http_info(opts)
      data
    end

    # Returns detailed compliance assessment results for kubernetes nodes, providing the information needed to identify compliance violations.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL filter expression used to limit the results. Filter fields include: cid, cloud_info.cloud_account_id, cloud_info.cloud_provider, cloud_info.cloud_region, cloud_info.cluster_id, cloud_info.cluster_name, cloud_info.cluster_type, compliance_finding.asset_type, compliance_finding.asset_uid, compliance_finding.framework_name, compliance_finding.framework_name_version, compliance_finding.framework_version, compliance_finding.id, compliance_finding.severity, compliance_finding.status, aid, node_id, node_name, node_type
    # @option opts [String] :after A pagination token used with the &#x60;limit&#x60; parameter to manage pagination of results. On your first request, don&#39;t provide an &#x60;after&#x60; token. On subsequent requests, provide the &#x60;after&#x60; token from the previous response to continue from that place in the results.
    # @option opts [Integer] :limit The maximum number of nodes for which assessments are to be returned: 1-100. Default is 100. Use with the after parameter to manage pagination of results.
    # @return [Array<(DomainAPIResponseNodesFindingsV1, Integer, Hash)>] DomainAPIResponseNodesFindingsV1 data, response status code and response headers
    def combined_nodes_findings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KubernetesContainerCompliance.combined_nodes_findings ...'
      end
      # resource path
      local_var_path = '/container-compliance/combined/findings-by-nodes/v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainAPIResponseNodesFindingsV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"KubernetesContainerCompliance.combined_nodes_findings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KubernetesContainerCompliance#combined_nodes_findings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
