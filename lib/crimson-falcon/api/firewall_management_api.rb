=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <https://unlicense.org>

CrowdStrike Swagger API Version: 2023-05-30T23:10:32Z

=end

require 'cgi'

module Falcon
  class FirewallManagementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Aggregate events for customer
    # @param body [Array<FwmgrMsaAggregateQueryRequest>] Query criteria and settings
    # @param [Hash] opts the optional parameters
    # @return [FwmgrApiAggregatesResponse]
    def aggregate_events(body, opts = {})
      data, _status_code, _headers = aggregate_events_with_http_info(body, opts)
      data
    end

    # Aggregate events for customer
    # @param body [Array<FwmgrMsaAggregateQueryRequest>] Query criteria and settings
    # @param [Hash] opts the optional parameters
    # @return [Array<(FwmgrApiAggregatesResponse, Integer, Hash)>] FwmgrApiAggregatesResponse data, response status code and response headers
    def aggregate_events_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.aggregate_events ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FirewallManagementApi.aggregate_events"
      end
      # resource path
      local_var_path = '/fwmgr/aggregates/events/GET/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrApiAggregatesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.aggregate_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#aggregate_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Aggregate rules within a policy for customer
    # @param body [Array<FwmgrMsaAggregateQueryRequest>] Query criteria and settings
    # @param [Hash] opts the optional parameters
    # @return [FwmgrApiAggregatesResponse]
    def aggregate_policy_rules(body, opts = {})
      data, _status_code, _headers = aggregate_policy_rules_with_http_info(body, opts)
      data
    end

    # Aggregate rules within a policy for customer
    # @param body [Array<FwmgrMsaAggregateQueryRequest>] Query criteria and settings
    # @param [Hash] opts the optional parameters
    # @return [Array<(FwmgrApiAggregatesResponse, Integer, Hash)>] FwmgrApiAggregatesResponse data, response status code and response headers
    def aggregate_policy_rules_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.aggregate_policy_rules ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FirewallManagementApi.aggregate_policy_rules"
      end
      # resource path
      local_var_path = '/fwmgr/aggregates/policy-rules/GET/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrApiAggregatesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.aggregate_policy_rules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#aggregate_policy_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Aggregate rule groups for customer
    # @param body [Array<FwmgrMsaAggregateQueryRequest>] Query criteria and settings
    # @param [Hash] opts the optional parameters
    # @return [FwmgrApiAggregatesResponse]
    def aggregate_rule_groups(body, opts = {})
      data, _status_code, _headers = aggregate_rule_groups_with_http_info(body, opts)
      data
    end

    # Aggregate rule groups for customer
    # @param body [Array<FwmgrMsaAggregateQueryRequest>] Query criteria and settings
    # @param [Hash] opts the optional parameters
    # @return [Array<(FwmgrApiAggregatesResponse, Integer, Hash)>] FwmgrApiAggregatesResponse data, response status code and response headers
    def aggregate_rule_groups_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.aggregate_rule_groups ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FirewallManagementApi.aggregate_rule_groups"
      end
      # resource path
      local_var_path = '/fwmgr/aggregates/rule-groups/GET/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrApiAggregatesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.aggregate_rule_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#aggregate_rule_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Aggregate rules for customer
    # @param body [Array<FwmgrMsaAggregateQueryRequest>] Query criteria and settings
    # @param [Hash] opts the optional parameters
    # @return [FwmgrApiAggregatesResponse]
    def aggregate_rules(body, opts = {})
      data, _status_code, _headers = aggregate_rules_with_http_info(body, opts)
      data
    end

    # Aggregate rules for customer
    # @param body [Array<FwmgrMsaAggregateQueryRequest>] Query criteria and settings
    # @param [Hash] opts the optional parameters
    # @return [Array<(FwmgrApiAggregatesResponse, Integer, Hash)>] FwmgrApiAggregatesResponse data, response status code and response headers
    def aggregate_rules_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.aggregate_rules ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FirewallManagementApi.aggregate_rules"
      end
      # resource path
      local_var_path = '/fwmgr/aggregates/rules/GET/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrApiAggregatesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.aggregate_rules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#aggregate_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create new network locations provided, and return the ID.
    # @param body [FwmgrApiNetworkLocationCreateRequestV1] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clone_id A network location ID from which to copy location. If this is provided then the body of the request is ignored.
    # @option opts [Boolean] :add_fw_rules A boolean to determine whether the cloned location needs to be added to the same firewall rules that original location is added to.
    # @option opts [String] :comment Audit log comment for this action
    # @return [FwmgrApiNetworkLocationsResponse]
    def create_network_locations(body, opts = {})
      data, _status_code, _headers = create_network_locations_with_http_info(body, opts)
      data
    end

    # Create new network locations provided, and return the ID.
    # @param body [FwmgrApiNetworkLocationCreateRequestV1] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clone_id A network location ID from which to copy location. If this is provided then the body of the request is ignored.
    # @option opts [Boolean] :add_fw_rules A boolean to determine whether the cloned location needs to be added to the same firewall rules that original location is added to.
    # @option opts [String] :comment Audit log comment for this action
    # @return [Array<(FwmgrApiNetworkLocationsResponse, Integer, Hash)>] FwmgrApiNetworkLocationsResponse data, response status code and response headers
    def create_network_locations_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.create_network_locations ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FirewallManagementApi.create_network_locations"
      end
      # resource path
      local_var_path = '/fwmgr/entities/network-locations/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'clone_id'] = opts[:'clone_id'] if !opts[:'clone_id'].nil?
      query_params[:'add_fw_rules'] = opts[:'add_fw_rules'] if !opts[:'add_fw_rules'].nil?
      query_params[:'comment'] = opts[:'comment'] if !opts[:'comment'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrApiNetworkLocationsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.create_network_locations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#create_network_locations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create new rule group on a platform for a customer with a name and description, and return the ID
    # @param body [FwmgrApiRuleGroupCreateRequestV1] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clone_id A rule group ID from which to copy rules. If this is provided then the &#39;rules&#39; property of the body is ignored.
    # @option opts [String] :library If this flag is set to true then the rules will be cloned from the clone_id from the CrowdStrike Firewal Rule Groups Library.
    # @option opts [String] :comment Audit log comment for this action
    # @return [FwmgrApiQueryResponse]
    def create_rule_group(body, opts = {})
      data, _status_code, _headers = create_rule_group_with_http_info(body, opts)
      data
    end

    # Create new rule group on a platform for a customer with a name and description, and return the ID
    # @param body [FwmgrApiRuleGroupCreateRequestV1] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clone_id A rule group ID from which to copy rules. If this is provided then the &#39;rules&#39; property of the body is ignored.
    # @option opts [String] :library If this flag is set to true then the rules will be cloned from the clone_id from the CrowdStrike Firewal Rule Groups Library.
    # @option opts [String] :comment Audit log comment for this action
    # @return [Array<(FwmgrApiQueryResponse, Integer, Hash)>] FwmgrApiQueryResponse data, response status code and response headers
    def create_rule_group_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.create_rule_group ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FirewallManagementApi.create_rule_group"
      end
      # resource path
      local_var_path = '/fwmgr/entities/rule-groups/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'clone_id'] = opts[:'clone_id'] if !opts[:'clone_id'].nil?
      query_params[:'library'] = opts[:'library'] if !opts[:'library'].nil?
      query_params[:'comment'] = opts[:'comment'] if !opts[:'comment'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrApiQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.create_rule_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#create_rule_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validates the request of creating a new rule group on a platform for a customer with a name and description
    # @param body [FwmgrApiRuleGroupCreateRequestV1] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clone_id A rule group ID from which to copy rules. If this is provided then the &#39;rules&#39; property of the body is ignored.
    # @option opts [String] :library If this flag is set to true then the rules will be cloned from the clone_id from the CrowdStrike Firewall Rule Groups Library.
    # @option opts [String] :comment Audit log comment for this action
    # @return [FwmgrMsaspecQueryResponse]
    def create_rule_group_validation(body, opts = {})
      data, _status_code, _headers = create_rule_group_validation_with_http_info(body, opts)
      data
    end

    # Validates the request of creating a new rule group on a platform for a customer with a name and description
    # @param body [FwmgrApiRuleGroupCreateRequestV1] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :clone_id A rule group ID from which to copy rules. If this is provided then the &#39;rules&#39; property of the body is ignored.
    # @option opts [String] :library If this flag is set to true then the rules will be cloned from the clone_id from the CrowdStrike Firewall Rule Groups Library.
    # @option opts [String] :comment Audit log comment for this action
    # @return [Array<(FwmgrMsaspecQueryResponse, Integer, Hash)>] FwmgrMsaspecQueryResponse data, response status code and response headers
    def create_rule_group_validation_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.create_rule_group_validation ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FirewallManagementApi.create_rule_group_validation"
      end
      # resource path
      local_var_path = '/fwmgr/entities/rule-groups/validation/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'clone_id'] = opts[:'clone_id'] if !opts[:'clone_id'].nil?
      query_params[:'library'] = opts[:'library'] if !opts[:'library'].nil?
      query_params[:'comment'] = opts[:'comment'] if !opts[:'comment'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrMsaspecQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.create_rule_group_validation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#create_rule_group_validation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete network location entities by ID.
    # @param ids [Array<String>] The IDs of the network locations to be deleted
    # @param [Hash] opts the optional parameters
    # @return [FwmgrMsaspecQueryResponse]
    def delete_network_locations(ids, opts = {})
      data, _status_code, _headers = delete_network_locations_with_http_info(ids, opts)
      data
    end

    # Delete network location entities by ID.
    # @param ids [Array<String>] The IDs of the network locations to be deleted
    # @param [Hash] opts the optional parameters
    # @return [Array<(FwmgrMsaspecQueryResponse, Integer, Hash)>] FwmgrMsaspecQueryResponse data, response status code and response headers
    def delete_network_locations_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.delete_network_locations ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling FirewallManagementApi.delete_network_locations"
      end
      # resource path
      local_var_path = '/fwmgr/entities/network-locations/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrMsaspecQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.delete_network_locations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#delete_network_locations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete rule group entities by ID
    # @param ids [Array<String>] The IDs of the rule groups to be deleted
    # @param [Hash] opts the optional parameters
    # @option opts [String] :comment Audit log comment for this action
    # @return [FwmgrApiQueryResponse]
    def delete_rule_groups(ids, opts = {})
      data, _status_code, _headers = delete_rule_groups_with_http_info(ids, opts)
      data
    end

    # Delete rule group entities by ID
    # @param ids [Array<String>] The IDs of the rule groups to be deleted
    # @param [Hash] opts the optional parameters
    # @option opts [String] :comment Audit log comment for this action
    # @return [Array<(FwmgrApiQueryResponse, Integer, Hash)>] FwmgrApiQueryResponse data, response status code and response headers
    def delete_rule_groups_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.delete_rule_groups ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling FirewallManagementApi.delete_rule_groups"
      end
      # resource path
      local_var_path = '/fwmgr/entities/rule-groups/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)
      query_params[:'comment'] = opts[:'comment'] if !opts[:'comment'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrApiQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.delete_rule_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#delete_rule_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get events entities by ID and optionally version
    # @param ids [Array<String>] The events to retrieve, identified by ID
    # @param [Hash] opts the optional parameters
    # @return [FwmgrApiEventsResponse]
    def get_events(ids, opts = {})
      data, _status_code, _headers = get_events_with_http_info(ids, opts)
      data
    end

    # Get events entities by ID and optionally version
    # @param ids [Array<String>] The events to retrieve, identified by ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(FwmgrApiEventsResponse, Integer, Hash)>] FwmgrApiEventsResponse data, response status code and response headers
    def get_events_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.get_events ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling FirewallManagementApi.get_events"
      end
      # resource path
      local_var_path = '/fwmgr/entities/events/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrApiEventsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.get_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#get_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the firewall field specifications by ID
    # @param ids [Array<String>] The IDs of the rule types to retrieve
    # @param [Hash] opts the optional parameters
    # @return [FwmgrApiFirewallFieldsResponse]
    def get_firewall_fields(ids, opts = {})
      data, _status_code, _headers = get_firewall_fields_with_http_info(ids, opts)
      data
    end

    # Get the firewall field specifications by ID
    # @param ids [Array<String>] The IDs of the rule types to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(FwmgrApiFirewallFieldsResponse, Integer, Hash)>] FwmgrApiFirewallFieldsResponse data, response status code and response headers
    def get_firewall_fields_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.get_firewall_fields ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling FirewallManagementApi.get_firewall_fields"
      end
      # resource path
      local_var_path = '/fwmgr/entities/firewall-fields/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrApiFirewallFieldsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.get_firewall_fields",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#get_firewall_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a summary of network locations entities by ID
    # This endpoint returns a summary of network locations that includes name, description, enabled/disabled status, a count of associated rules etc
    # @param ids [Array<String>] The events to retrieve, identified by ID
    # @param [Hash] opts the optional parameters
    # @return [FwmgrApiNetworkLocationSummariesResponse]
    def get_network_locations(ids, opts = {})
      data, _status_code, _headers = get_network_locations_with_http_info(ids, opts)
      data
    end

    # Get a summary of network locations entities by ID
    # This endpoint returns a summary of network locations that includes name, description, enabled/disabled status, a count of associated rules etc
    # @param ids [Array<String>] The events to retrieve, identified by ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(FwmgrApiNetworkLocationSummariesResponse, Integer, Hash)>] FwmgrApiNetworkLocationSummariesResponse data, response status code and response headers
    def get_network_locations_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.get_network_locations ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling FirewallManagementApi.get_network_locations"
      end
      # resource path
      local_var_path = '/fwmgr/entities/network-locations/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrApiNetworkLocationSummariesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.get_network_locations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#get_network_locations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get network locations entities by ID
    # This endpoint returns the complete network locations objects that includes all the network location conditions.
    # @param ids [Array<String>] The events to retrieve, identified by ID
    # @param [Hash] opts the optional parameters
    # @return [FwmgrApiNetworkLocationsResponse]
    def get_network_locations_details(ids, opts = {})
      data, _status_code, _headers = get_network_locations_details_with_http_info(ids, opts)
      data
    end

    # Get network locations entities by ID
    # This endpoint returns the complete network locations objects that includes all the network location conditions.
    # @param ids [Array<String>] The events to retrieve, identified by ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(FwmgrApiNetworkLocationsResponse, Integer, Hash)>] FwmgrApiNetworkLocationsResponse data, response status code and response headers
    def get_network_locations_details_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.get_network_locations_details ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling FirewallManagementApi.get_network_locations_details"
      end
      # resource path
      local_var_path = '/fwmgr/entities/network-locations-details/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrApiNetworkLocationsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.get_network_locations_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#get_network_locations_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get platforms by ID, e.g., windows or mac or droid
    # @param ids [Array<String>] The IDs of the platforms to retrieve
    # @param [Hash] opts the optional parameters
    # @return [FwmgrApiPlatformsResponse]
    def get_platforms(ids, opts = {})
      data, _status_code, _headers = get_platforms_with_http_info(ids, opts)
      data
    end

    # Get platforms by ID, e.g., windows or mac or droid
    # @param ids [Array<String>] The IDs of the platforms to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(FwmgrApiPlatformsResponse, Integer, Hash)>] FwmgrApiPlatformsResponse data, response status code and response headers
    def get_platforms_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.get_platforms ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling FirewallManagementApi.get_platforms"
      end
      # resource path
      local_var_path = '/fwmgr/entities/platforms/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrApiPlatformsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.get_platforms",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#get_platforms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get policy container entities by policy ID
    # @param ids [Array<String>] The policy container(s) to retrieve, identified by policy ID
    # @param [Hash] opts the optional parameters
    # @return [FwmgrApiPolicyContainersResponse]
    def get_policy_containers(ids, opts = {})
      data, _status_code, _headers = get_policy_containers_with_http_info(ids, opts)
      data
    end

    # Get policy container entities by policy ID
    # @param ids [Array<String>] The policy container(s) to retrieve, identified by policy ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(FwmgrApiPolicyContainersResponse, Integer, Hash)>] FwmgrApiPolicyContainersResponse data, response status code and response headers
    def get_policy_containers_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.get_policy_containers ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling FirewallManagementApi.get_policy_containers"
      end
      # resource path
      local_var_path = '/fwmgr/entities/policies/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrApiPolicyContainersResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.get_policy_containers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#get_policy_containers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get rule group entities by ID. These groups do not contain their rule entites, just the rule IDs in precedence order.
    # @param ids [Array<String>] The IDs of the rule groups to retrieve
    # @param [Hash] opts the optional parameters
    # @return [FwmgrApiRuleGroupsResponse]
    def get_rule_groups(ids, opts = {})
      data, _status_code, _headers = get_rule_groups_with_http_info(ids, opts)
      data
    end

    # Get rule group entities by ID. These groups do not contain their rule entites, just the rule IDs in precedence order.
    # @param ids [Array<String>] The IDs of the rule groups to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(FwmgrApiRuleGroupsResponse, Integer, Hash)>] FwmgrApiRuleGroupsResponse data, response status code and response headers
    def get_rule_groups_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.get_rule_groups ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling FirewallManagementApi.get_rule_groups"
      end
      # resource path
      local_var_path = '/fwmgr/entities/rule-groups/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrApiRuleGroupsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.get_rule_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#get_rule_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get rule entities by ID (64-bit unsigned int as decimal string) or Family ID (32-character hexadecimal string)
    # @param ids [Array<String>] The rules to retrieve, identified by ID
    # @param [Hash] opts the optional parameters
    # @return [FwmgrApiRulesResponse]
    def get_rules(ids, opts = {})
      data, _status_code, _headers = get_rules_with_http_info(ids, opts)
      data
    end

    # Get rule entities by ID (64-bit unsigned int as decimal string) or Family ID (32-character hexadecimal string)
    # @param ids [Array<String>] The rules to retrieve, identified by ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(FwmgrApiRulesResponse, Integer, Hash)>] FwmgrApiRulesResponse data, response status code and response headers
    def get_rules_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.get_rules ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling FirewallManagementApi.get_rules"
      end
      # resource path
      local_var_path = '/fwmgr/entities/rules/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrApiRulesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.get_rules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#get_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find all event IDs matching the query with filter
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort Possible order by fields: 
    # @option opts [String] :filter FQL query specifying the filter parameters. Filter term criteria: enabled, platform, name, description, etc TODO. Filter range criteria: created_on, modified_on; use any common date format, such as &#39;2010-05-15T14:55:21.892315096Z&#39;.
    # @option opts [String] :q Match query criteria, which includes all the filter string fields, plus TODO
    # @option opts [String] :offset Starting index of overall result set from which to return ids.
    # @option opts [String] :after A pagination token used with the &#x60;limit&#x60; parameter to manage pagination of results. On your first request, don&#39;t provide an &#x60;after&#x60; token. On subsequent requests, provide the &#x60;after&#x60; token from the previous response to continue from that place in the results.
    # @option opts [Integer] :limit Number of ids to return.
    # @return [FwmgrApiQueryResponse]
    def query_events(opts = {})
      data, _status_code, _headers = query_events_with_http_info(opts)
      data
    end

    # Find all event IDs matching the query with filter
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort Possible order by fields: 
    # @option opts [String] :filter FQL query specifying the filter parameters. Filter term criteria: enabled, platform, name, description, etc TODO. Filter range criteria: created_on, modified_on; use any common date format, such as &#39;2010-05-15T14:55:21.892315096Z&#39;.
    # @option opts [String] :q Match query criteria, which includes all the filter string fields, plus TODO
    # @option opts [String] :offset Starting index of overall result set from which to return ids.
    # @option opts [String] :after A pagination token used with the &#x60;limit&#x60; parameter to manage pagination of results. On your first request, don&#39;t provide an &#x60;after&#x60; token. On subsequent requests, provide the &#x60;after&#x60; token from the previous response to continue from that place in the results.
    # @option opts [Integer] :limit Number of ids to return.
    # @return [Array<(FwmgrApiQueryResponse, Integer, Hash)>] FwmgrApiQueryResponse data, response status code and response headers
    def query_events_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.query_events ...'
      end
      # resource path
      local_var_path = '/fwmgr/queries/events/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrApiQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.query_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#query_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the firewall field specification IDs for the provided platform
    # @param [Hash] opts the optional parameters
    # @option opts [String] :platform_id Get fields configuration for this platform
    # @option opts [String] :offset Starting index of overall result set from which to return ids.
    # @option opts [Integer] :limit Number of ids to return.
    # @return [FwmgrMsaspecQueryResponse]
    def query_firewall_fields(opts = {})
      data, _status_code, _headers = query_firewall_fields_with_http_info(opts)
      data
    end

    # Get the firewall field specification IDs for the provided platform
    # @param [Hash] opts the optional parameters
    # @option opts [String] :platform_id Get fields configuration for this platform
    # @option opts [String] :offset Starting index of overall result set from which to return ids.
    # @option opts [Integer] :limit Number of ids to return.
    # @return [Array<(FwmgrMsaspecQueryResponse, Integer, Hash)>] FwmgrMsaspecQueryResponse data, response status code and response headers
    def query_firewall_fields_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.query_firewall_fields ...'
      end
      # resource path
      local_var_path = '/fwmgr/queries/firewall-fields/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'platform_id'] = opts[:'platform_id'] if !opts[:'platform_id'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrMsaspecQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.query_firewall_fields",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#query_firewall_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of network location IDs
    # This endpoint returns a list of network location IDs based of query parameter.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort Possible order by fields: 
    # @option opts [String] :filter FQL query specifying the filter parameters. Filter term criteria: name
    # @option opts [String] :q Match query criteria, which includes all the filter string fields
    # @option opts [String] :offset Starting index of overall result set from which to return ids.
    # @option opts [String] :after A pagination token used with the &#x60;limit&#x60; parameter to manage pagination of results. On your first request, don&#39;t provide an &#x60;after&#x60; token. On subsequent requests, provide the &#x60;after&#x60; token from the previous response to continue from that place in the results.
    # @option opts [Integer] :limit Number of ids to return.
    # @return [FwmgrApiQueryResponse]
    def query_network_locations(opts = {})
      data, _status_code, _headers = query_network_locations_with_http_info(opts)
      data
    end

    # Get a list of network location IDs
    # This endpoint returns a list of network location IDs based of query parameter.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort Possible order by fields: 
    # @option opts [String] :filter FQL query specifying the filter parameters. Filter term criteria: name
    # @option opts [String] :q Match query criteria, which includes all the filter string fields
    # @option opts [String] :offset Starting index of overall result set from which to return ids.
    # @option opts [String] :after A pagination token used with the &#x60;limit&#x60; parameter to manage pagination of results. On your first request, don&#39;t provide an &#x60;after&#x60; token. On subsequent requests, provide the &#x60;after&#x60; token from the previous response to continue from that place in the results.
    # @option opts [Integer] :limit Number of ids to return.
    # @return [Array<(FwmgrApiQueryResponse, Integer, Hash)>] FwmgrApiQueryResponse data, response status code and response headers
    def query_network_locations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.query_network_locations ...'
      end
      # resource path
      local_var_path = '/fwmgr/queries/network-locations/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrApiQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.query_network_locations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#query_network_locations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of platform names
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset Starting index of overall result set from which to return ids.
    # @option opts [Integer] :limit Number of ids to return.
    # @return [FwmgrMsaspecQueryResponse]
    def query_platforms(opts = {})
      data, _status_code, _headers = query_platforms_with_http_info(opts)
      data
    end

    # Get the list of platform names
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset Starting index of overall result set from which to return ids.
    # @option opts [Integer] :limit Number of ids to return.
    # @return [Array<(FwmgrMsaspecQueryResponse, Integer, Hash)>] FwmgrMsaspecQueryResponse data, response status code and response headers
    def query_platforms_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.query_platforms ...'
      end
      # resource path
      local_var_path = '/fwmgr/queries/platforms/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrMsaspecQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.query_platforms",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#query_platforms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find all firewall rule IDs matching the query with filter, and return them in precedence order
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The ID of the policy container within which to query
    # @option opts [String] :sort Possible order by fields: 
    # @option opts [String] :filter FQL query specifying the filter parameters. Filter term criteria: enabled, platform, name, description, etc TODO. Filter range criteria: created_on, modified_on; use any common date format, such as &#39;2010-05-15T14:55:21.892315096Z&#39;.
    # @option opts [String] :q Match query criteria, which includes all the filter string fields, plus TODO
    # @option opts [String] :offset Starting index of overall result set from which to return ids.
    # @option opts [Integer] :limit Number of ids to return.
    # @return [FwmgrApiQueryResponse]
    def query_policy_rules(opts = {})
      data, _status_code, _headers = query_policy_rules_with_http_info(opts)
      data
    end

    # Find all firewall rule IDs matching the query with filter, and return them in precedence order
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The ID of the policy container within which to query
    # @option opts [String] :sort Possible order by fields: 
    # @option opts [String] :filter FQL query specifying the filter parameters. Filter term criteria: enabled, platform, name, description, etc TODO. Filter range criteria: created_on, modified_on; use any common date format, such as &#39;2010-05-15T14:55:21.892315096Z&#39;.
    # @option opts [String] :q Match query criteria, which includes all the filter string fields, plus TODO
    # @option opts [String] :offset Starting index of overall result set from which to return ids.
    # @option opts [Integer] :limit Number of ids to return.
    # @return [Array<(FwmgrApiQueryResponse, Integer, Hash)>] FwmgrApiQueryResponse data, response status code and response headers
    def query_policy_rules_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.query_policy_rules ...'
      end
      # resource path
      local_var_path = '/fwmgr/queries/policy-rules/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrApiQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.query_policy_rules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#query_policy_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find all rule group IDs matching the query with filter
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort Possible order by fields: 
    # @option opts [String] :filter FQL query specifying the filter parameters. Filter term criteria: enabled, platform, name, description, etc TODO. Filter range criteria: created_on, modified_on; use any common date format, such as &#39;2010-05-15T14:55:21.892315096Z&#39;.
    # @option opts [String] :q Match query criteria, which includes all the filter string fields, plus TODO
    # @option opts [String] :offset Starting index of overall result set from which to return ids.
    # @option opts [String] :after A pagination token used with the &#x60;limit&#x60; parameter to manage pagination of results. On your first request, don&#39;t provide an &#x60;after&#x60; token. On subsequent requests, provide the &#x60;after&#x60; token from the previous response to continue from that place in the results.
    # @option opts [Integer] :limit Number of ids to return.
    # @return [FwmgrApiQueryResponse]
    def query_rule_groups(opts = {})
      data, _status_code, _headers = query_rule_groups_with_http_info(opts)
      data
    end

    # Find all rule group IDs matching the query with filter
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort Possible order by fields: 
    # @option opts [String] :filter FQL query specifying the filter parameters. Filter term criteria: enabled, platform, name, description, etc TODO. Filter range criteria: created_on, modified_on; use any common date format, such as &#39;2010-05-15T14:55:21.892315096Z&#39;.
    # @option opts [String] :q Match query criteria, which includes all the filter string fields, plus TODO
    # @option opts [String] :offset Starting index of overall result set from which to return ids.
    # @option opts [String] :after A pagination token used with the &#x60;limit&#x60; parameter to manage pagination of results. On your first request, don&#39;t provide an &#x60;after&#x60; token. On subsequent requests, provide the &#x60;after&#x60; token from the previous response to continue from that place in the results.
    # @option opts [Integer] :limit Number of ids to return.
    # @return [Array<(FwmgrApiQueryResponse, Integer, Hash)>] FwmgrApiQueryResponse data, response status code and response headers
    def query_rule_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.query_rule_groups ...'
      end
      # resource path
      local_var_path = '/fwmgr/queries/rule-groups/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrApiQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.query_rule_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#query_rule_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find all rule IDs matching the query with filter
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort Possible order by fields: 
    # @option opts [String] :filter FQL query specifying the filter parameters. Filter term criteria: enabled, platform, name, description, etc TODO. Filter range criteria: created_on, modified_on; use any common date format, such as &#39;2010-05-15T14:55:21.892315096Z&#39;.
    # @option opts [String] :q Match query criteria, which includes all the filter string fields, plus TODO
    # @option opts [String] :offset Starting index of overall result set from which to return ids.
    # @option opts [String] :after A pagination token used with the &#x60;limit&#x60; parameter to manage pagination of results. On your first request, don&#39;t provide an &#x60;after&#x60; token. On subsequent requests, provide the &#x60;after&#x60; token from the previous response to continue from that place in the results.
    # @option opts [Integer] :limit Number of ids to return.
    # @return [FwmgrApiQueryResponse]
    def query_rules(opts = {})
      data, _status_code, _headers = query_rules_with_http_info(opts)
      data
    end

    # Find all rule IDs matching the query with filter
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort Possible order by fields: 
    # @option opts [String] :filter FQL query specifying the filter parameters. Filter term criteria: enabled, platform, name, description, etc TODO. Filter range criteria: created_on, modified_on; use any common date format, such as &#39;2010-05-15T14:55:21.892315096Z&#39;.
    # @option opts [String] :q Match query criteria, which includes all the filter string fields, plus TODO
    # @option opts [String] :offset Starting index of overall result set from which to return ids.
    # @option opts [String] :after A pagination token used with the &#x60;limit&#x60; parameter to manage pagination of results. On your first request, don&#39;t provide an &#x60;after&#x60; token. On subsequent requests, provide the &#x60;after&#x60; token from the previous response to continue from that place in the results.
    # @option opts [Integer] :limit Number of ids to return.
    # @return [Array<(FwmgrApiQueryResponse, Integer, Hash)>] FwmgrApiQueryResponse data, response status code and response headers
    def query_rules_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.query_rules ...'
      end
      # resource path
      local_var_path = '/fwmgr/queries/rules/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrApiQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.query_rules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#query_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates the network locations provided, and return the ID.
    # @param body [FwmgrApiNetworkLocationModifyRequestV1] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :comment Audit log comment for this action
    # @return [FwmgrMsaspecQueryResponse]
    def update_network_locations(body, opts = {})
      data, _status_code, _headers = update_network_locations_with_http_info(body, opts)
      data
    end

    # Updates the network locations provided, and return the ID.
    # @param body [FwmgrApiNetworkLocationModifyRequestV1] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :comment Audit log comment for this action
    # @return [Array<(FwmgrMsaspecQueryResponse, Integer, Hash)>] FwmgrMsaspecQueryResponse data, response status code and response headers
    def update_network_locations_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.update_network_locations ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FirewallManagementApi.update_network_locations"
      end
      # resource path
      local_var_path = '/fwmgr/entities/network-locations/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'comment'] = opts[:'comment'] if !opts[:'comment'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrMsaspecQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.update_network_locations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#update_network_locations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates the network locations metadata such as polling_intervals for the cid
    # @param body [FwmgrApiNetworkLocationModifyMetadataRequestV1] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :comment Audit log comment for this action
    # @return [FwmgrMsaspecQueryResponse]
    def update_network_locations_metadata(body, opts = {})
      data, _status_code, _headers = update_network_locations_metadata_with_http_info(body, opts)
      data
    end

    # Updates the network locations metadata such as polling_intervals for the cid
    # @param body [FwmgrApiNetworkLocationModifyMetadataRequestV1] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :comment Audit log comment for this action
    # @return [Array<(FwmgrMsaspecQueryResponse, Integer, Hash)>] FwmgrMsaspecQueryResponse data, response status code and response headers
    def update_network_locations_metadata_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.update_network_locations_metadata ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FirewallManagementApi.update_network_locations_metadata"
      end
      # resource path
      local_var_path = '/fwmgr/entities/network-locations-metadata/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'comment'] = opts[:'comment'] if !opts[:'comment'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrMsaspecQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.update_network_locations_metadata",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#update_network_locations_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates the network locations precedence according to the list of ids provided.
    # @param body [FwmgrApiNetworkLocationModifyPrecedenceRequestV1] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :comment Audit log comment for this action
    # @return [FwmgrMsaspecQueryResponse]
    def update_network_locations_precedence(body, opts = {})
      data, _status_code, _headers = update_network_locations_precedence_with_http_info(body, opts)
      data
    end

    # Updates the network locations precedence according to the list of ids provided.
    # @param body [FwmgrApiNetworkLocationModifyPrecedenceRequestV1] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :comment Audit log comment for this action
    # @return [Array<(FwmgrMsaspecQueryResponse, Integer, Hash)>] FwmgrMsaspecQueryResponse data, response status code and response headers
    def update_network_locations_precedence_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.update_network_locations_precedence ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FirewallManagementApi.update_network_locations_precedence"
      end
      # resource path
      local_var_path = '/fwmgr/entities/network-locations-precedence/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'comment'] = opts[:'comment'] if !opts[:'comment'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrMsaspecQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.update_network_locations_precedence",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#update_network_locations_precedence\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an identified policy container, including local logging functionality.
    # @param body [FwmgrApiPolicyContainerUpsertRequestV1] 
    # @param [Hash] opts the optional parameters
    # @return [FwmgrMsaspecResponseFields]
    def update_policy_container(body, opts = {})
      data, _status_code, _headers = update_policy_container_with_http_info(body, opts)
      data
    end

    # Update an identified policy container, including local logging functionality.
    # @param body [FwmgrApiPolicyContainerUpsertRequestV1] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FwmgrMsaspecResponseFields, Integer, Hash)>] FwmgrMsaspecResponseFields data, response status code and response headers
    def update_policy_container_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.update_policy_container ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FirewallManagementApi.update_policy_container"
      end
      # resource path
      local_var_path = '/fwmgr/entities/policies/v2'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrMsaspecResponseFields'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.update_policy_container",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#update_policy_container\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an identified policy container. WARNING: This endpoint is deprecated in favor of v2, using this endpoint could disable your local logging setting.
    # @param body [FwmgrApiPolicyContainerUpsertRequestV1] 
    # @param [Hash] opts the optional parameters
    # @return [FwmgrMsaspecResponseFields]
    def update_policy_container_v1(body, opts = {})
      data, _status_code, _headers = update_policy_container_v1_with_http_info(body, opts)
      data
    end

    # Update an identified policy container. WARNING: This endpoint is deprecated in favor of v2, using this endpoint could disable your local logging setting.
    # @param body [FwmgrApiPolicyContainerUpsertRequestV1] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FwmgrMsaspecResponseFields, Integer, Hash)>] FwmgrMsaspecResponseFields data, response status code and response headers
    def update_policy_container_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.update_policy_container_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FirewallManagementApi.update_policy_container_v1"
      end
      # resource path
      local_var_path = '/fwmgr/entities/policies/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrMsaspecResponseFields'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.update_policy_container_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#update_policy_container_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update name, description, or enabled status of a rule group, or create, edit, delete, or reorder rules
    # @param body [FwmgrApiRuleGroupModifyRequestV1] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :comment Audit log comment for this action
    # @return [FwmgrApiQueryResponse]
    def update_rule_group(body, opts = {})
      data, _status_code, _headers = update_rule_group_with_http_info(body, opts)
      data
    end

    # Update name, description, or enabled status of a rule group, or create, edit, delete, or reorder rules
    # @param body [FwmgrApiRuleGroupModifyRequestV1] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :comment Audit log comment for this action
    # @return [Array<(FwmgrApiQueryResponse, Integer, Hash)>] FwmgrApiQueryResponse data, response status code and response headers
    def update_rule_group_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.update_rule_group ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FirewallManagementApi.update_rule_group"
      end
      # resource path
      local_var_path = '/fwmgr/entities/rule-groups/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'comment'] = opts[:'comment'] if !opts[:'comment'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrApiQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.update_rule_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#update_rule_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validates the request of updating name, description, or enabled status of a rule group, or create, edit, delete, or reorder rules
    # @param body [FwmgrApiRuleGroupModifyRequestV1] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :comment Audit log comment for this action
    # @return [FwmgrMsaspecQueryResponse]
    def update_rule_group_validation(body, opts = {})
      data, _status_code, _headers = update_rule_group_validation_with_http_info(body, opts)
      data
    end

    # Validates the request of updating name, description, or enabled status of a rule group, or create, edit, delete, or reorder rules
    # @param body [FwmgrApiRuleGroupModifyRequestV1] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :comment Audit log comment for this action
    # @return [Array<(FwmgrMsaspecQueryResponse, Integer, Hash)>] FwmgrMsaspecQueryResponse data, response status code and response headers
    def update_rule_group_validation_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.update_rule_group_validation ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FirewallManagementApi.update_rule_group_validation"
      end
      # resource path
      local_var_path = '/fwmgr/entities/rule-groups/validation/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'comment'] = opts[:'comment'] if !opts[:'comment'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrMsaspecQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.update_rule_group_validation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#update_rule_group_validation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates the network locations provided, and return the ID.
    # @param body [FwmgrApiNetworkLocationModifyRequestV1] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :comment Audit log comment for this action
    # @return [FwmgrMsaspecQueryResponse]
    def upsert_network_locations(body, opts = {})
      data, _status_code, _headers = upsert_network_locations_with_http_info(body, opts)
      data
    end

    # Updates the network locations provided, and return the ID.
    # @param body [FwmgrApiNetworkLocationModifyRequestV1] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :comment Audit log comment for this action
    # @return [Array<(FwmgrMsaspecQueryResponse, Integer, Hash)>] FwmgrMsaspecQueryResponse data, response status code and response headers
    def upsert_network_locations_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.upsert_network_locations ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FirewallManagementApi.upsert_network_locations"
      end
      # resource path
      local_var_path = '/fwmgr/entities/network-locations/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'comment'] = opts[:'comment'] if !opts[:'comment'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrMsaspecQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.upsert_network_locations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#upsert_network_locations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validates that the test pattern matches the executable filepath glob pattern.
    # @param body [FwmgrApiFilepathTestRequest] 
    # @param [Hash] opts the optional parameters
    # @return [FwmgrApiValidateFilepathResponse]
    def validate_filepath_pattern(body, opts = {})
      data, _status_code, _headers = validate_filepath_pattern_with_http_info(body, opts)
      data
    end

    # Validates that the test pattern matches the executable filepath glob pattern.
    # @param body [FwmgrApiFilepathTestRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FwmgrApiValidateFilepathResponse, Integer, Hash)>] FwmgrApiValidateFilepathResponse data, response status code and response headers
    def validate_filepath_pattern_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallManagementApi.validate_filepath_pattern ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FirewallManagementApi.validate_filepath_pattern"
      end
      # resource path
      local_var_path = '/fwmgr/entities/rules/validate-filepath/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'FwmgrApiValidateFilepathResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FirewallManagementApi.validate_filepath_pattern",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallManagementApi#validate_filepath_pattern\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
