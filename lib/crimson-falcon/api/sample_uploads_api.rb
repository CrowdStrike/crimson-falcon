=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <https://unlicense.org>

CrowdStrike Swagger API Version: 2023-05-30T23:10:32Z

=end

require 'cgi'

module Falcon
  class SampleUploadsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete an archive that was uploaded previously
    # @param id [String] The archive SHA256.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def archive_delete_v1(id, opts = {})
      archive_delete_v1_with_http_info(id, opts)
      nil
    end

    # Delete an archive that was uploaded previously
    # @param id [String] The archive SHA256.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def archive_delete_v1_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SampleUploadsApi.archive_delete_v1 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SampleUploadsApi.archive_delete_v1"
      end
      # resource path
      local_var_path = '/archives/entities/archives/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"SampleUploadsApi.archive_delete_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SampleUploadsApi#archive_delete_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the archives upload operation statuses. Status `done` means that archive was processed successfully. Status `error` means that archive was not processed successfully.
    # @param id [String] The archive SHA256.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_files If &#x60;true&#x60; includes processed archive files in response. (default to false)
    # @return [ClientArchiveCreateResponseV1]
    def archive_get_v1(id, opts = {})
      data, _status_code, _headers = archive_get_v1_with_http_info(id, opts)
      data
    end

    # Retrieves the archives upload operation statuses. Status &#x60;done&#x60; means that archive was processed successfully. Status &#x60;error&#x60; means that archive was not processed successfully.
    # @param id [String] The archive SHA256.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_files If &#x60;true&#x60; includes processed archive files in response. (default to false)
    # @return [Array<(ClientArchiveCreateResponseV1, Integer, Hash)>] ClientArchiveCreateResponseV1 data, response status code and response headers
    def archive_get_v1_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SampleUploadsApi.archive_get_v1 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SampleUploadsApi.archive_get_v1"
      end
      # resource path
      local_var_path = '/archives/entities/archives/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'include_files'] = opts[:'include_files'] if !opts[:'include_files'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ClientArchiveCreateResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"SampleUploadsApi.archive_get_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SampleUploadsApi#archive_get_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the archives files in chunks.
    # @param id [String] The archive SHA256.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Max number of files to retrieve. (default to 100)
    # @option opts [String] :offset Offset from where to get files.
    # @return [ClientArchiveListFilesResponseV1]
    def archive_list_v1(id, opts = {})
      data, _status_code, _headers = archive_list_v1_with_http_info(id, opts)
      data
    end

    # Retrieves the archives files in chunks.
    # @param id [String] The archive SHA256.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Max number of files to retrieve. (default to 100)
    # @option opts [String] :offset Offset from where to get files.
    # @return [Array<(ClientArchiveListFilesResponseV1, Integer, Hash)>] ClientArchiveListFilesResponseV1 data, response status code and response headers
    def archive_list_v1_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SampleUploadsApi.archive_list_v1 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SampleUploadsApi.archive_list_v1"
      end
      # resource path
      local_var_path = '/archives/entities/archive-files/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ClientArchiveListFilesResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"SampleUploadsApi.archive_list_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SampleUploadsApi#archive_list_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Uploads an archive and extracts files list from it. Operation is asynchronous use `/archives/entities/archives/v1` to check the status. After uploading, use `/archives/entities/extractions/v1` to copy the file to internal storage making it available for content analysis. This method is deprecated in favor of `/archives/entities/archives/v2`
    # @param name [String] Name of the archive.
    # @param body [Array<Integer>] Content of the uploaded archive in binary format. For example, use &#x60;--data-binary @$FILE_PATH&#x60; when using cURL. Max file size: 100 MB.  Accepted file formats:  - Portable executables: &#x60;.zip&#x60;, &#x60;.7z&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :password Archive password.
    # @option opts [Boolean] :is_confidential Defines visibility of this file, either via the API or the Falcon console.  - &#x60;true&#x60;: File is only shown to users within your customer account - &#x60;false&#x60;: File can be seen by other CrowdStrike customers   Default: &#x60;true&#x60;. (default to true)
    # @option opts [String] :comment A descriptive comment to identify the file for other users.
    # @return [ClientArchiveCreateResponseV1]
    def archive_upload_v1(name, body, opts = {})
      data, _status_code, _headers = archive_upload_v1_with_http_info(name, body, opts)
      data
    end

    # Uploads an archive and extracts files list from it. Operation is asynchronous use &#x60;/archives/entities/archives/v1&#x60; to check the status. After uploading, use &#x60;/archives/entities/extractions/v1&#x60; to copy the file to internal storage making it available for content analysis. This method is deprecated in favor of &#x60;/archives/entities/archives/v2&#x60;
    # @param name [String] Name of the archive.
    # @param body [Array<Integer>] Content of the uploaded archive in binary format. For example, use &#x60;--data-binary @$FILE_PATH&#x60; when using cURL. Max file size: 100 MB.  Accepted file formats:  - Portable executables: &#x60;.zip&#x60;, &#x60;.7z&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :password Archive password.
    # @option opts [Boolean] :is_confidential Defines visibility of this file, either via the API or the Falcon console.  - &#x60;true&#x60;: File is only shown to users within your customer account - &#x60;false&#x60;: File can be seen by other CrowdStrike customers   Default: &#x60;true&#x60;. (default to true)
    # @option opts [String] :comment A descriptive comment to identify the file for other users.
    # @return [Array<(ClientArchiveCreateResponseV1, Integer, Hash)>] ClientArchiveCreateResponseV1 data, response status code and response headers
    def archive_upload_v1_with_http_info(name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SampleUploadsApi.archive_upload_v1 ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling SampleUploadsApi.archive_upload_v1"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SampleUploadsApi.archive_upload_v1"
      end
      # resource path
      local_var_path = '/archives/entities/archives/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name
      query_params[:'password'] = opts[:'password'] if !opts[:'password'].nil?
      query_params[:'is_confidential'] = opts[:'is_confidential'] if !opts[:'is_confidential'].nil?
      query_params[:'comment'] = opts[:'comment'] if !opts[:'comment'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/octet-stream', 'application/zip', 'application/x-7z-compressed', 'application/x-zip-compressed'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ClientArchiveCreateResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"SampleUploadsApi.archive_upload_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SampleUploadsApi#archive_upload_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Uploads an archive and extracts files list from it. Operation is asynchronous use `/archives/entities/archives/v1` to check the status. After uploading, use `/archives/entities/extractions/v1` to copy the file to internal storage making it available for content analysis.
    # @param file [File] Content of the uploaded archive. For example, use &#x60;--form file&#x3D;@$FILE_PATH;type&#x3D;&#x60; when using cURL. Supported file types are &#x60;application/zip&#x60; and &#x60;application/x-7z-compressed&#x60;.
    # @param name [String] Name of the archive. For example, use &#x60;--form name&#x3D;&#x60; when using cURL.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :password Archive password. For example, use &#x60;--form password&#x3D;&#x60; when using cURL.
    # @option opts [Boolean] :is_confidential Defines visibility of this file in Falcon MalQuery, either via the API or the Falcon console. For example, use &#x60;--form is_confidential&#x3D;&#x60; when using cURL.  - &#x60;true&#x60;: File is only shown to users within your customer account - &#x60;false&#x60;: File can be seen by other CrowdStrike customers   Default: &#x60;true&#x60;. (default to true)
    # @option opts [String] :comment A descriptive comment to identify the file for other users. For example, use &#x60;--form comment&#x3D;&#x60; when using cURL.
    # @return [ClientArchiveCreateResponseV1]
    def archive_upload_v2(file, name, opts = {})
      data, _status_code, _headers = archive_upload_v2_with_http_info(file, name, opts)
      data
    end

    # Uploads an archive and extracts files list from it. Operation is asynchronous use &#x60;/archives/entities/archives/v1&#x60; to check the status. After uploading, use &#x60;/archives/entities/extractions/v1&#x60; to copy the file to internal storage making it available for content analysis.
    # @param file [File] Content of the uploaded archive. For example, use &#x60;--form file&#x3D;@$FILE_PATH;type&#x3D;&#x60; when using cURL. Supported file types are &#x60;application/zip&#x60; and &#x60;application/x-7z-compressed&#x60;.
    # @param name [String] Name of the archive. For example, use &#x60;--form name&#x3D;&#x60; when using cURL.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :password Archive password. For example, use &#x60;--form password&#x3D;&#x60; when using cURL.
    # @option opts [Boolean] :is_confidential Defines visibility of this file in Falcon MalQuery, either via the API or the Falcon console. For example, use &#x60;--form is_confidential&#x3D;&#x60; when using cURL.  - &#x60;true&#x60;: File is only shown to users within your customer account - &#x60;false&#x60;: File can be seen by other CrowdStrike customers   Default: &#x60;true&#x60;. (default to true)
    # @option opts [String] :comment A descriptive comment to identify the file for other users. For example, use &#x60;--form comment&#x3D;&#x60; when using cURL.
    # @return [Array<(ClientArchiveCreateResponseV1, Integer, Hash)>] ClientArchiveCreateResponseV1 data, response status code and response headers
    def archive_upload_v2_with_http_info(file, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SampleUploadsApi.archive_upload_v2 ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling SampleUploadsApi.archive_upload_v2"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling SampleUploadsApi.archive_upload_v2"
      end
      # resource path
      local_var_path = '/archives/entities/archives/v2'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file
      form_params['name'] = name
      form_params['password'] = opts[:'password'] if !opts[:'password'].nil?
      form_params['is_confidential'] = opts[:'is_confidential'] if !opts[:'is_confidential'].nil?
      form_params['comment'] = opts[:'comment'] if !opts[:'comment'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ClientArchiveCreateResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"SampleUploadsApi.archive_upload_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SampleUploadsApi#archive_upload_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes a sample, including file, meta and submissions from the collection
    # @param ids [String] The file SHA256.
    # @param [Hash] opts the optional parameters
    # @return [MsaQueryResponse]
    def delete_sample_v3(ids, opts = {})
      data, _status_code, _headers = delete_sample_v3_with_http_info(ids, opts)
      data
    end

    # Removes a sample, including file, meta and submissions from the collection
    # @param ids [String] The file SHA256.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MsaQueryResponse, Integer, Hash)>] MsaQueryResponse data, response status code and response headers
    def delete_sample_v3_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SampleUploadsApi.delete_sample_v3 ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling SampleUploadsApi.delete_sample_v3"
      end
      # resource path
      local_var_path = '/samples/entities/samples/v3'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = ids

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"SampleUploadsApi.delete_sample_v3",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SampleUploadsApi#delete_sample_v3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Extracts files from an uploaded archive and copies them to internal storage making it available for content analysis.
    # @param body [ClientExtractionCreateRequestV1] 
    # @param [Hash] opts the optional parameters
    # @return [ClientExtractionCreateResponseV1]
    def extraction_create_v1(body, opts = {})
      data, _status_code, _headers = extraction_create_v1_with_http_info(body, opts)
      data
    end

    # Extracts files from an uploaded archive and copies them to internal storage making it available for content analysis.
    # @param body [ClientExtractionCreateRequestV1] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClientExtractionCreateResponseV1, Integer, Hash)>] ClientExtractionCreateResponseV1 data, response status code and response headers
    def extraction_create_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SampleUploadsApi.extraction_create_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SampleUploadsApi.extraction_create_v1"
      end
      # resource path
      local_var_path = '/archives/entities/extractions/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ClientExtractionCreateResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"SampleUploadsApi.extraction_create_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SampleUploadsApi#extraction_create_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the files extraction operation statuses. Status `done` means that all files were processed successfully. Status `error` means that at least one of the file could not be processed.
    # @param id [String] The extraction operation ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_files If &#x60;true&#x60; includes processed archive files in response. (default to false)
    # @return [ClientExtractionCreateResponseV1]
    def extraction_get_v1(id, opts = {})
      data, _status_code, _headers = extraction_get_v1_with_http_info(id, opts)
      data
    end

    # Retrieves the files extraction operation statuses. Status &#x60;done&#x60; means that all files were processed successfully. Status &#x60;error&#x60; means that at least one of the file could not be processed.
    # @param id [String] The extraction operation ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_files If &#x60;true&#x60; includes processed archive files in response. (default to false)
    # @return [Array<(ClientExtractionCreateResponseV1, Integer, Hash)>] ClientExtractionCreateResponseV1 data, response status code and response headers
    def extraction_get_v1_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SampleUploadsApi.extraction_get_v1 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SampleUploadsApi.extraction_get_v1"
      end
      # resource path
      local_var_path = '/archives/entities/extractions/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'include_files'] = opts[:'include_files'] if !opts[:'include_files'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ClientExtractionCreateResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"SampleUploadsApi.extraction_get_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SampleUploadsApi#extraction_get_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the files extractions in chunks. Status `done` means that all files were processed successfully. Status `error` means that at least one of the file could not be processed.
    # @param id [String] The extraction operation ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Max number of file extractions to retrieve. (default to 0)
    # @option opts [String] :offset Offset from where to get file extractions.
    # @return [ClientExtractionListFilesResponseV1]
    def extraction_list_v1(id, opts = {})
      data, _status_code, _headers = extraction_list_v1_with_http_info(id, opts)
      data
    end

    # Retrieves the files extractions in chunks. Status &#x60;done&#x60; means that all files were processed successfully. Status &#x60;error&#x60; means that at least one of the file could not be processed.
    # @param id [String] The extraction operation ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Max number of file extractions to retrieve. (default to 0)
    # @option opts [String] :offset Offset from where to get file extractions.
    # @return [Array<(ClientExtractionListFilesResponseV1, Integer, Hash)>] ClientExtractionListFilesResponseV1 data, response status code and response headers
    def extraction_list_v1_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SampleUploadsApi.extraction_list_v1 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SampleUploadsApi.extraction_list_v1"
      end
      # resource path
      local_var_path = '/archives/entities/extraction-files/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ClientExtractionListFilesResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"SampleUploadsApi.extraction_list_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SampleUploadsApi#extraction_list_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the file associated with the given ID (SHA256)
    # @param ids [String] The file SHA256.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :password_protected Flag whether the sample should be zipped and password protected with pass&#x3D;&#39;infected&#39; (default to false)
    # @return [String]
    def get_sample_v3(ids, opts = {})
      data, _status_code, _headers = get_sample_v3_with_http_info(ids, opts)
      data
    end

    # Retrieves the file associated with the given ID (SHA256)
    # @param ids [String] The file SHA256.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :password_protected Flag whether the sample should be zipped and password protected with pass&#x3D;&#39;infected&#39; (default to false)
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_sample_v3_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SampleUploadsApi.get_sample_v3 ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling SampleUploadsApi.get_sample_v3"
      end
      # resource path
      local_var_path = '/samples/entities/samples/v3'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = ids
      query_params[:'password_protected'] = opts[:'password_protected'] if !opts[:'password_protected'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"SampleUploadsApi.get_sample_v3",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SampleUploadsApi#get_sample_v3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload a file for further cloud analysis. After uploading, call the specific analysis API endpoint.
    # @param sample [File] Content of the uploaded sample in binary format. For example, use &#x60;--data-binary @$FILE_PATH&#x60; when using cURL. Max file size: 256 MB.  Accepted file formats:  - Portable executables: &#x60;.exe&#x60;, &#x60;.scr&#x60;, &#x60;.pif&#x60;, &#x60;.dll&#x60;, &#x60;.com&#x60;, &#x60;.cpl&#x60;, etc. - Office documents: &#x60;.doc&#x60;, &#x60;.docx&#x60;, &#x60;.ppt&#x60;, &#x60;.pps&#x60;, &#x60;.pptx&#x60;, &#x60;.ppsx&#x60;, &#x60;.xls&#x60;, &#x60;.xlsx&#x60;, &#x60;.rtf&#x60;, &#x60;.pub&#x60; - PDF - APK - Executable JAR - Windows script component: &#x60;.sct&#x60; - Windows shortcut: &#x60;.lnk&#x60; - Windows help: &#x60;.chm&#x60; - HTML application: &#x60;.hta&#x60; - Windows script file: &#x60;.wsf&#x60; - Javascript: &#x60;.js&#x60; - Visual Basic: &#x60;.vbs&#x60;,  &#x60;.vbe&#x60; - Shockwave Flash: &#x60;.swf&#x60; - Perl: &#x60;.pl&#x60; - Powershell: &#x60;.ps1&#x60;, &#x60;.psd1&#x60;, &#x60;.psm1&#x60; - Scalable vector graphics: &#x60;.svg&#x60; - Python: &#x60;.py&#x60; - Linux ELF executables - Email files: MIME RFC 822 &#x60;.eml&#x60;, Outlook &#x60;.msg&#x60;.
    # @param file_name [String] Name of the file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :comment A descriptive comment to identify the file for other users.
    # @option opts [Boolean] :is_confidential Defines visibility of this file in Falcon MalQuery, either via the API or the Falcon console.  - &#x60;true&#x60;: File is only shown to users within your customer account - &#x60;false&#x60;: File can be seen by other CrowdStrike customers   Default: &#x60;true&#x60;. (default to true)
    # @return [ClientSampleMetadataResponseV2]
    def upload_sample_v3(sample, file_name, opts = {})
      data, _status_code, _headers = upload_sample_v3_with_http_info(sample, file_name, opts)
      data
    end

    # Upload a file for further cloud analysis. After uploading, call the specific analysis API endpoint.
    # @param sample [File] Content of the uploaded sample in binary format. For example, use &#x60;--data-binary @$FILE_PATH&#x60; when using cURL. Max file size: 256 MB.  Accepted file formats:  - Portable executables: &#x60;.exe&#x60;, &#x60;.scr&#x60;, &#x60;.pif&#x60;, &#x60;.dll&#x60;, &#x60;.com&#x60;, &#x60;.cpl&#x60;, etc. - Office documents: &#x60;.doc&#x60;, &#x60;.docx&#x60;, &#x60;.ppt&#x60;, &#x60;.pps&#x60;, &#x60;.pptx&#x60;, &#x60;.ppsx&#x60;, &#x60;.xls&#x60;, &#x60;.xlsx&#x60;, &#x60;.rtf&#x60;, &#x60;.pub&#x60; - PDF - APK - Executable JAR - Windows script component: &#x60;.sct&#x60; - Windows shortcut: &#x60;.lnk&#x60; - Windows help: &#x60;.chm&#x60; - HTML application: &#x60;.hta&#x60; - Windows script file: &#x60;.wsf&#x60; - Javascript: &#x60;.js&#x60; - Visual Basic: &#x60;.vbs&#x60;,  &#x60;.vbe&#x60; - Shockwave Flash: &#x60;.swf&#x60; - Perl: &#x60;.pl&#x60; - Powershell: &#x60;.ps1&#x60;, &#x60;.psd1&#x60;, &#x60;.psm1&#x60; - Scalable vector graphics: &#x60;.svg&#x60; - Python: &#x60;.py&#x60; - Linux ELF executables - Email files: MIME RFC 822 &#x60;.eml&#x60;, Outlook &#x60;.msg&#x60;.
    # @param file_name [String] Name of the file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :comment A descriptive comment to identify the file for other users.
    # @option opts [Boolean] :is_confidential Defines visibility of this file in Falcon MalQuery, either via the API or the Falcon console.  - &#x60;true&#x60;: File is only shown to users within your customer account - &#x60;false&#x60;: File can be seen by other CrowdStrike customers   Default: &#x60;true&#x60;. (default to true)
    # @return [Array<(ClientSampleMetadataResponseV2, Integer, Hash)>] ClientSampleMetadataResponseV2 data, response status code and response headers
    def upload_sample_v3_with_http_info(sample, file_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SampleUploadsApi.upload_sample_v3 ...'
      end
      # verify the required parameter 'sample' is set
      if @api_client.config.client_side_validation && sample.nil?
        fail ArgumentError, "Missing the required parameter 'sample' when calling SampleUploadsApi.upload_sample_v3"
      end
      # verify the required parameter 'file_name' is set
      if @api_client.config.client_side_validation && file_name.nil?
        fail ArgumentError, "Missing the required parameter 'file_name' when calling SampleUploadsApi.upload_sample_v3"
      end
      # resource path
      local_var_path = '/samples/entities/samples/v3'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data', 'application/octet-stream'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['sample'] = sample
      form_params['file_name'] = file_name
      form_params['comment'] = opts[:'comment'] if !opts[:'comment'].nil?
      form_params['is_confidential'] = opts[:'is_confidential'] if !opts[:'is_confidential'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ClientSampleMetadataResponseV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"SampleUploadsApi.upload_sample_v3",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SampleUploadsApi#upload_sample_v3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
