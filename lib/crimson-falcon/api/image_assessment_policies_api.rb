=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'cgi'

module Falcon
  class ImageAssessmentPoliciesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Image Assessment policies
    # @param body [ModelsCreatePolicyRequest]
    # @param [Hash] opts the optional parameters
    # @return [ModelsPolicyEntityResponse]
    def create_policies(body, opts = {})
      data, _status_code, _headers = create_policies_with_http_info(body, opts)
      data
    end

    # Create Image Assessment policies
    # @param body [ModelsCreatePolicyRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelsPolicyEntityResponse, Integer, Hash)>] ModelsPolicyEntityResponse data, response status code and response headers
    def create_policies_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageAssessmentPoliciesApi.create_policies ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ImageAssessmentPoliciesApi.create_policies"
      end
      # resource path
      local_var_path = '/container-security/entities/image-assessment-policies/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ModelsPolicyEntityResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ImageAssessmentPoliciesApi.create_policies",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageAssessmentPoliciesApi#create_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Image Assessment Policy Group entities
    # @param body [ModelsCreateImageGroupRequest]
    # @param [Hash] opts the optional parameters
    # @return [ModelsPolicyGroupEntityResponse]
    def create_policy_groups(body, opts = {})
      data, _status_code, _headers = create_policy_groups_with_http_info(body, opts)
      data
    end

    # Create Image Assessment Policy Group entities
    # @param body [ModelsCreateImageGroupRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelsPolicyGroupEntityResponse, Integer, Hash)>] ModelsPolicyGroupEntityResponse data, response status code and response headers
    def create_policy_groups_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageAssessmentPoliciesApi.create_policy_groups ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ImageAssessmentPoliciesApi.create_policy_groups"
      end
      # resource path
      local_var_path = '/container-security/entities/image-assessment-policy-groups/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ModelsPolicyGroupEntityResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ImageAssessmentPoliciesApi.create_policy_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageAssessmentPoliciesApi#create_policy_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Image Assessment Policy by policy UUID
    # @param id [String] Image Assessment Policy entity UUID
    # @param [Hash] opts the optional parameters
    # @return [CoreEntitiesResponse]
    def delete_policy(id, opts = {})
      data, _status_code, _headers = delete_policy_with_http_info(id, opts)
      data
    end

    # Delete Image Assessment Policy by policy UUID
    # @param id [String] Image Assessment Policy entity UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(CoreEntitiesResponse, Integer, Hash)>] CoreEntitiesResponse data, response status code and response headers
    def delete_policy_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageAssessmentPoliciesApi.delete_policy ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ImageAssessmentPoliciesApi.delete_policy"
      end
      # resource path
      local_var_path = '/container-security/entities/image-assessment-policies/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CoreEntitiesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ImageAssessmentPoliciesApi.delete_policy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageAssessmentPoliciesApi#delete_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Image Assessment Policy Group entities
    # @param id [String] Policy Image Group entity UUID
    # @param [Hash] opts the optional parameters
    # @return [CoreEntitiesResponse]
    def delete_policy_group(id, opts = {})
      data, _status_code, _headers = delete_policy_group_with_http_info(id, opts)
      data
    end

    # Delete Image Assessment Policy Group entities
    # @param id [String] Policy Image Group entity UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(CoreEntitiesResponse, Integer, Hash)>] CoreEntitiesResponse data, response status code and response headers
    def delete_policy_group_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageAssessmentPoliciesApi.delete_policy_group ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ImageAssessmentPoliciesApi.delete_policy_group"
      end
      # resource path
      local_var_path = '/container-security/entities/image-assessment-policy-groups/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CoreEntitiesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ImageAssessmentPoliciesApi.delete_policy_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageAssessmentPoliciesApi#delete_policy_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all Image Assessment policies
    # @param [Hash] opts the optional parameters
    # @return [ModelsPolicyEntityResponse]
    def read_policies(opts = {})
      data, _status_code, _headers = read_policies_with_http_info(opts)
      data
    end

    # Get all Image Assessment policies
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelsPolicyEntityResponse, Integer, Hash)>] ModelsPolicyEntityResponse data, response status code and response headers
    def read_policies_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageAssessmentPoliciesApi.read_policies ...'
      end
      # resource path
      local_var_path = '/container-security/entities/image-assessment-policies/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelsPolicyEntityResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ImageAssessmentPoliciesApi.read_policies",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageAssessmentPoliciesApi#read_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Image Assessment Policy Exclusion entities
    # @param [Hash] opts the optional parameters
    # @return [ModelsPolicyExclusionEntityResponse]
    def read_policy_exclusions(opts = {})
      data, _status_code, _headers = read_policy_exclusions_with_http_info(opts)
      data
    end

    # Retrieve Image Assessment Policy Exclusion entities
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelsPolicyExclusionEntityResponse, Integer, Hash)>] ModelsPolicyExclusionEntityResponse data, response status code and response headers
    def read_policy_exclusions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageAssessmentPoliciesApi.read_policy_exclusions ...'
      end
      # resource path
      local_var_path = '/container-security/entities/image-assessment-policy-exclusions/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelsPolicyExclusionEntityResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ImageAssessmentPoliciesApi.read_policy_exclusions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageAssessmentPoliciesApi#read_policy_exclusions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Image Assessment Policy Group entities
    # @param [Hash] opts the optional parameters
    # @return [ModelsPolicyGroupEntityResponse]
    def read_policy_groups(opts = {})
      data, _status_code, _headers = read_policy_groups_with_http_info(opts)
      data
    end

    # Retrieve Image Assessment Policy Group entities
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelsPolicyGroupEntityResponse, Integer, Hash)>] ModelsPolicyGroupEntityResponse data, response status code and response headers
    def read_policy_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageAssessmentPoliciesApi.read_policy_groups ...'
      end
      # resource path
      local_var_path = '/container-security/entities/image-assessment-policy-groups/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelsPolicyGroupEntityResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ImageAssessmentPoliciesApi.read_policy_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageAssessmentPoliciesApi#read_policy_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Image Assessment Policy entities
    # @param id [String] Image Assessment Policy entity UUID
    # @param body [ModelsPatchPolicyRequest]
    # @param [Hash] opts the optional parameters
    # @return [ModelsPolicyEntityResponse]
    def update_policies(id, body, opts = {})
      data, _status_code, _headers = update_policies_with_http_info(id, body, opts)
      data
    end

    # Update Image Assessment Policy entities
    # @param id [String] Image Assessment Policy entity UUID
    # @param body [ModelsPatchPolicyRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelsPolicyEntityResponse, Integer, Hash)>] ModelsPolicyEntityResponse data, response status code and response headers
    def update_policies_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageAssessmentPoliciesApi.update_policies ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ImageAssessmentPoliciesApi.update_policies"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ImageAssessmentPoliciesApi.update_policies"
      end
      # resource path
      local_var_path = '/container-security/entities/image-assessment-policies/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ModelsPolicyEntityResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ImageAssessmentPoliciesApi.update_policies",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageAssessmentPoliciesApi#update_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Image Assessment Policy Exclusion entities
    # @param body [ModelsUpdateExclusionsRequest]
    # @param [Hash] opts the optional parameters
    # @return [ModelsPolicyExclusionEntityResponse]
    def update_policy_exclusions(body, opts = {})
      data, _status_code, _headers = update_policy_exclusions_with_http_info(body, opts)
      data
    end

    # Update Image Assessment Policy Exclusion entities
    # @param body [ModelsUpdateExclusionsRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelsPolicyExclusionEntityResponse, Integer, Hash)>] ModelsPolicyExclusionEntityResponse data, response status code and response headers
    def update_policy_exclusions_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageAssessmentPoliciesApi.update_policy_exclusions ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ImageAssessmentPoliciesApi.update_policy_exclusions"
      end
      # resource path
      local_var_path = '/container-security/entities/image-assessment-policy-exclusions/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ModelsPolicyExclusionEntityResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ImageAssessmentPoliciesApi.update_policy_exclusions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageAssessmentPoliciesApi#update_policy_exclusions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Image Assessment Policy Group entities
    # @param id [String] Policy Image Group entity UUID
    # @param body [ModelsPatchImageGroupRequest]
    # @param [Hash] opts the optional parameters
    # @return [ModelsPolicyGroupEntityResponse]
    def update_policy_groups(id, body, opts = {})
      data, _status_code, _headers = update_policy_groups_with_http_info(id, body, opts)
      data
    end

    # Update Image Assessment Policy Group entities
    # @param id [String] Policy Image Group entity UUID
    # @param body [ModelsPatchImageGroupRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelsPolicyGroupEntityResponse, Integer, Hash)>] ModelsPolicyGroupEntityResponse data, response status code and response headers
    def update_policy_groups_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageAssessmentPoliciesApi.update_policy_groups ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ImageAssessmentPoliciesApi.update_policy_groups"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ImageAssessmentPoliciesApi.update_policy_groups"
      end
      # resource path
      local_var_path = '/container-security/entities/image-assessment-policy-groups/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ModelsPolicyGroupEntityResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ImageAssessmentPoliciesApi.update_policy_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageAssessmentPoliciesApi#update_policy_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Image Assessment Policy precedence
    # @param body [ModelsAPIPrecedenceRequest]
    # @param [Hash] opts the optional parameters
    # @return [ModelsPolicyEntityResponse]
    def update_policy_precedence(body, opts = {})
      data, _status_code, _headers = update_policy_precedence_with_http_info(body, opts)
      data
    end

    # Update Image Assessment Policy precedence
    # @param body [ModelsAPIPrecedenceRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelsPolicyEntityResponse, Integer, Hash)>] ModelsPolicyEntityResponse data, response status code and response headers
    def update_policy_precedence_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageAssessmentPoliciesApi.update_policy_precedence ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ImageAssessmentPoliciesApi.update_policy_precedence"
      end
      # resource path
      local_var_path = '/container-security/entities/image-assessment-policy-precedence/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ModelsPolicyEntityResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ImageAssessmentPoliciesApi.update_policy_precedence",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageAssessmentPoliciesApi#update_policy_precedence\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
