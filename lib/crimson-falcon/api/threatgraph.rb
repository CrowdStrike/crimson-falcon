=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'cgi'

module Falcon
  class Threatgraph
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve edges for a given vertex id.  One edge type must be specified
    # @param ids [String] Vertex ID to get details for.  Only one value is supported
    # @param edge_type [String] The type of edges that you would like to retrieve
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many edges to return in a single request [1-100] (default to 100)
    # @option opts [String] :offset The offset to use to retrieve the next page of results
    # @option opts [String] :direction The direction of edges that you would like to retrieve.
    # @option opts [String] :scope Scope of the request (default to 'device')
    # @option opts [Boolean] :nano Return nano-precision entity timestamps (default to false)
    # @return [nil]
    def combined_edges_get(ids, edge_type, opts = {})
      combined_edges_get_with_http_info(ids, edge_type, opts)
      nil
    end

    # Retrieve edges for a given vertex id.  One edge type must be specified
    # @param ids [String] Vertex ID to get details for.  Only one value is supported
    # @param edge_type [String] The type of edges that you would like to retrieve
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many edges to return in a single request [1-100] (default to 100)
    # @option opts [String] :offset The offset to use to retrieve the next page of results
    # @option opts [String] :direction The direction of edges that you would like to retrieve.
    # @option opts [String] :scope Scope of the request (default to 'device')
    # @option opts [Boolean] :nano Return nano-precision entity timestamps (default to false)
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def combined_edges_get_with_http_info(ids, edge_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Threatgraph.combined_edges_get ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling Threatgraph.combined_edges_get"
      end
      # verify the required parameter 'edge_type' is set
      if @api_client.config.client_side_validation && edge_type.nil?
        fail ArgumentError, "Missing the required parameter 'edge_type' when calling Threatgraph.combined_edges_get"
      end
      # verify enum value
      allowable_values = ["attributed_by_process", "invalidated_by_process", "queried_on_customer", "connected_from_process", "triggering_domain", "has_attributed_process", "generated_failed_authentication_to_azure_app", "protected_by_shield", "associated_by_ip6", "macro_executed_by_process", "queried_on_sensor", "created_quarantined_file", "user", "generated_ldap_search_against_dc", "quarantined_file", "connected_to_accessory", "self_diagnostic_to_agent", "failed_to_authenticate_to_adfs_app", "network_close_ip4", "implicated_sensor", "ipv4_listen", "created_by_user", "failed_to_authenticate_to_azure_app", "wrote_module", "accessed_azure_application", "queried_dns", "connected_ip4", "trigger_process", "known_by_sha256", "attributed_on", "invalidated_firewall_rule", "associated_by_service_ticket", "closed_ip6_socket", "triggering_network", "attributed_from_module", "set_rule", "generated_failed_authentication_to_adfs_app", "involved_service_account", "disconnected_from_host", "set_firewall_rule", "reports_aggregate_indicator", "deleted_rule", "registered_by_incident", "triggered_indicator", "dns", "associated_vmware_sensor", "ipv6", "associated_module", "uninstalled_app", "network_listen_ip6", "accessed_ping_fed_application", "duplicates_app", "associated_idp_indicator", "generated_failed_authentication_to_service_account", "accessed_ad_computer", "generated_dce_rpc_request_against_dc", "opened_ip6_socket", "cert_is_presented_by", "renewed_to_generate", "associated_by_aggregate_indicator", "invalid_from_process", "installed_by_app", "device", "customer_user_to_sensor_user", "resolved_from_domain", "associated_by_certificate", "member_of_full_command_line", "connected_on_customer", "established_session", "established_on_ip4", "generated_by_renewing", "blocked_module", "wmicreated_process", "ipv6_listen", "initiated_by_azure_ad_user", "initiated_by_user", "connection_killed_by_app", "duplicated_by_app", "registered_scheduledtask", "associated_by_ip", "child_process", "parent_process", "attributed_to", "ip6_socket_closed_by_process", "invalid_firewall_rule", "created_by_process", "triggered_by_control_graph", "associated_by_azure_app", "generated_dce_rpc_epm_request_against_dc", "network_listen_ip4", "ip4_socket_closed_by_app", "killed_ip4_connection", "customer_agent_has_user", "connected_from_app", "assigned_to_sensor", "associated_k8s_sensor", "connection_killed_by_process", "injected_code_into_process", "generated_failed_authentication_to_okta_app", "extracted_file", "associated_quarantined_module", "witnessed_process", "blocked_by_sensor", "associated_by_incident", "unmounted_on_host", "executed_macro_script", "associated_by_app", "ipv4", "containerized_app", "connected_to_wifi_ap", "associated_with_sensor", "user_session", "loaded_module", "blocked_by_app", "denied_by_process", "failed_to_authenticate_ad_user", "presented_by_cloud", "denied_firewall_rule", "ipv6_close", "bundles_module", "established_on_sensor", "accessed_okta_application", "attributed_from_domain", "blocked_dns", "accessed_adfs_application", "customer_has_sensor", "assigned_ipv4_address", "dns_request", "primary_module_of_process", "initiated_by_okta_user", "allowed_firewall_rule", "established_on_ip6", "network_connect_ip4", "created_by_incident", "cert_presented", "associated_user_session", "resolved_to_ip6", "unmounted_from_host", "module_written", "customer_ioc", "authenticated_from_incident", "ip4_socket_opened_by_process", "control_graph", "accessed_service_account", "queried_by_process", "linking_event", "implicated_by_incident", "associated_to_ad_computer", "set_by_process", "primary_module", "associated_by_ad_group", "connected_from_host", "assigned_ipv6_address", "ip6_socket_opened_by_process", "associated_by_indicator", "ipv4_close", "denied_by_firewall_rule", "parent_of_command_line", "uncontainerized_by_sensor", "associated_by_control_graph", "associated_by_idp_session", "shield_activated_on_host", "failed_to_authenticate_to_service_account", "attributed_on_module", "script", "disconnected_from_accessory", "opened_ip4_socket", "attributed_on_domain", "rule_set_by_process", "customer_sensor_to_sensor", "allowed_by_process", "blocked_ip6", "mounted_on_host", "loaded_by_process", "associated_mobile_indicator", "generated_by_session", "network_close_ip6", "triggered_mobile_indicator", "authenticated_host", "module", "closed_ip4_socket", "initiated_by_ad_computer", "network_connect_ip6", "rooted_control_graph", "established_on_host_name", "associated_by_ad_computer", "connected_on_sensor", "established_on_ad_computer", "deleted_by_process", "associated_vmware_cluster", "accessed_by_session", "known_by_md5", "indexed", "executed_by_process", "associated_indicator", "failed_to_authenticate_to_ping_app", "command_line_parent_process", "created_service", "associated_firewall_rule", "associated_incident", "associated_by_azure_ad_user", "ip6_socket_closed_by_app", "associated_by_domain", "generated_failed_authentication_to_ping_app", "received_from_cloud", "associated_k8s_cluster", "generated_failed_authentication_to_ad_computer", "performed_psexec_against_dc", "accessed_by_kerberos_ticket", "detected_module", "wmicreated_by_incident", "associated_by_okta_user", "executed_script", "associated_root_process", "disconnect_from_wifi_ap", "associated_by_host", "killed_ip6_connection", "associated_mobile_forensics_report", "has_app_installed", "attributed_to_actor", "app_uninstalled_from_host", "failed_to_authenticate_to_ad_computer", "installed_on_host", "associated_primary_module", "parented_by_process", "associated_by_ad_user", "uncontainerized_app", "mounted_to_host", "has_attribution", "blocked_by_process", "triggered_xdr", "detection", "connected_ip6", "triggered_control_graph", "queried_by_sensor", "ip4_socket_closed_by_process", "executed_app", "has_firmware", "associated_by_ip4", "installed_app", "injected_thread", "containerized_by_sensor", "witnessed_by_sensor", "resolved_to_ip4", "associated_control_graph", "associated_quarantined_file", "blocked_ip4", "associated_by_host_name", "participating_process", "bundled_in_app", "had_code_injected_by_process", "established_user_session", "failed_to_authenticate_to_okta_app", "triggered_detection", "initiated_session", "injected_thread_from_process", "generated_service_ticket", "triggered_by_process", "associated_to_sensor", "written_by_process", "associated_with_process", "shell_io_redirect", "agent_to_self_diagnostic", "involved_ad_computer"]
      if @api_client.config.client_side_validation && !allowable_values.include?(edge_type)
        fail ArgumentError, "invalid value for \"edge_type\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling Threatgraph.combined_edges_get, must be smaller than or equal to 100.'
      end

      allowable_values = ["device", "customer"]
      if @api_client.config.client_side_validation && opts[:'scope'] && !allowable_values.include?(opts[:'scope'])
        fail ArgumentError, "invalid value for \"scope\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/threatgraph/combined/edges/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = ids
      query_params[:'edge_type'] = edge_type
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      query_params[:'nano'] = opts[:'nano'] if !opts[:'nano'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Threatgraph.combined_edges_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Threatgraph#combined_edges_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Look up instances of indicators such as hashes, domain names, and ip addresses that have been seen on devices in your environment.
    # @param value [String] The value of the indicator to search by.
    # @param type [String] The type of indicator that you would like to retrieve
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many edges to return in a single request [1-100] (default to 100)
    # @option opts [String] :offset The offset to use to retrieve the next page of results
    # @option opts [Boolean] :nano Return nano-precision entity timestamps (default to false)
    # @return [nil]
    def combined_ran_on_get(value, type, opts = {})
      combined_ran_on_get_with_http_info(value, type, opts)
      nil
    end

    # Look up instances of indicators such as hashes, domain names, and ip addresses that have been seen on devices in your environment.
    # @param value [String] The value of the indicator to search by.
    # @param type [String] The type of indicator that you would like to retrieve
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many edges to return in a single request [1-100] (default to 100)
    # @option opts [String] :offset The offset to use to retrieve the next page of results
    # @option opts [Boolean] :nano Return nano-precision entity timestamps (default to false)
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def combined_ran_on_get_with_http_info(value, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Threatgraph.combined_ran_on_get ...'
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling Threatgraph.combined_ran_on_get"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling Threatgraph.combined_ran_on_get"
      end
      # verify enum value
      allowable_values = ["domain", "ipv4", "ipv6", "md5", "sha1", "sha256"]
      if @api_client.config.client_side_validation && !allowable_values.include?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling Threatgraph.combined_ran_on_get, must be smaller than or equal to 100.'
      end

      # resource path
      local_var_path = '/threatgraph/combined/ran-on/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'value'] = value
      query_params[:'type'] = type
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'nano'] = opts[:'nano'] if !opts[:'nano'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Threatgraph.combined_ran_on_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Threatgraph#combined_ran_on_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve summary for a given vertex ID
    # @param vertex_type [String] Type of vertex to get properties for
    # @param ids [Array<String>] Vertex ID to get details for
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope Scope of the request (default to 'device')
    # @option opts [Boolean] :nano Return nano-precision entity timestamps (default to false)
    # @return [nil]
    def combined_summary_get(vertex_type, ids, opts = {})
      combined_summary_get_with_http_info(vertex_type, ids, opts)
      nil
    end

    # Retrieve summary for a given vertex ID
    # @param vertex_type [String] Type of vertex to get properties for
    # @param ids [Array<String>] Vertex ID to get details for
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope Scope of the request (default to 'device')
    # @option opts [Boolean] :nano Return nano-precision entity timestamps (default to false)
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def combined_summary_get_with_http_info(vertex_type, ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Threatgraph.combined_summary_get ...'
      end
      # verify the required parameter 'vertex_type' is set
      if @api_client.config.client_side_validation && vertex_type.nil?
        fail ArgumentError, "Missing the required parameter 'vertex_type' when calling Threatgraph.combined_summary_get"
      end
      # verify enum value
      allowable_values = ["accessory", "accessories", "actor", "ad_computer", "ad-computers", "adfs_application", "adfs-applications", "ad_group", "ad-groups", "aggregate_indicator", "aggregate-indicators", "sensor", "devices", "mobile_app", "mobile-apps", "azure_application", "azure-applications", "azure_ad_user", "azure-ad-users", "containerized_app", "containerized-apps", "certificate", "certificates", "command_line", "command-lines", "control_graph", "control-graphs", "detection", "detections", "domain", "domains", "extracted_file", "extracted-files", "firmware", "firmwares", "mobile_fs_volume", "mobile-fs-volumes", "firewall", "firewalls", "firewall_rule_match", "firewall_rule_matches", "host_name", "host-names", "detection_index", "detection-indices", "idp_indicator", "idp-indicators", "idp_session", "idp-sessions", "incident", "incidents", "indicator", "indicators", "ipv4", "ipv6", "k8s_cluster", "k8s_clusters", "legacy_detection", "legacy-detections", "mobile_os_forensics_report", "mobile_os_forensics_reports", "mobile_indicator", "mobile-indicators", "module", "modules", "macro_script", "macro_scripts", "okta_application", "okta-applications", "okta_user", "okta-users", "process", "processes", "ping_fed_application", "ping-fed-applications", "quarantined_file", "quarantined-files", "script", "scripts", "shield", "shields", "sensor_self_diagnostic", "sensor-self-diagnostics", "kerberos_ticket", "kerberos-tickets", "user_id", "users", "user_session", "user-sessions", "vmware_cluster", "vmware_clusters", "wifi_access_point", "wifi-access-points", "xdr", "any-vertex"]
      if @api_client.config.client_side_validation && !allowable_values.include?(vertex_type)
        fail ArgumentError, "invalid value for \"vertex_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling Threatgraph.combined_summary_get"
      end
      if @api_client.config.client_side_validation && ids.length > 100
        fail ArgumentError, 'invalid value for "ids" when calling Threatgraph.combined_summary_get, number of items must be less than or equal to 100.'
      end

      allowable_values = ["device", "customer"]
      if @api_client.config.client_side_validation && opts[:'scope'] && !allowable_values.include?(opts[:'scope'])
        fail ArgumentError, "invalid value for \"scope\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/threatgraph/combined/{vertex-type}/summary/v1'.sub('{' + 'vertex-type' + '}', CGI.escape(vertex_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      query_params[:'nano'] = opts[:'nano'] if !opts[:'nano'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Threatgraph.combined_summary_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Threatgraph#combined_summary_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve metadata for a given vertex ID. Note: This is a legacy endpoint used by CrowdStrike Store partners prior to release of the ThreatGraph OAuth 2.0 APIs. If you’re not currently using this endpoint, use the /v2 endpoint instead.
    # @param vertex_type [String] Type of vertex to get properties for
    # @param ids [Array<String>] Vertex ID to get details for
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope Scope of the request (default to 'device')
    # @option opts [Boolean] :nano Return nano-precision entity timestamps (default to false)
    # @return [ThreatgraphVertexDetailsResponse]
    def entities_vertices_get(vertex_type, ids, opts = {})
      data, _status_code, _headers = entities_vertices_get_with_http_info(vertex_type, ids, opts)
      data
    end

    # Retrieve metadata for a given vertex ID. Note: This is a legacy endpoint used by CrowdStrike Store partners prior to release of the ThreatGraph OAuth 2.0 APIs. If you’re not currently using this endpoint, use the /v2 endpoint instead.
    # @param vertex_type [String] Type of vertex to get properties for
    # @param ids [Array<String>] Vertex ID to get details for
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope Scope of the request (default to 'device')
    # @option opts [Boolean] :nano Return nano-precision entity timestamps (default to false)
    # @return [Array<(ThreatgraphVertexDetailsResponse, Integer, Hash)>] ThreatgraphVertexDetailsResponse data, response status code and response headers
    def entities_vertices_get_with_http_info(vertex_type, ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Threatgraph.entities_vertices_get ...'
      end
      # verify the required parameter 'vertex_type' is set
      if @api_client.config.client_side_validation && vertex_type.nil?
        fail ArgumentError, "Missing the required parameter 'vertex_type' when calling Threatgraph.entities_vertices_get"
      end
      # verify enum value
      allowable_values = ["accessory", "accessories", "actor", "ad_computer", "ad-computers", "adfs_application", "adfs-applications", "ad_group", "ad-groups", "aggregate_indicator", "aggregate-indicators", "sensor", "devices", "mobile_app", "mobile-apps", "azure_application", "azure-applications", "azure_ad_user", "azure-ad-users", "containerized_app", "containerized-apps", "certificate", "certificates", "command_line", "command-lines", "control_graph", "control-graphs", "detection", "detections", "domain", "domains", "extracted_file", "extracted-files", "firmware", "firmwares", "mobile_fs_volume", "mobile-fs-volumes", "firewall", "firewalls", "firewall_rule_match", "firewall_rule_matches", "host_name", "host-names", "detection_index", "detection-indices", "idp_indicator", "idp-indicators", "idp_session", "idp-sessions", "incident", "incidents", "indicator", "indicators", "ipv4", "ipv6", "k8s_cluster", "k8s_clusters", "legacy_detection", "legacy-detections", "mobile_os_forensics_report", "mobile_os_forensics_reports", "mobile_indicator", "mobile-indicators", "module", "modules", "macro_script", "macro_scripts", "okta_application", "okta-applications", "okta_user", "okta-users", "process", "processes", "ping_fed_application", "ping-fed-applications", "quarantined_file", "quarantined-files", "script", "scripts", "shield", "shields", "sensor_self_diagnostic", "sensor-self-diagnostics", "kerberos_ticket", "kerberos-tickets", "user_id", "users", "user_session", "user-sessions", "vmware_cluster", "vmware_clusters", "wifi_access_point", "wifi-access-points", "xdr", "any-vertex"]
      if @api_client.config.client_side_validation && !allowable_values.include?(vertex_type)
        fail ArgumentError, "invalid value for \"vertex_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling Threatgraph.entities_vertices_get"
      end
      if @api_client.config.client_side_validation && ids.length > 100
        fail ArgumentError, 'invalid value for "ids" when calling Threatgraph.entities_vertices_get, number of items must be less than or equal to 100.'
      end

      allowable_values = ["device", "customer"]
      if @api_client.config.client_side_validation && opts[:'scope'] && !allowable_values.include?(opts[:'scope'])
        fail ArgumentError, "invalid value for \"scope\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/threatgraph/entities/{vertex-type}/v1'.sub('{' + 'vertex-type' + '}', CGI.escape(vertex_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      query_params[:'nano'] = opts[:'nano'] if !opts[:'nano'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ThreatgraphVertexDetailsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Threatgraph.entities_vertices_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Threatgraph#entities_vertices_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve metadata for a given vertex ID
    # @param vertex_type [String] Type of vertex to get properties for
    # @param ids [Array<String>] Vertex ID to get details for
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope Scope of the request (default to 'device')
    # @option opts [Boolean] :nano Return nano-precision entity timestamps (default to false)
    # @return [ThreatgraphVertexDetailsResponse]
    def entities_vertices_getv2(vertex_type, ids, opts = {})
      data, _status_code, _headers = entities_vertices_getv2_with_http_info(vertex_type, ids, opts)
      data
    end

    # Retrieve metadata for a given vertex ID
    # @param vertex_type [String] Type of vertex to get properties for
    # @param ids [Array<String>] Vertex ID to get details for
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope Scope of the request (default to 'device')
    # @option opts [Boolean] :nano Return nano-precision entity timestamps (default to false)
    # @return [Array<(ThreatgraphVertexDetailsResponse, Integer, Hash)>] ThreatgraphVertexDetailsResponse data, response status code and response headers
    def entities_vertices_getv2_with_http_info(vertex_type, ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Threatgraph.entities_vertices_getv2 ...'
      end
      # verify the required parameter 'vertex_type' is set
      if @api_client.config.client_side_validation && vertex_type.nil?
        fail ArgumentError, "Missing the required parameter 'vertex_type' when calling Threatgraph.entities_vertices_getv2"
      end
      # verify enum value
      allowable_values = ["accessory", "accessories", "actor", "ad_computer", "ad-computers", "adfs_application", "adfs-applications", "ad_group", "ad-groups", "aggregate_indicator", "aggregate-indicators", "sensor", "devices", "mobile_app", "mobile-apps", "azure_application", "azure-applications", "azure_ad_user", "azure-ad-users", "containerized_app", "containerized-apps", "certificate", "certificates", "command_line", "command-lines", "control_graph", "control-graphs", "detection", "detections", "domain", "domains", "extracted_file", "extracted-files", "firmware", "firmwares", "mobile_fs_volume", "mobile-fs-volumes", "firewall", "firewalls", "firewall_rule_match", "firewall_rule_matches", "host_name", "host-names", "detection_index", "detection-indices", "idp_indicator", "idp-indicators", "idp_session", "idp-sessions", "incident", "incidents", "indicator", "indicators", "ipv4", "ipv6", "k8s_cluster", "k8s_clusters", "legacy_detection", "legacy-detections", "mobile_os_forensics_report", "mobile_os_forensics_reports", "mobile_indicator", "mobile-indicators", "module", "modules", "macro_script", "macro_scripts", "okta_application", "okta-applications", "okta_user", "okta-users", "process", "processes", "ping_fed_application", "ping-fed-applications", "quarantined_file", "quarantined-files", "script", "scripts", "shield", "shields", "sensor_self_diagnostic", "sensor-self-diagnostics", "kerberos_ticket", "kerberos-tickets", "user_id", "users", "user_session", "user-sessions", "vmware_cluster", "vmware_clusters", "wifi_access_point", "wifi-access-points", "xdr", "any-vertex"]
      if @api_client.config.client_side_validation && !allowable_values.include?(vertex_type)
        fail ArgumentError, "invalid value for \"vertex_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling Threatgraph.entities_vertices_getv2"
      end
      if @api_client.config.client_side_validation && ids.length > 100
        fail ArgumentError, 'invalid value for "ids" when calling Threatgraph.entities_vertices_getv2, number of items must be less than or equal to 100.'
      end

      allowable_values = ["device", "customer"]
      if @api_client.config.client_side_validation && opts[:'scope'] && !allowable_values.include?(opts[:'scope'])
        fail ArgumentError, "invalid value for \"scope\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/threatgraph/entities/{vertex-type}/v2'.sub('{' + 'vertex-type' + '}', CGI.escape(vertex_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      query_params[:'nano'] = opts[:'nano'] if !opts[:'nano'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ThreatgraphVertexDetailsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Threatgraph.entities_vertices_getv2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Threatgraph#entities_vertices_getv2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show all available edge types
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def queries_edgetypes_get(opts = {})
      queries_edgetypes_get_with_http_info(opts)
      nil
    end

    # Show all available edge types
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def queries_edgetypes_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Threatgraph.queries_edgetypes_get ...'
      end
      # resource path
      local_var_path = '/threatgraph/queries/edge-types/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Threatgraph.queries_edgetypes_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Threatgraph#queries_edgetypes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
