=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'cgi'

module Falcon
  class CustomStorage
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete the specified object
    # @param collection_name [String] The name of the collection
    # @param object_key [String] The object key
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :dry_run If false, run the operation as normal.  If true, validate that the request *would* succeed, but don&#39;t execute it.
    # @return [CustomStorageResponse]
    def delete_object(collection_name, object_key, opts = {})
      data, _status_code, _headers = delete_object_with_http_info(collection_name, object_key, opts)
      data
    end

    # Delete the specified object
    # @param collection_name [String] The name of the collection
    # @param object_key [String] The object key
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :dry_run If false, run the operation as normal.  If true, validate that the request *would* succeed, but don&#39;t execute it.
    # @return [Array<(CustomStorageResponse, Integer, Hash)>] CustomStorageResponse data, response status code and response headers
    def delete_object_with_http_info(collection_name, object_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomStorage.delete_object ...'
      end
      # verify the required parameter 'collection_name' is set
      if @api_client.config.client_side_validation && collection_name.nil?
        fail ArgumentError, "Missing the required parameter 'collection_name' when calling CustomStorage.delete_object"
      end
      if @api_client.config.client_side_validation && collection_name.to_s.length > 255
        fail ArgumentError, 'invalid value for "collection_name" when calling CustomStorage.delete_object, the character length must be smaller than or equal to 255.'
      end

      if @api_client.config.client_side_validation && collection_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "collection_name" when calling CustomStorage.delete_object, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'object_key' is set
      if @api_client.config.client_side_validation && object_key.nil?
        fail ArgumentError, "Missing the required parameter 'object_key' when calling CustomStorage.delete_object"
      end
      if @api_client.config.client_side_validation && object_key.to_s.length > 1000
        fail ArgumentError, 'invalid value for "object_key" when calling CustomStorage.delete_object, the character length must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && object_key.to_s.length < 1
        fail ArgumentError, 'invalid value for "object_key" when calling CustomStorage.delete_object, the character length must be great than or equal to 1.'
      end

      # resource path
      local_var_path = '/customobjects/v1/collections/{collection_name}/objects/{object_key}'.sub('{' + 'collection_name' + '}', CGI.escape(collection_name.to_s)).sub('{' + 'object_key' + '}', CGI.escape(object_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'dry_run'] = opts[:'dry_run'] if !opts[:'dry_run'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomStorageResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CustomStorage.delete_object",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomStorage#delete_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the specified versioned object
    # @param collection_name [String] The name of the collection
    # @param collection_version [String] The version of the collection
    # @param object_key [String] The object key
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :dry_run If false, run the operation as normal.  If true, validate that the request *would* succeed, but don&#39;t execute it.
    # @return [CustomType3191042536]
    def delete_versioned_object(collection_name, collection_version, object_key, opts = {})
      data, _status_code, _headers = delete_versioned_object_with_http_info(collection_name, collection_version, object_key, opts)
      data
    end

    # Delete the specified versioned object
    # @param collection_name [String] The name of the collection
    # @param collection_version [String] The version of the collection
    # @param object_key [String] The object key
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :dry_run If false, run the operation as normal.  If true, validate that the request *would* succeed, but don&#39;t execute it.
    # @return [Array<(CustomType3191042536, Integer, Hash)>] CustomType3191042536 data, response status code and response headers
    def delete_versioned_object_with_http_info(collection_name, collection_version, object_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomStorage.delete_versioned_object ...'
      end
      # verify the required parameter 'collection_name' is set
      if @api_client.config.client_side_validation && collection_name.nil?
        fail ArgumentError, "Missing the required parameter 'collection_name' when calling CustomStorage.delete_versioned_object"
      end
      if @api_client.config.client_side_validation && collection_name.to_s.length > 255
        fail ArgumentError, 'invalid value for "collection_name" when calling CustomStorage.delete_versioned_object, the character length must be smaller than or equal to 255.'
      end

      if @api_client.config.client_side_validation && collection_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "collection_name" when calling CustomStorage.delete_versioned_object, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'collection_version' is set
      if @api_client.config.client_side_validation && collection_version.nil?
        fail ArgumentError, "Missing the required parameter 'collection_version' when calling CustomStorage.delete_versioned_object"
      end
      if @api_client.config.client_side_validation && collection_version.to_s.length > 20
        fail ArgumentError, 'invalid value for "collection_version" when calling CustomStorage.delete_versioned_object, the character length must be smaller than or equal to 20.'
      end

      if @api_client.config.client_side_validation && collection_version.to_s.length < 1
        fail ArgumentError, 'invalid value for "collection_version" when calling CustomStorage.delete_versioned_object, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'object_key' is set
      if @api_client.config.client_side_validation && object_key.nil?
        fail ArgumentError, "Missing the required parameter 'object_key' when calling CustomStorage.delete_versioned_object"
      end
      if @api_client.config.client_side_validation && object_key.to_s.length > 1000
        fail ArgumentError, 'invalid value for "object_key" when calling CustomStorage.delete_versioned_object, the character length must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && object_key.to_s.length < 1
        fail ArgumentError, 'invalid value for "object_key" when calling CustomStorage.delete_versioned_object, the character length must be great than or equal to 1.'
      end

      # resource path
      local_var_path = '/customobjects/v1/collections/{collection_name}/{collection_version}/objects/{object_key}'.sub('{' + 'collection_name' + '}', CGI.escape(collection_name.to_s)).sub('{' + 'collection_version' + '}', CGI.escape(collection_version.to_s)).sub('{' + 'object_key' + '}', CGI.escape(object_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'dry_run'] = opts[:'dry_run'] if !opts[:'dry_run'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomType3191042536'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CustomStorage.delete_versioned_object",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomStorage#delete_versioned_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the bytes for the specified object
    # @param collection_name [String] The name of the collection
    # @param object_key [String] The object key
    # @param [Hash] opts the optional parameters
    # @return [File]
    def get_object(collection_name, object_key, opts = {})
      data, _status_code, _headers = get_object_with_http_info(collection_name, object_key, opts)
      data
    end

    # Get the bytes for the specified object
    # @param collection_name [String] The name of the collection
    # @param object_key [String] The object key
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_object_with_http_info(collection_name, object_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomStorage.get_object ...'
      end
      # verify the required parameter 'collection_name' is set
      if @api_client.config.client_side_validation && collection_name.nil?
        fail ArgumentError, "Missing the required parameter 'collection_name' when calling CustomStorage.get_object"
      end
      if @api_client.config.client_side_validation && collection_name.to_s.length > 255
        fail ArgumentError, 'invalid value for "collection_name" when calling CustomStorage.get_object, the character length must be smaller than or equal to 255.'
      end

      if @api_client.config.client_side_validation && collection_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "collection_name" when calling CustomStorage.get_object, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'object_key' is set
      if @api_client.config.client_side_validation && object_key.nil?
        fail ArgumentError, "Missing the required parameter 'object_key' when calling CustomStorage.get_object"
      end
      if @api_client.config.client_side_validation && object_key.to_s.length > 1000
        fail ArgumentError, 'invalid value for "object_key" when calling CustomStorage.get_object, the character length must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && object_key.to_s.length < 1
        fail ArgumentError, 'invalid value for "object_key" when calling CustomStorage.get_object, the character length must be great than or equal to 1.'
      end

      # resource path
      local_var_path = '/customobjects/v1/collections/{collection_name}/objects/{object_key}'.sub('{' + 'collection_name' + '}', CGI.escape(collection_name.to_s)).sub('{' + 'object_key' + '}', CGI.escape(object_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CustomStorage.get_object",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomStorage#get_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the metadata for the specified object
    # @param collection_name [String] The name of the collection
    # @param object_key [String] The object key
    # @param [Hash] opts the optional parameters
    # @return [CustomStorageResponse]
    def get_object_metadata(collection_name, object_key, opts = {})
      data, _status_code, _headers = get_object_metadata_with_http_info(collection_name, object_key, opts)
      data
    end

    # Get the metadata for the specified object
    # @param collection_name [String] The name of the collection
    # @param object_key [String] The object key
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomStorageResponse, Integer, Hash)>] CustomStorageResponse data, response status code and response headers
    def get_object_metadata_with_http_info(collection_name, object_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomStorage.get_object_metadata ...'
      end
      # verify the required parameter 'collection_name' is set
      if @api_client.config.client_side_validation && collection_name.nil?
        fail ArgumentError, "Missing the required parameter 'collection_name' when calling CustomStorage.get_object_metadata"
      end
      if @api_client.config.client_side_validation && collection_name.to_s.length > 255
        fail ArgumentError, 'invalid value for "collection_name" when calling CustomStorage.get_object_metadata, the character length must be smaller than or equal to 255.'
      end

      if @api_client.config.client_side_validation && collection_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "collection_name" when calling CustomStorage.get_object_metadata, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'object_key' is set
      if @api_client.config.client_side_validation && object_key.nil?
        fail ArgumentError, "Missing the required parameter 'object_key' when calling CustomStorage.get_object_metadata"
      end
      if @api_client.config.client_side_validation && object_key.to_s.length > 1000
        fail ArgumentError, 'invalid value for "object_key" when calling CustomStorage.get_object_metadata, the character length must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && object_key.to_s.length < 1
        fail ArgumentError, 'invalid value for "object_key" when calling CustomStorage.get_object_metadata, the character length must be great than or equal to 1.'
      end

      # resource path
      local_var_path = '/customobjects/v1/collections/{collection_name}/objects/{object_key}/metadata'.sub('{' + 'collection_name' + '}', CGI.escape(collection_name.to_s)).sub('{' + 'object_key' + '}', CGI.escape(object_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomStorageResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CustomStorage.get_object_metadata",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomStorage#get_object_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the bytes for the specified object
    # @param collection_name [String] The name of the collection
    # @param collection_version [String] The version of the collection
    # @param object_key [String] The object key
    # @param [Hash] opts the optional parameters
    # @return [File]
    def get_versioned_object(collection_name, collection_version, object_key, opts = {})
      data, _status_code, _headers = get_versioned_object_with_http_info(collection_name, collection_version, object_key, opts)
      data
    end

    # Get the bytes for the specified object
    # @param collection_name [String] The name of the collection
    # @param collection_version [String] The version of the collection
    # @param object_key [String] The object key
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_versioned_object_with_http_info(collection_name, collection_version, object_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomStorage.get_versioned_object ...'
      end
      # verify the required parameter 'collection_name' is set
      if @api_client.config.client_side_validation && collection_name.nil?
        fail ArgumentError, "Missing the required parameter 'collection_name' when calling CustomStorage.get_versioned_object"
      end
      if @api_client.config.client_side_validation && collection_name.to_s.length > 255
        fail ArgumentError, 'invalid value for "collection_name" when calling CustomStorage.get_versioned_object, the character length must be smaller than or equal to 255.'
      end

      if @api_client.config.client_side_validation && collection_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "collection_name" when calling CustomStorage.get_versioned_object, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'collection_version' is set
      if @api_client.config.client_side_validation && collection_version.nil?
        fail ArgumentError, "Missing the required parameter 'collection_version' when calling CustomStorage.get_versioned_object"
      end
      if @api_client.config.client_side_validation && collection_version.to_s.length > 20
        fail ArgumentError, 'invalid value for "collection_version" when calling CustomStorage.get_versioned_object, the character length must be smaller than or equal to 20.'
      end

      if @api_client.config.client_side_validation && collection_version.to_s.length < 1
        fail ArgumentError, 'invalid value for "collection_version" when calling CustomStorage.get_versioned_object, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'object_key' is set
      if @api_client.config.client_side_validation && object_key.nil?
        fail ArgumentError, "Missing the required parameter 'object_key' when calling CustomStorage.get_versioned_object"
      end
      if @api_client.config.client_side_validation && object_key.to_s.length > 1000
        fail ArgumentError, 'invalid value for "object_key" when calling CustomStorage.get_versioned_object, the character length must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && object_key.to_s.length < 1
        fail ArgumentError, 'invalid value for "object_key" when calling CustomStorage.get_versioned_object, the character length must be great than or equal to 1.'
      end

      # resource path
      local_var_path = '/customobjects/v1/collections/{collection_name}/{collection_version}/objects/{object_key}'.sub('{' + 'collection_name' + '}', CGI.escape(collection_name.to_s)).sub('{' + 'collection_version' + '}', CGI.escape(collection_version.to_s)).sub('{' + 'object_key' + '}', CGI.escape(object_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CustomStorage.get_versioned_object",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomStorage#get_versioned_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the metadata for the specified object
    # @param collection_name [String] The name of the collection
    # @param collection_version [String] The version of the collection
    # @param object_key [String] The object key
    # @param [Hash] opts the optional parameters
    # @return [CustomType3191042536]
    def get_versioned_object_metadata(collection_name, collection_version, object_key, opts = {})
      data, _status_code, _headers = get_versioned_object_metadata_with_http_info(collection_name, collection_version, object_key, opts)
      data
    end

    # Get the metadata for the specified object
    # @param collection_name [String] The name of the collection
    # @param collection_version [String] The version of the collection
    # @param object_key [String] The object key
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomType3191042536, Integer, Hash)>] CustomType3191042536 data, response status code and response headers
    def get_versioned_object_metadata_with_http_info(collection_name, collection_version, object_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomStorage.get_versioned_object_metadata ...'
      end
      # verify the required parameter 'collection_name' is set
      if @api_client.config.client_side_validation && collection_name.nil?
        fail ArgumentError, "Missing the required parameter 'collection_name' when calling CustomStorage.get_versioned_object_metadata"
      end
      if @api_client.config.client_side_validation && collection_name.to_s.length > 255
        fail ArgumentError, 'invalid value for "collection_name" when calling CustomStorage.get_versioned_object_metadata, the character length must be smaller than or equal to 255.'
      end

      if @api_client.config.client_side_validation && collection_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "collection_name" when calling CustomStorage.get_versioned_object_metadata, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'collection_version' is set
      if @api_client.config.client_side_validation && collection_version.nil?
        fail ArgumentError, "Missing the required parameter 'collection_version' when calling CustomStorage.get_versioned_object_metadata"
      end
      if @api_client.config.client_side_validation && collection_version.to_s.length > 20
        fail ArgumentError, 'invalid value for "collection_version" when calling CustomStorage.get_versioned_object_metadata, the character length must be smaller than or equal to 20.'
      end

      if @api_client.config.client_side_validation && collection_version.to_s.length < 1
        fail ArgumentError, 'invalid value for "collection_version" when calling CustomStorage.get_versioned_object_metadata, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'object_key' is set
      if @api_client.config.client_side_validation && object_key.nil?
        fail ArgumentError, "Missing the required parameter 'object_key' when calling CustomStorage.get_versioned_object_metadata"
      end
      if @api_client.config.client_side_validation && object_key.to_s.length > 1000
        fail ArgumentError, 'invalid value for "object_key" when calling CustomStorage.get_versioned_object_metadata, the character length must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && object_key.to_s.length < 1
        fail ArgumentError, 'invalid value for "object_key" when calling CustomStorage.get_versioned_object_metadata, the character length must be great than or equal to 1.'
      end

      # resource path
      local_var_path = '/customobjects/v1/collections/{collection_name}/{collection_version}/objects/{object_key}/metadata'.sub('{' + 'collection_name' + '}', CGI.escape(collection_name.to_s)).sub('{' + 'collection_version' + '}', CGI.escape(collection_version.to_s)).sub('{' + 'object_key' + '}', CGI.escape(object_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomType3191042536'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CustomStorage.get_versioned_object_metadata",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomStorage#get_versioned_object_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the object keys in the specified collection in alphabetical order
    # @param collection_name [String] The name of the collection
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_end The end key to end listing to
    # @option opts [Integer] :limit The limit of results to return
    # @option opts [String] :start The start key to start listing from
    # @return [CustomStorageObjectKeys]
    def list_objects(collection_name, opts = {})
      data, _status_code, _headers = list_objects_with_http_info(collection_name, opts)
      data
    end

    # List the object keys in the specified collection in alphabetical order
    # @param collection_name [String] The name of the collection
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_end The end key to end listing to
    # @option opts [Integer] :limit The limit of results to return
    # @option opts [String] :start The start key to start listing from
    # @return [Array<(CustomStorageObjectKeys, Integer, Hash)>] CustomStorageObjectKeys data, response status code and response headers
    def list_objects_with_http_info(collection_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomStorage.list_objects ...'
      end
      # verify the required parameter 'collection_name' is set
      if @api_client.config.client_side_validation && collection_name.nil?
        fail ArgumentError, "Missing the required parameter 'collection_name' when calling CustomStorage.list_objects"
      end
      if @api_client.config.client_side_validation && collection_name.to_s.length > 255
        fail ArgumentError, 'invalid value for "collection_name" when calling CustomStorage.list_objects, the character length must be smaller than or equal to 255.'
      end

      if @api_client.config.client_side_validation && collection_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "collection_name" when calling CustomStorage.list_objects, the character length must be great than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'_end'].nil? && opts[:'_end'].to_s.length > 1000
        fail ArgumentError, 'invalid value for "opts[:"_end"]" when calling CustomStorage.list_objects, the character length must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'_end'].nil? && opts[:'_end'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"_end"]" when calling CustomStorage.list_objects, the character length must be great than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'start'].nil? && opts[:'start'].to_s.length > 1000
        fail ArgumentError, 'invalid value for "opts[:"start"]" when calling CustomStorage.list_objects, the character length must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'start'].nil? && opts[:'start'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"start"]" when calling CustomStorage.list_objects, the character length must be great than or equal to 1.'
      end

      # resource path
      local_var_path = '/customobjects/v1/collections/{collection_name}/objects'.sub('{' + 'collection_name' + '}', CGI.escape(collection_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'end'] = opts[:'_end'] if !opts[:'_end'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomStorageObjectKeys'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CustomStorage.list_objects",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomStorage#list_objects\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the object keys in the specified collection in alphabetical order
    # @param collection_name [String] The name of the collection
    # @param collection_version [String] The version of the collection
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_end The end key to end listing to
    # @option opts [Integer] :limit The limit of results to return
    # @option opts [String] :start The start key to start listing from
    # @return [CustomType1255839303]
    def list_objects_by_version(collection_name, collection_version, opts = {})
      data, _status_code, _headers = list_objects_by_version_with_http_info(collection_name, collection_version, opts)
      data
    end

    # List the object keys in the specified collection in alphabetical order
    # @param collection_name [String] The name of the collection
    # @param collection_version [String] The version of the collection
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_end The end key to end listing to
    # @option opts [Integer] :limit The limit of results to return
    # @option opts [String] :start The start key to start listing from
    # @return [Array<(CustomType1255839303, Integer, Hash)>] CustomType1255839303 data, response status code and response headers
    def list_objects_by_version_with_http_info(collection_name, collection_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomStorage.list_objects_by_version ...'
      end
      # verify the required parameter 'collection_name' is set
      if @api_client.config.client_side_validation && collection_name.nil?
        fail ArgumentError, "Missing the required parameter 'collection_name' when calling CustomStorage.list_objects_by_version"
      end
      if @api_client.config.client_side_validation && collection_name.to_s.length > 255
        fail ArgumentError, 'invalid value for "collection_name" when calling CustomStorage.list_objects_by_version, the character length must be smaller than or equal to 255.'
      end

      if @api_client.config.client_side_validation && collection_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "collection_name" when calling CustomStorage.list_objects_by_version, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'collection_version' is set
      if @api_client.config.client_side_validation && collection_version.nil?
        fail ArgumentError, "Missing the required parameter 'collection_version' when calling CustomStorage.list_objects_by_version"
      end
      if @api_client.config.client_side_validation && collection_version.to_s.length > 20
        fail ArgumentError, 'invalid value for "collection_version" when calling CustomStorage.list_objects_by_version, the character length must be smaller than or equal to 20.'
      end

      if @api_client.config.client_side_validation && collection_version.to_s.length < 1
        fail ArgumentError, 'invalid value for "collection_version" when calling CustomStorage.list_objects_by_version, the character length must be great than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'_end'].nil? && opts[:'_end'].to_s.length > 1000
        fail ArgumentError, 'invalid value for "opts[:"_end"]" when calling CustomStorage.list_objects_by_version, the character length must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'_end'].nil? && opts[:'_end'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"_end"]" when calling CustomStorage.list_objects_by_version, the character length must be great than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'start'].nil? && opts[:'start'].to_s.length > 1000
        fail ArgumentError, 'invalid value for "opts[:"start"]" when calling CustomStorage.list_objects_by_version, the character length must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'start'].nil? && opts[:'start'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"start"]" when calling CustomStorage.list_objects_by_version, the character length must be great than or equal to 1.'
      end

      # resource path
      local_var_path = '/customobjects/v1/collections/{collection_name}/{collection_version}/objects'.sub('{' + 'collection_name' + '}', CGI.escape(collection_name.to_s)).sub('{' + 'collection_version' + '}', CGI.escape(collection_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'end'] = opts[:'_end'] if !opts[:'_end'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomType1255839303'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CustomStorage.list_objects_by_version",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomStorage#list_objects_by_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Put the specified new object at the given key or overwrite an existing object at the given key
    # @param collection_name [String] The name of the collection
    # @param object_key [String] The object key
    # @param body [File]
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :dry_run If false, run the operation as normal.  If true, validate that the request *would* succeed, but don&#39;t execute it.
    # @option opts [String] :schema_version The version of the collection schema
    # @return [CustomStorageResponse]
    def put_object(collection_name, object_key, body, opts = {})
      data, _status_code, _headers = put_object_with_http_info(collection_name, object_key, body, opts)
      data
    end

    # Put the specified new object at the given key or overwrite an existing object at the given key
    # @param collection_name [String] The name of the collection
    # @param object_key [String] The object key
    # @param body [File]
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :dry_run If false, run the operation as normal.  If true, validate that the request *would* succeed, but don&#39;t execute it.
    # @option opts [String] :schema_version The version of the collection schema
    # @return [Array<(CustomStorageResponse, Integer, Hash)>] CustomStorageResponse data, response status code and response headers
    def put_object_with_http_info(collection_name, object_key, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomStorage.put_object ...'
      end
      # verify the required parameter 'collection_name' is set
      if @api_client.config.client_side_validation && collection_name.nil?
        fail ArgumentError, "Missing the required parameter 'collection_name' when calling CustomStorage.put_object"
      end
      if @api_client.config.client_side_validation && collection_name.to_s.length > 255
        fail ArgumentError, 'invalid value for "collection_name" when calling CustomStorage.put_object, the character length must be smaller than or equal to 255.'
      end

      if @api_client.config.client_side_validation && collection_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "collection_name" when calling CustomStorage.put_object, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'object_key' is set
      if @api_client.config.client_side_validation && object_key.nil?
        fail ArgumentError, "Missing the required parameter 'object_key' when calling CustomStorage.put_object"
      end
      if @api_client.config.client_side_validation && object_key.to_s.length > 1000
        fail ArgumentError, 'invalid value for "object_key" when calling CustomStorage.put_object, the character length must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && object_key.to_s.length < 1
        fail ArgumentError, 'invalid value for "object_key" when calling CustomStorage.put_object, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomStorage.put_object"
      end
      if @api_client.config.client_side_validation && !opts[:'schema_version'].nil? && opts[:'schema_version'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"schema_version"]" when calling CustomStorage.put_object, the character length must be great than or equal to 1.'
      end

      # resource path
      local_var_path = '/customobjects/v1/collections/{collection_name}/objects/{object_key}'.sub('{' + 'collection_name' + '}', CGI.escape(collection_name.to_s)).sub('{' + 'object_key' + '}', CGI.escape(object_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'dry_run'] = opts[:'dry_run'] if !opts[:'dry_run'].nil?
      query_params[:'schema_version'] = opts[:'schema_version'] if !opts[:'schema_version'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/octet-stream', 'application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CustomStorageResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CustomStorage.put_object",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomStorage#put_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Put the specified new object at the given key or overwrite an existing object at the given key
    # @param collection_name [String] The name of the collection
    # @param collection_version [String] The version of the collection
    # @param object_key [String] The object key
    # @param body [File]
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :dry_run If false, run the operation as normal.  If true, validate that the request *would* succeed, but don&#39;t execute it.
    # @return [CustomType3191042536]
    def put_object_by_version(collection_name, collection_version, object_key, body, opts = {})
      data, _status_code, _headers = put_object_by_version_with_http_info(collection_name, collection_version, object_key, body, opts)
      data
    end

    # Put the specified new object at the given key or overwrite an existing object at the given key
    # @param collection_name [String] The name of the collection
    # @param collection_version [String] The version of the collection
    # @param object_key [String] The object key
    # @param body [File]
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :dry_run If false, run the operation as normal.  If true, validate that the request *would* succeed, but don&#39;t execute it.
    # @return [Array<(CustomType3191042536, Integer, Hash)>] CustomType3191042536 data, response status code and response headers
    def put_object_by_version_with_http_info(collection_name, collection_version, object_key, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomStorage.put_object_by_version ...'
      end
      # verify the required parameter 'collection_name' is set
      if @api_client.config.client_side_validation && collection_name.nil?
        fail ArgumentError, "Missing the required parameter 'collection_name' when calling CustomStorage.put_object_by_version"
      end
      if @api_client.config.client_side_validation && collection_name.to_s.length > 255
        fail ArgumentError, 'invalid value for "collection_name" when calling CustomStorage.put_object_by_version, the character length must be smaller than or equal to 255.'
      end

      if @api_client.config.client_side_validation && collection_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "collection_name" when calling CustomStorage.put_object_by_version, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'collection_version' is set
      if @api_client.config.client_side_validation && collection_version.nil?
        fail ArgumentError, "Missing the required parameter 'collection_version' when calling CustomStorage.put_object_by_version"
      end
      if @api_client.config.client_side_validation && collection_version.to_s.length > 20
        fail ArgumentError, 'invalid value for "collection_version" when calling CustomStorage.put_object_by_version, the character length must be smaller than or equal to 20.'
      end

      if @api_client.config.client_side_validation && collection_version.to_s.length < 1
        fail ArgumentError, 'invalid value for "collection_version" when calling CustomStorage.put_object_by_version, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'object_key' is set
      if @api_client.config.client_side_validation && object_key.nil?
        fail ArgumentError, "Missing the required parameter 'object_key' when calling CustomStorage.put_object_by_version"
      end
      if @api_client.config.client_side_validation && object_key.to_s.length > 1000
        fail ArgumentError, 'invalid value for "object_key" when calling CustomStorage.put_object_by_version, the character length must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && object_key.to_s.length < 1
        fail ArgumentError, 'invalid value for "object_key" when calling CustomStorage.put_object_by_version, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomStorage.put_object_by_version"
      end
      # resource path
      local_var_path = '/customobjects/v1/collections/{collection_name}/{collection_version}/objects/{object_key}'.sub('{' + 'collection_name' + '}', CGI.escape(collection_name.to_s)).sub('{' + 'collection_version' + '}', CGI.escape(collection_version.to_s)).sub('{' + 'object_key' + '}', CGI.escape(object_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'dry_run'] = opts[:'dry_run'] if !opts[:'dry_run'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/octet-stream', 'application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CustomType3191042536'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CustomStorage.put_object_by_version",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomStorage#put_object_by_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search for objects that match the specified filter criteria (returns metadata, not actual objects)
    # @param collection_name [String] The name of the collection
    # @param filter [String] The filter to limit the returned results.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The limit of results to return
    # @option opts [Integer] :offset The offset of results to return
    # @option opts [String] :sort The sort order for the returned results.
    # @return [CustomStorageResponse]
    def search_objects(collection_name, filter, opts = {})
      data, _status_code, _headers = search_objects_with_http_info(collection_name, filter, opts)
      data
    end

    # Search for objects that match the specified filter criteria (returns metadata, not actual objects)
    # @param collection_name [String] The name of the collection
    # @param filter [String] The filter to limit the returned results.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The limit of results to return
    # @option opts [Integer] :offset The offset of results to return
    # @option opts [String] :sort The sort order for the returned results.
    # @return [Array<(CustomStorageResponse, Integer, Hash)>] CustomStorageResponse data, response status code and response headers
    def search_objects_with_http_info(collection_name, filter, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomStorage.search_objects ...'
      end
      # verify the required parameter 'collection_name' is set
      if @api_client.config.client_side_validation && collection_name.nil?
        fail ArgumentError, "Missing the required parameter 'collection_name' when calling CustomStorage.search_objects"
      end
      if @api_client.config.client_side_validation && collection_name.to_s.length > 255
        fail ArgumentError, 'invalid value for "collection_name" when calling CustomStorage.search_objects, the character length must be smaller than or equal to 255.'
      end

      if @api_client.config.client_side_validation && collection_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "collection_name" when calling CustomStorage.search_objects, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'filter' is set
      if @api_client.config.client_side_validation && filter.nil?
        fail ArgumentError, "Missing the required parameter 'filter' when calling CustomStorage.search_objects"
      end
      if @api_client.config.client_side_validation && filter.to_s.length > 255
        fail ArgumentError, 'invalid value for "filter" when calling CustomStorage.search_objects, the character length must be smaller than or equal to 255.'
      end

      if @api_client.config.client_side_validation && filter.to_s.length < 1
        fail ArgumentError, 'invalid value for "filter" when calling CustomStorage.search_objects, the character length must be great than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'sort'].nil? && opts[:'sort'].to_s.length > 255
        fail ArgumentError, 'invalid value for "opts[:"sort"]" when calling CustomStorage.search_objects, the character length must be smaller than or equal to 255.'
      end

      if @api_client.config.client_side_validation && !opts[:'sort'].nil? && opts[:'sort'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"sort"]" when calling CustomStorage.search_objects, the character length must be great than or equal to 1.'
      end

      # resource path
      local_var_path = '/customobjects/v1/collections/{collection_name}/objects'.sub('{' + 'collection_name' + '}', CGI.escape(collection_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = filter
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomStorageResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CustomStorage.search_objects",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomStorage#search_objects\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search for objects that match the specified filter criteria (returns metadata, not actual objects)
    # @param collection_name [String] The name of the collection
    # @param collection_version [String] The version of the collection
    # @param filter [String] The filter to limit the returned results.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The limit of results to return
    # @option opts [Integer] :offset The offset of results to return
    # @option opts [String] :sort The sort order for the returned results.
    # @return [CustomType3191042536]
    def search_objects_by_version(collection_name, collection_version, filter, opts = {})
      data, _status_code, _headers = search_objects_by_version_with_http_info(collection_name, collection_version, filter, opts)
      data
    end

    # Search for objects that match the specified filter criteria (returns metadata, not actual objects)
    # @param collection_name [String] The name of the collection
    # @param collection_version [String] The version of the collection
    # @param filter [String] The filter to limit the returned results.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The limit of results to return
    # @option opts [Integer] :offset The offset of results to return
    # @option opts [String] :sort The sort order for the returned results.
    # @return [Array<(CustomType3191042536, Integer, Hash)>] CustomType3191042536 data, response status code and response headers
    def search_objects_by_version_with_http_info(collection_name, collection_version, filter, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomStorage.search_objects_by_version ...'
      end
      # verify the required parameter 'collection_name' is set
      if @api_client.config.client_side_validation && collection_name.nil?
        fail ArgumentError, "Missing the required parameter 'collection_name' when calling CustomStorage.search_objects_by_version"
      end
      if @api_client.config.client_side_validation && collection_name.to_s.length > 255
        fail ArgumentError, 'invalid value for "collection_name" when calling CustomStorage.search_objects_by_version, the character length must be smaller than or equal to 255.'
      end

      if @api_client.config.client_side_validation && collection_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "collection_name" when calling CustomStorage.search_objects_by_version, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'collection_version' is set
      if @api_client.config.client_side_validation && collection_version.nil?
        fail ArgumentError, "Missing the required parameter 'collection_version' when calling CustomStorage.search_objects_by_version"
      end
      if @api_client.config.client_side_validation && collection_version.to_s.length > 20
        fail ArgumentError, 'invalid value for "collection_version" when calling CustomStorage.search_objects_by_version, the character length must be smaller than or equal to 20.'
      end

      if @api_client.config.client_side_validation && collection_version.to_s.length < 1
        fail ArgumentError, 'invalid value for "collection_version" when calling CustomStorage.search_objects_by_version, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'filter' is set
      if @api_client.config.client_side_validation && filter.nil?
        fail ArgumentError, "Missing the required parameter 'filter' when calling CustomStorage.search_objects_by_version"
      end
      if @api_client.config.client_side_validation && filter.to_s.length > 255
        fail ArgumentError, 'invalid value for "filter" when calling CustomStorage.search_objects_by_version, the character length must be smaller than or equal to 255.'
      end

      if @api_client.config.client_side_validation && filter.to_s.length < 1
        fail ArgumentError, 'invalid value for "filter" when calling CustomStorage.search_objects_by_version, the character length must be great than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'sort'].nil? && opts[:'sort'].to_s.length > 255
        fail ArgumentError, 'invalid value for "opts[:"sort"]" when calling CustomStorage.search_objects_by_version, the character length must be smaller than or equal to 255.'
      end

      if @api_client.config.client_side_validation && !opts[:'sort'].nil? && opts[:'sort'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"sort"]" when calling CustomStorage.search_objects_by_version, the character length must be great than or equal to 1.'
      end

      # resource path
      local_var_path = '/customobjects/v1/collections/{collection_name}/{collection_version}/objects'.sub('{' + 'collection_name' + '}', CGI.escape(collection_name.to_s)).sub('{' + 'collection_version' + '}', CGI.escape(collection_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = filter
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomType3191042536'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CustomStorage.search_objects_by_version",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomStorage#search_objects_by_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
