=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'cgi'

module Falcon
  class IntelligenceFeeds
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Downloads the content as a zip archive for a given feed item ID
    # @param feed_item_id [String] Feed ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def download_feed_archive(feed_item_id, opts = {})
      download_feed_archive_with_http_info(feed_item_id, opts)
      nil
    end

    # Downloads the content as a zip archive for a given feed item ID
    # @param feed_item_id [String] Feed ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def download_feed_archive_with_http_info(feed_item_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntelligenceFeeds.download_feed_archive ...'
      end
      # verify the required parameter 'feed_item_id' is set
      if @api_client.config.client_side_validation && feed_item_id.nil?
        fail ArgumentError, "Missing the required parameter 'feed_item_id' when calling IntelligenceFeeds.download_feed_archive"
      end
      # resource path
      local_var_path = '/indicator-feed/entities/feed-download/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'feed_item_id'] = feed_item_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IntelligenceFeeds.download_feed_archive",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntelligenceFeeds#download_feed_archive\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the accessible feed types for a given customer
    # @param [Hash] opts the optional parameters
    # @return [RestapiIndicatorGetFeedsResponse]
    def list_feed_types(opts = {})
      data, _status_code, _headers = list_feed_types_with_http_info(opts)
      data
    end

    # Lists the accessible feed types for a given customer
    # @param [Hash] opts the optional parameters
    # @return [Array<(RestapiIndicatorGetFeedsResponse, Integer, Hash)>] RestapiIndicatorGetFeedsResponse data, response status code and response headers
    def list_feed_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntelligenceFeeds.list_feed_types ...'
      end
      # resource path
      local_var_path = '/indicator-feed/entities/feed/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RestapiIndicatorGetFeedsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IntelligenceFeeds.list_feed_types",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntelligenceFeeds#list_feed_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Queries the accessible feed types for a customer. Returns a list of feed item IDs which can be later downloaded
    # @param feed_name [String] Feed Name
    # @param feed_interval [String] Feed interval must be one of: dump|daily|hourly|minutely
    # @param [Hash] opts the optional parameters
    # @option opts [String] :since Since is a valid timestamp in RFC3399 format. Restrictions: minutely: now()-2h, hourly: now()-2d, daily: now()-5d; dump: now()-7d
    # @return [RestapiIndicatorFeedQueryResponse]
    def query_feed_archives(feed_name, feed_interval, opts = {})
      data, _status_code, _headers = query_feed_archives_with_http_info(feed_name, feed_interval, opts)
      data
    end

    # Queries the accessible feed types for a customer. Returns a list of feed item IDs which can be later downloaded
    # @param feed_name [String] Feed Name
    # @param feed_interval [String] Feed interval must be one of: dump|daily|hourly|minutely
    # @param [Hash] opts the optional parameters
    # @option opts [String] :since Since is a valid timestamp in RFC3399 format. Restrictions: minutely: now()-2h, hourly: now()-2d, daily: now()-5d; dump: now()-7d
    # @return [Array<(RestapiIndicatorFeedQueryResponse, Integer, Hash)>] RestapiIndicatorFeedQueryResponse data, response status code and response headers
    def query_feed_archives_with_http_info(feed_name, feed_interval, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntelligenceFeeds.query_feed_archives ...'
      end
      # verify the required parameter 'feed_name' is set
      if @api_client.config.client_side_validation && feed_name.nil?
        fail ArgumentError, "Missing the required parameter 'feed_name' when calling IntelligenceFeeds.query_feed_archives"
      end
      # verify the required parameter 'feed_interval' is set
      if @api_client.config.client_side_validation && feed_interval.nil?
        fail ArgumentError, "Missing the required parameter 'feed_interval' when calling IntelligenceFeeds.query_feed_archives"
      end
      # resource path
      local_var_path = '/indicator-feed/queries/feed/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'feed_name'] = feed_name
      query_params[:'feed_interval'] = feed_interval
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RestapiIndicatorFeedQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"IntelligenceFeeds.query_feed_archives",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntelligenceFeeds#query_feed_archives\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
