=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'cgi'

module Falcon
  class QuickScanProApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Deletes file by its sha256 identifier.
    # @param ids [Array<String>] File&#39;s SHA256
    # @param [Hash] opts the optional parameters
    # @return [QuickscanproDeleteFileResponse]
    def delete_file(ids, opts = {})
      data, _status_code, _headers = delete_file_with_http_info(ids, opts)
      data
    end

    # Deletes file by its sha256 identifier.
    # @param ids [Array<String>] File&#39;s SHA256
    # @param [Hash] opts the optional parameters
    # @return [Array<(QuickscanproDeleteFileResponse, Integer, Hash)>] QuickscanproDeleteFileResponse data, response status code and response headers
    def delete_file_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuickScanProApi.delete_file ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling QuickScanProApi.delete_file"
      end
      # resource path
      local_var_path = '/quickscanpro/entities/files/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'QuickscanproDeleteFileResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"QuickScanProApi.delete_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuickScanProApi#delete_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes the result of an QuickScan Pro scan.
    # @param ids [Array<String>] Scan job IDs previously created by LaunchScan
    # @param [Hash] opts the optional parameters
    # @return [MsaspecQueryResponse]
    def delete_scan_result(ids, opts = {})
      data, _status_code, _headers = delete_scan_result_with_http_info(ids, opts)
      data
    end

    # Deletes the result of an QuickScan Pro scan.
    # @param ids [Array<String>] Scan job IDs previously created by LaunchScan
    # @param [Hash] opts the optional parameters
    # @return [Array<(MsaspecQueryResponse, Integer, Hash)>] MsaspecQueryResponse data, response status code and response headers
    def delete_scan_result_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuickScanProApi.delete_scan_result ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling QuickScanProApi.delete_scan_result"
      end
      # resource path
      local_var_path = '/quickscanpro/entities/scans/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaspecQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"QuickScanProApi.delete_scan_result",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuickScanProApi#delete_scan_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the result of an QuickScan Pro scan.
    # @param ids [Array<String>] Scan job IDs previously created by LaunchScan
    # @param [Hash] opts the optional parameters
    # @return [QuickscanproGetScanResultResponse]
    def get_scan_result(ids, opts = {})
      data, _status_code, _headers = get_scan_result_with_http_info(ids, opts)
      data
    end

    # Gets the result of an QuickScan Pro scan.
    # @param ids [Array<String>] Scan job IDs previously created by LaunchScan
    # @param [Hash] opts the optional parameters
    # @return [Array<(QuickscanproGetScanResultResponse, Integer, Hash)>] QuickscanproGetScanResultResponse data, response status code and response headers
    def get_scan_result_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuickScanProApi.get_scan_result ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling QuickScanProApi.get_scan_result"
      end
      # resource path
      local_var_path = '/quickscanpro/entities/scans/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'QuickscanproGetScanResultResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"QuickScanProApi.get_scan_result",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuickScanProApi#get_scan_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Starts scanning a file uploaded through '/quickscanpro/entities/files/v1'.
    # @param body [QuickscanproLaunchScanRequest]
    # @param [Hash] opts the optional parameters
    # @return [QuickscanproLaunchScanResponse]
    def launch_scan(body, opts = {})
      data, _status_code, _headers = launch_scan_with_http_info(body, opts)
      data
    end

    # Starts scanning a file uploaded through &#39;/quickscanpro/entities/files/v1&#39;.
    # @param body [QuickscanproLaunchScanRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(QuickscanproLaunchScanResponse, Integer, Hash)>] QuickscanproLaunchScanResponse data, response status code and response headers
    def launch_scan_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuickScanProApi.launch_scan ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling QuickScanProApi.launch_scan"
      end
      # resource path
      local_var_path = '/quickscanpro/entities/scans/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'QuickscanproLaunchScanResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"QuickScanProApi.launch_scan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuickScanProApi#launch_scan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # FQL query specifying the filter parameters
    # @param filter [String] Empty value means to not filter on anything Available filter fields that supports match (~): _all, mitre_attacks.description Available filter fields that supports exact match: cid,sha256,id,status,type,entity,executor,verdict,verdict_reason,verdict_source,artifacts.file_artifacts.sha256,artifacts.file_artifacts.filename,artifacts.file_artifacts.verdict,artifacts.file_artifacts.verdict_reasons,artifacts.url_artifacts.url,artifacts.url_artifacts.verdict,artifacts.url_artifacts.verdict_reasons,mitre_attacks.attack_id,mitre_attacks.attack_id_wiki,mitre_attacks.tactic,mitre_attacks.technique,mitre_attacks.capec_id,mitre_attacks.parent.attack_id,mitre_attacks.parent.attack_id_wiki,mitre_attacks.parent.technique Available filter fields that supports wildcard (*): mitre_attacks.description Available filter fields that supports range comparisons (&gt;, &lt;, &gt;&#x3D;, &lt;&#x3D;): created_timestamp, updated_timestamp All filter fields and operations supports negation (!). _all field is used to search between all fields.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The offset to start retrieving ids from.
    # @option opts [Integer] :limit Maximum number of IDs to return. Max: 5000. (default to 50)
    # @option opts [String] :sort Sort order: &#x60;asc&#x60; or &#x60;desc&#x60;. Sort supported fields &#x60;created_timestamp&#x60;
    # @return [QuickscanproQueryScanResultsResponse]
    def query_scan_results(filter, opts = {})
      data, _status_code, _headers = query_scan_results_with_http_info(filter, opts)
      data
    end

    # FQL query specifying the filter parameters
    # @param filter [String] Empty value means to not filter on anything Available filter fields that supports match (~): _all, mitre_attacks.description Available filter fields that supports exact match: cid,sha256,id,status,type,entity,executor,verdict,verdict_reason,verdict_source,artifacts.file_artifacts.sha256,artifacts.file_artifacts.filename,artifacts.file_artifacts.verdict,artifacts.file_artifacts.verdict_reasons,artifacts.url_artifacts.url,artifacts.url_artifacts.verdict,artifacts.url_artifacts.verdict_reasons,mitre_attacks.attack_id,mitre_attacks.attack_id_wiki,mitre_attacks.tactic,mitre_attacks.technique,mitre_attacks.capec_id,mitre_attacks.parent.attack_id,mitre_attacks.parent.attack_id_wiki,mitre_attacks.parent.technique Available filter fields that supports wildcard (*): mitre_attacks.description Available filter fields that supports range comparisons (&gt;, &lt;, &gt;&#x3D;, &lt;&#x3D;): created_timestamp, updated_timestamp All filter fields and operations supports negation (!). _all field is used to search between all fields.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The offset to start retrieving ids from.
    # @option opts [Integer] :limit Maximum number of IDs to return. Max: 5000. (default to 50)
    # @option opts [String] :sort Sort order: &#x60;asc&#x60; or &#x60;desc&#x60;. Sort supported fields &#x60;created_timestamp&#x60;
    # @return [Array<(QuickscanproQueryScanResultsResponse, Integer, Hash)>] QuickscanproQueryScanResultsResponse data, response status code and response headers
    def query_scan_results_with_http_info(filter, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuickScanProApi.query_scan_results ...'
      end
      # verify the required parameter 'filter' is set
      if @api_client.config.client_side_validation && filter.nil?
        fail ArgumentError, "Missing the required parameter 'filter' when calling QuickScanProApi.query_scan_results"
      end
      # resource path
      local_var_path = '/quickscanpro/queries/scans/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = filter
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'QuickscanproQueryScanResultsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"QuickScanProApi.query_scan_results",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuickScanProApi#query_scan_results\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Uploads a file to be further analyzed with QuickScan Pro. The samples expire after 90 days.
    # @param file [File] Binary file to be uploaded. Max file size: 256 MB.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :scan If true, after upload, it starts scanning immediately. Default scan mode is &#39;false&#39; (default to false)
    # @return [QuickscanproFileUploadResponse]
    def upload_file_quick_scan_pro(file, opts = {})
      data, _status_code, _headers = upload_file_quick_scan_pro_with_http_info(file, opts)
      data
    end

    # Uploads a file to be further analyzed with QuickScan Pro. The samples expire after 90 days.
    # @param file [File] Binary file to be uploaded. Max file size: 256 MB.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :scan If true, after upload, it starts scanning immediately. Default scan mode is &#39;false&#39; (default to false)
    # @return [Array<(QuickscanproFileUploadResponse, Integer, Hash)>] QuickscanproFileUploadResponse data, response status code and response headers
    def upload_file_quick_scan_pro_with_http_info(file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuickScanProApi.upload_file_quick_scan_pro ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling QuickScanProApi.upload_file_quick_scan_pro"
      end
      # resource path
      local_var_path = '/quickscanpro/entities/files/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file
      form_params['scan'] = opts[:'scan'] if !opts[:'scan'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'QuickscanproFileUploadResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"QuickScanProApi.upload_file_quick_scan_pro",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuickScanProApi#upload_file_quick_scan_pro\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
