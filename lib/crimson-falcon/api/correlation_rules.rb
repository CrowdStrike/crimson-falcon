=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'cgi'

module Falcon
  class CorrelationRules
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get rules aggregates as specified via json in the request body.
    # @param ids [Array<String>] The IDs
    # @param body [Array<Object>]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL query specifying the filter parameters
    # @return [ApiAggregatesResponseV1]
    def aggregates_rule_versions_post_v1(ids, body, opts = {})
      data, _status_code, _headers = aggregates_rule_versions_post_v1_with_http_info(ids, body, opts)
      data
    end

    # Get rules aggregates as specified via json in the request body.
    # @param ids [Array<String>] The IDs
    # @param body [Array<Object>]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL query specifying the filter parameters
    # @return [Array<(ApiAggregatesResponseV1, Integer, Hash)>] ApiAggregatesResponseV1 data, response status code and response headers
    def aggregates_rule_versions_post_v1_with_http_info(ids, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CorrelationRules.aggregates_rule_versions_post_v1 ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling CorrelationRules.aggregates_rule_versions_post_v1"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CorrelationRules.aggregates_rule_versions_post_v1"
      end
      # resource path
      local_var_path = '/correlation-rules/aggregates/rule-versions/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiAggregatesResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CorrelationRules.aggregates_rule_versions_post_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CorrelationRules#aggregates_rule_versions_post_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find all rules matching the query and filter. Supported filters: customer_id,user_id,user_uuid,status,name,created_on,last_updated_on Supported range filters: created_on,last_updated_on
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL query specifying the filter parameters
    # @option opts [String] :q Match query criteria, which includes all the filter string fields
    # @option opts [String] :sort Rule property to sort on (default to 'created_on')
    # @option opts [Integer] :offset Starting index of overall result set from which to return IDs (default to 0)
    # @option opts [Integer] :limit Number of IDs to return (default to 100)
    # @return [ApiGetEntitiesRulesResponseV1]
    def combined_rules_get_v1(opts = {})
      data, _status_code, _headers = combined_rules_get_v1_with_http_info(opts)
      data
    end

    # Find all rules matching the query and filter. Supported filters: customer_id,user_id,user_uuid,status,name,created_on,last_updated_on Supported range filters: created_on,last_updated_on
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL query specifying the filter parameters
    # @option opts [String] :q Match query criteria, which includes all the filter string fields
    # @option opts [String] :sort Rule property to sort on (default to 'created_on')
    # @option opts [Integer] :offset Starting index of overall result set from which to return IDs (default to 0)
    # @option opts [Integer] :limit Number of IDs to return (default to 100)
    # @return [Array<(ApiGetEntitiesRulesResponseV1, Integer, Hash)>] ApiGetEntitiesRulesResponseV1 data, response status code and response headers
    def combined_rules_get_v1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CorrelationRules.combined_rules_get_v1 ...'
      end
      allowable_values = ["created_on", "created_on|desc", "last_updated_on", "last_updated_on|desc"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/correlation-rules/combined/rules/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiGetEntitiesRulesResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CorrelationRules.combined_rules_get_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CorrelationRules#combined_rules_get_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find all rules matching the query and filter. Supported filters: customer_id,user_id,user_uuid,status,name,created_on,last_updated_on Supported range filters: created_on,last_updated_on
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL query specifying the filter parameters
    # @option opts [String] :q Match query criteria, which includes all the filter string fields
    # @option opts [String] :sort Rule property to sort on (default to 'created_on')
    # @option opts [Integer] :offset Starting index of overall result set from which to return IDs (default to 0)
    # @option opts [Integer] :limit Number of IDs to return (default to 100)
    # @return [ApiGetEntitiesRulesResponseV1]
    def combined_rules_get_v2(opts = {})
      data, _status_code, _headers = combined_rules_get_v2_with_http_info(opts)
      data
    end

    # Find all rules matching the query and filter. Supported filters: customer_id,user_id,user_uuid,status,name,created_on,last_updated_on Supported range filters: created_on,last_updated_on
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL query specifying the filter parameters
    # @option opts [String] :q Match query criteria, which includes all the filter string fields
    # @option opts [String] :sort Rule property to sort on (default to 'created_on')
    # @option opts [Integer] :offset Starting index of overall result set from which to return IDs (default to 0)
    # @option opts [Integer] :limit Number of IDs to return (default to 100)
    # @return [Array<(ApiGetEntitiesRulesResponseV1, Integer, Hash)>] ApiGetEntitiesRulesResponseV1 data, response status code and response headers
    def combined_rules_get_v2_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CorrelationRules.combined_rules_get_v2 ...'
      end
      allowable_values = ["created_on", "created_on|desc", "last_updated_on", "last_updated_on|desc"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/correlation-rules/combined/rules/v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiGetEntitiesRulesResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CorrelationRules.combined_rules_get_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CorrelationRules#combined_rules_get_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve latest rule versions by rule IDs
    # @param rule_ids [Array<String>] The rule IDs
    # @param [Hash] opts the optional parameters
    # @return [ApiGetEntitiesRulesResponseV1]
    def entities_latest_rules_get_v1(rule_ids, opts = {})
      data, _status_code, _headers = entities_latest_rules_get_v1_with_http_info(rule_ids, opts)
      data
    end

    # Retrieve latest rule versions by rule IDs
    # @param rule_ids [Array<String>] The rule IDs
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiGetEntitiesRulesResponseV1, Integer, Hash)>] ApiGetEntitiesRulesResponseV1 data, response status code and response headers
    def entities_latest_rules_get_v1_with_http_info(rule_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CorrelationRules.entities_latest_rules_get_v1 ...'
      end
      # verify the required parameter 'rule_ids' is set
      if @api_client.config.client_side_validation && rule_ids.nil?
        fail ArgumentError, "Missing the required parameter 'rule_ids' when calling CorrelationRules.entities_latest_rules_get_v1"
      end
      # resource path
      local_var_path = '/correlation-rules/entities/latest-rules/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'rule_ids'] = @api_client.build_collection_param(rule_ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiGetEntitiesRulesResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CorrelationRules.entities_latest_rules_get_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CorrelationRules#entities_latest_rules_get_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete versions by IDs
    # @param ids [Array<String>] The IDs
    # @param [Hash] opts the optional parameters
    # @return [MsaspecQueryResponse]
    def entities_rule_versions_delete_v1(ids, opts = {})
      data, _status_code, _headers = entities_rule_versions_delete_v1_with_http_info(ids, opts)
      data
    end

    # Delete versions by IDs
    # @param ids [Array<String>] The IDs
    # @param [Hash] opts the optional parameters
    # @return [Array<(MsaspecQueryResponse, Integer, Hash)>] MsaspecQueryResponse data, response status code and response headers
    def entities_rule_versions_delete_v1_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CorrelationRules.entities_rule_versions_delete_v1 ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling CorrelationRules.entities_rule_versions_delete_v1"
      end
      # resource path
      local_var_path = '/correlation-rules/entities/rule-versions/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaspecQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CorrelationRules.entities_rule_versions_delete_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CorrelationRules#entities_rule_versions_delete_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Export rule versions
    # @param body [ApiRuleVersionReportRequest]
    # @param [Hash] opts the optional parameters
    # @return [ApiJobLinkResponseV1]
    def entities_rule_versions_export_post_v1(body, opts = {})
      data, _status_code, _headers = entities_rule_versions_export_post_v1_with_http_info(body, opts)
      data
    end

    # Export rule versions
    # @param body [ApiRuleVersionReportRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiJobLinkResponseV1, Integer, Hash)>] ApiJobLinkResponseV1 data, response status code and response headers
    def entities_rule_versions_export_post_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CorrelationRules.entities_rule_versions_export_post_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CorrelationRules.entities_rule_versions_export_post_v1"
      end
      # resource path
      local_var_path = '/correlation-rules/entities/rule-versions/export/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiJobLinkResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CorrelationRules.entities_rule_versions_export_post_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CorrelationRules#entities_rule_versions_export_post_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Import rule versions
    # @param [Hash] opts the optional parameters
    # @return [ApiGetEntitiesRuleVersionsResponseV1]
    def entities_rule_versions_import_post_v1(opts = {})
      data, _status_code, _headers = entities_rule_versions_import_post_v1_with_http_info(opts)
      data
    end

    # Import rule versions
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiGetEntitiesRuleVersionsResponseV1, Integer, Hash)>] ApiGetEntitiesRuleVersionsResponseV1 data, response status code and response headers
    def entities_rule_versions_import_post_v1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CorrelationRules.entities_rule_versions_import_post_v1 ...'
      end
      # resource path
      local_var_path = '/correlation-rules/entities/rule-versions/import/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiGetEntitiesRuleVersionsResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CorrelationRules.entities_rule_versions_import_post_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CorrelationRules#entities_rule_versions_import_post_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Publish existing rule version
    # @param body [ApiRuleVersionPublishRequestV1]
    # @param [Hash] opts the optional parameters
    # @return [ApiGetEntitiesRuleVersionsResponseV1]
    def entities_rule_versions_publish_patch_v1(body, opts = {})
      data, _status_code, _headers = entities_rule_versions_publish_patch_v1_with_http_info(body, opts)
      data
    end

    # Publish existing rule version
    # @param body [ApiRuleVersionPublishRequestV1]
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiGetEntitiesRuleVersionsResponseV1, Integer, Hash)>] ApiGetEntitiesRuleVersionsResponseV1 data, response status code and response headers
    def entities_rule_versions_publish_patch_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CorrelationRules.entities_rule_versions_publish_patch_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CorrelationRules.entities_rule_versions_publish_patch_v1"
      end
      # resource path
      local_var_path = '/correlation-rules/entities/rule-versions/publish/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiGetEntitiesRuleVersionsResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CorrelationRules.entities_rule_versions_publish_patch_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CorrelationRules#entities_rule_versions_publish_patch_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete rules by IDs
    # @param ids [Array<String>] The IDs
    # @param [Hash] opts the optional parameters
    # @return [MsaspecQueryResponse]
    def entities_rules_delete_v1(ids, opts = {})
      data, _status_code, _headers = entities_rules_delete_v1_with_http_info(ids, opts)
      data
    end

    # Delete rules by IDs
    # @param ids [Array<String>] The IDs
    # @param [Hash] opts the optional parameters
    # @return [Array<(MsaspecQueryResponse, Integer, Hash)>] MsaspecQueryResponse data, response status code and response headers
    def entities_rules_delete_v1_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CorrelationRules.entities_rules_delete_v1 ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling CorrelationRules.entities_rules_delete_v1"
      end
      # resource path
      local_var_path = '/correlation-rules/entities/rules/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaspecQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CorrelationRules.entities_rules_delete_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CorrelationRules#entities_rules_delete_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve rules by IDs
    # @param ids [Array<String>] The IDs
    # @param [Hash] opts the optional parameters
    # @return [ApiGetEntitiesRulesResponseV1]
    def entities_rules_get_v1(ids, opts = {})
      data, _status_code, _headers = entities_rules_get_v1_with_http_info(ids, opts)
      data
    end

    # Retrieve rules by IDs
    # @param ids [Array<String>] The IDs
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiGetEntitiesRulesResponseV1, Integer, Hash)>] ApiGetEntitiesRulesResponseV1 data, response status code and response headers
    def entities_rules_get_v1_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CorrelationRules.entities_rules_get_v1 ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling CorrelationRules.entities_rules_get_v1"
      end
      # resource path
      local_var_path = '/correlation-rules/entities/rules/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiGetEntitiesRulesResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CorrelationRules.entities_rules_get_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CorrelationRules#entities_rules_get_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve rule versions by IDs
    # @param ids [Array<String>] The IDs
    # @param [Hash] opts the optional parameters
    # @return [ApiGetEntitiesRulesResponseV1]
    def entities_rules_get_v2(ids, opts = {})
      data, _status_code, _headers = entities_rules_get_v2_with_http_info(ids, opts)
      data
    end

    # Retrieve rule versions by IDs
    # @param ids [Array<String>] The IDs
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiGetEntitiesRulesResponseV1, Integer, Hash)>] ApiGetEntitiesRulesResponseV1 data, response status code and response headers
    def entities_rules_get_v2_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CorrelationRules.entities_rules_get_v2 ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling CorrelationRules.entities_rules_get_v2"
      end
      # resource path
      local_var_path = '/correlation-rules/entities/rules/v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiGetEntitiesRulesResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CorrelationRules.entities_rules_get_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CorrelationRules#entities_rules_get_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update rules
    # @param body [Array<ApiRulePatchRequestV1>]
    # @param [Hash] opts the optional parameters
    # @return [ApiGetEntitiesRulesResponseV1]
    def entities_rules_patch_v1(body, opts = {})
      data, _status_code, _headers = entities_rules_patch_v1_with_http_info(body, opts)
      data
    end

    # Update rules
    # @param body [Array<ApiRulePatchRequestV1>]
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiGetEntitiesRulesResponseV1, Integer, Hash)>] ApiGetEntitiesRulesResponseV1 data, response status code and response headers
    def entities_rules_patch_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CorrelationRules.entities_rules_patch_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CorrelationRules.entities_rules_patch_v1"
      end
      # resource path
      local_var_path = '/correlation-rules/entities/rules/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiGetEntitiesRulesResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CorrelationRules.entities_rules_patch_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CorrelationRules#entities_rules_patch_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create rule
    # @param body [ApiRuleCreateRequestV1]
    # @param [Hash] opts the optional parameters
    # @return [ApiGetEntitiesRulesResponseV1]
    def entities_rules_post_v1(body, opts = {})
      data, _status_code, _headers = entities_rules_post_v1_with_http_info(body, opts)
      data
    end

    # Create rule
    # @param body [ApiRuleCreateRequestV1]
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiGetEntitiesRulesResponseV1, Integer, Hash)>] ApiGetEntitiesRulesResponseV1 data, response status code and response headers
    def entities_rules_post_v1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CorrelationRules.entities_rules_post_v1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CorrelationRules.entities_rules_post_v1"
      end
      # resource path
      local_var_path = '/correlation-rules/entities/rules/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiGetEntitiesRulesResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CorrelationRules.entities_rules_post_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CorrelationRules#entities_rules_post_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find all rule IDs matching the query and filter. Supported filters: customer_id,user_id,user_uuid,status,name,created_on,last_updated_on Supported range filters: created_on,last_updated_on
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL query specifying the filter parameters
    # @option opts [String] :q Match query criteria, which includes all the filter string fields
    # @option opts [String] :sort Rule property to sort on (default to 'created_on')
    # @option opts [Integer] :offset Starting index of overall result set from which to return IDs (default to 0)
    # @option opts [Integer] :limit Number of IDs to return (default to 100)
    # @return [MsaspecQueryResponse]
    def queries_rules_get_v1(opts = {})
      data, _status_code, _headers = queries_rules_get_v1_with_http_info(opts)
      data
    end

    # Find all rule IDs matching the query and filter. Supported filters: customer_id,user_id,user_uuid,status,name,created_on,last_updated_on Supported range filters: created_on,last_updated_on
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL query specifying the filter parameters
    # @option opts [String] :q Match query criteria, which includes all the filter string fields
    # @option opts [String] :sort Rule property to sort on (default to 'created_on')
    # @option opts [Integer] :offset Starting index of overall result set from which to return IDs (default to 0)
    # @option opts [Integer] :limit Number of IDs to return (default to 100)
    # @return [Array<(MsaspecQueryResponse, Integer, Hash)>] MsaspecQueryResponse data, response status code and response headers
    def queries_rules_get_v1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CorrelationRules.queries_rules_get_v1 ...'
      end
      allowable_values = ["created_on", "created_on|desc", "last_updated_on", "last_updated_on|desc"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/correlation-rules/queries/rules/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaspecQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CorrelationRules.queries_rules_get_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CorrelationRules#queries_rules_get_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find all rule version IDs matching the query and filter. Supported filters: customer_id,user_id,user_uuid,status,name,created_on,last_updated_on,state,version,rule_id Supported range filters: created_on,last_updated_on
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL query specifying the filter parameters
    # @option opts [String] :q Match query criteria, which includes all the filter string fields
    # @option opts [String] :sort Rule property to sort on (default to 'created_on')
    # @option opts [Integer] :offset Starting index of overall result set from which to return IDs (default to 0)
    # @option opts [Integer] :limit Number of IDs to return (default to 100)
    # @return [MsaspecQueryResponse]
    def queries_rules_get_v2(opts = {})
      data, _status_code, _headers = queries_rules_get_v2_with_http_info(opts)
      data
    end

    # Find all rule version IDs matching the query and filter. Supported filters: customer_id,user_id,user_uuid,status,name,created_on,last_updated_on,state,version,rule_id Supported range filters: created_on,last_updated_on
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL query specifying the filter parameters
    # @option opts [String] :q Match query criteria, which includes all the filter string fields
    # @option opts [String] :sort Rule property to sort on (default to 'created_on')
    # @option opts [Integer] :offset Starting index of overall result set from which to return IDs (default to 0)
    # @option opts [Integer] :limit Number of IDs to return (default to 100)
    # @return [Array<(MsaspecQueryResponse, Integer, Hash)>] MsaspecQueryResponse data, response status code and response headers
    def queries_rules_get_v2_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CorrelationRules.queries_rules_get_v2 ...'
      end
      allowable_values = ["created_on", "created_on|desc", "last_updated_on", "last_updated_on|desc"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/correlation-rules/queries/rules/v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaspecQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CorrelationRules.queries_rules_get_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CorrelationRules#queries_rules_get_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
