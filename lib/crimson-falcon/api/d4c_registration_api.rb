=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'cgi'

module Falcon
  class D4cRegistrationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Creates a new GCP account with newly-uploaded service account or connects with existing service account with only the following fields: parent_id, parent_type and service_account_id
    # @param body [RegistrationGCPAccountExtRequestV2]
    # @param [Hash] opts the optional parameters
    # @return [RegistrationGCPAccountResponseExtV2]
    def connect_d4_cgcp_account(body, opts = {})
      data, _status_code, _headers = connect_d4_cgcp_account_with_http_info(body, opts)
      data
    end

    # Creates a new GCP account with newly-uploaded service account or connects with existing service account with only the following fields: parent_id, parent_type and service_account_id
    # @param body [RegistrationGCPAccountExtRequestV2]
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationGCPAccountResponseExtV2, Integer, Hash)>] RegistrationGCPAccountResponseExtV2 data, response status code and response headers
    def connect_d4_cgcp_account_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: D4cRegistrationApi.connect_d4_cgcp_account ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling D4cRegistrationApi.connect_d4_cgcp_account"
      end
      # resource path
      local_var_path = '/cloud-connect-gcp/entities/account/v2'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationGCPAccountResponseExtV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"D4cRegistrationApi.connect_d4_cgcp_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: D4cRegistrationApi#connect_d4_cgcp_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new account in our system for a customer and generates a script for them to run in their AWS cloud environment to grant us access.
    # @param body [RegistrationAWSAccountCreateRequestD4CExtV2]
    # @param [Hash] opts the optional parameters
    # @return [RegistrationAWSAccountResponseV2]
    def create_d4_c_aws_account(body, opts = {})
      data, _status_code, _headers = create_d4_c_aws_account_with_http_info(body, opts)
      data
    end

    # Creates a new account in our system for a customer and generates a script for them to run in their AWS cloud environment to grant us access.
    # @param body [RegistrationAWSAccountCreateRequestD4CExtV2]
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationAWSAccountResponseV2, Integer, Hash)>] RegistrationAWSAccountResponseV2 data, response status code and response headers
    def create_d4_c_aws_account_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: D4cRegistrationApi.create_d4_c_aws_account ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling D4cRegistrationApi.create_d4_c_aws_account"
      end
      # resource path
      local_var_path = '/cloud-connect-aws/entities/account/v2'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationAWSAccountResponseV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"D4cRegistrationApi.create_d4_c_aws_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: D4cRegistrationApi#create_d4_c_aws_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new account in our system for a customer and generates a new service account for them to add access to in their GCP environment to grant us access.
    # @param body [RegistrationGCPAccountCreateRequestExtV1]
    # @param [Hash] opts the optional parameters
    # @return [RegistrationGCPAccountResponseV1]
    def create_d4_cgcp_account(body, opts = {})
      data, _status_code, _headers = create_d4_cgcp_account_with_http_info(body, opts)
      data
    end

    # Creates a new account in our system for a customer and generates a new service account for them to add access to in their GCP environment to grant us access.
    # @param body [RegistrationGCPAccountCreateRequestExtV1]
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationGCPAccountResponseV1, Integer, Hash)>] RegistrationGCPAccountResponseV1 data, response status code and response headers
    def create_d4_cgcp_account_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: D4cRegistrationApi.create_d4_cgcp_account ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling D4cRegistrationApi.create_d4_cgcp_account"
      end
      # resource path
      local_var_path = '/cloud-connect-gcp/entities/account/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationGCPAccountResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"D4cRegistrationApi.create_d4_cgcp_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: D4cRegistrationApi#create_d4_cgcp_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new account in our system for a customer and generates a script for them to run in their cloud environment to grant us access.
    # @param body [RegistrationAzureAccountCreateRequestExternalV1]
    # @param [Hash] opts the optional parameters
    # @return [RegistrationAzureAccountResponseV1]
    def create_discover_cloud_azure_account(body, opts = {})
      data, _status_code, _headers = create_discover_cloud_azure_account_with_http_info(body, opts)
      data
    end

    # Creates a new account in our system for a customer and generates a script for them to run in their cloud environment to grant us access.
    # @param body [RegistrationAzureAccountCreateRequestExternalV1]
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationAzureAccountResponseV1, Integer, Hash)>] RegistrationAzureAccountResponseV1 data, response status code and response headers
    def create_discover_cloud_azure_account_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: D4cRegistrationApi.create_discover_cloud_azure_account ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling D4cRegistrationApi.create_discover_cloud_azure_account"
      end
      # resource path
      local_var_path = '/cloud-connect-azure/entities/account/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationAzureAccountResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"D4cRegistrationApi.create_discover_cloud_azure_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: D4cRegistrationApi#create_discover_cloud_azure_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes an existing AWS account or organization in our system.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :ids AWS account IDs to remove
    # @option opts [Array<String>] :organization_ids AWS organization IDs to remove
    # @return [MsaBaseEntitiesResponse]
    def delete_d4_c_aws_account(opts = {})
      data, _status_code, _headers = delete_d4_c_aws_account_with_http_info(opts)
      data
    end

    # Deletes an existing AWS account or organization in our system.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :ids AWS account IDs to remove
    # @option opts [Array<String>] :organization_ids AWS organization IDs to remove
    # @return [Array<(MsaBaseEntitiesResponse, Integer, Hash)>] MsaBaseEntitiesResponse data, response status code and response headers
    def delete_d4_c_aws_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: D4cRegistrationApi.delete_d4_c_aws_account ...'
      end
      # resource path
      local_var_path = '/cloud-connect-aws/entities/account/v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :multi) if !opts[:'ids'].nil?
      query_params[:'organization-ids'] = @api_client.build_collection_param(opts[:'organization_ids'], :multi) if !opts[:'organization_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaBaseEntitiesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"D4cRegistrationApi.delete_d4_c_aws_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: D4cRegistrationApi#delete_d4_c_aws_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a GCP account from the system.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :ids Hierarchical Resource IDs of accounts
    # @return [MsaBaseEntitiesResponse]
    def delete_d4_cgcp_account(opts = {})
      data, _status_code, _headers = delete_d4_cgcp_account_with_http_info(opts)
      data
    end

    # Deletes a GCP account from the system.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :ids Hierarchical Resource IDs of accounts
    # @return [Array<(MsaBaseEntitiesResponse, Integer, Hash)>] MsaBaseEntitiesResponse data, response status code and response headers
    def delete_d4_cgcp_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: D4cRegistrationApi.delete_d4_cgcp_account ...'
      end
      # resource path
      local_var_path = '/cloud-connect-gcp/entities/account/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :multi) if !opts[:'ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaBaseEntitiesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"D4cRegistrationApi.delete_d4_cgcp_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: D4cRegistrationApi#delete_d4_cgcp_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns JSON object(s) that contain the base64 encoded certificate for a service principal.
    # @param tenant_id [Array<String>] Azure Tenant ID
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :refresh Setting to true will invalidate the current certificate and generate a new certificate (default to false)
    # @option opts [String] :years_valid Years the certificate should be valid (only used when refresh&#x3D;true)
    # @return [RegistrationAzureDownloadCertificateResponseV1]
    def discover_cloud_azure_download_certificate(tenant_id, opts = {})
      data, _status_code, _headers = discover_cloud_azure_download_certificate_with_http_info(tenant_id, opts)
      data
    end

    # Returns JSON object(s) that contain the base64 encoded certificate for a service principal.
    # @param tenant_id [Array<String>] Azure Tenant ID
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :refresh Setting to true will invalidate the current certificate and generate a new certificate (default to false)
    # @option opts [String] :years_valid Years the certificate should be valid (only used when refresh&#x3D;true)
    # @return [Array<(RegistrationAzureDownloadCertificateResponseV1, Integer, Hash)>] RegistrationAzureDownloadCertificateResponseV1 data, response status code and response headers
    def discover_cloud_azure_download_certificate_with_http_info(tenant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: D4cRegistrationApi.discover_cloud_azure_download_certificate ...'
      end
      # verify the required parameter 'tenant_id' is set
      if @api_client.config.client_side_validation && tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'tenant_id' when calling D4cRegistrationApi.discover_cloud_azure_download_certificate"
      end
      if @api_client.config.client_side_validation && !opts[:'years_valid'].nil? && opts[:'years_valid'].to_s.length > 2
        fail ArgumentError, 'invalid value for "opts[:"years_valid"]" when calling D4cRegistrationApi.discover_cloud_azure_download_certificate, the character length must be smaller than or equal to 2.'
      end

      if @api_client.config.client_side_validation && !opts[:'years_valid'].nil? && opts[:'years_valid'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"years_valid"]" when calling D4cRegistrationApi.discover_cloud_azure_download_certificate, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^[0-9]{1,2}$/)
      if @api_client.config.client_side_validation && !opts[:'years_valid'].nil? && opts[:'years_valid'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"years_valid\"]' when calling D4cRegistrationApi.discover_cloud_azure_download_certificate, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/cloud-connect-azure/entities/download-certificate/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tenant_id'] = @api_client.build_collection_param(tenant_id, :multi)
      query_params[:'refresh'] = opts[:'refresh'] if !opts[:'refresh'].nil?
      query_params[:'years_valid'] = opts[:'years_valid'] if !opts[:'years_valid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/octet-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationAzureDownloadCertificateResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"D4cRegistrationApi.discover_cloud_azure_download_certificate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: D4cRegistrationApi#discover_cloud_azure_download_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns information about the current status of an AWS account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scan_type Type of scan, dry or full, to perform on selected accounts
    # @option opts [Array<String>] :ids AWS account IDs
    # @option opts [Array<String>] :organization_ids AWS organization IDs
    # @option opts [String] :status Account status to filter results by.
    # @option opts [Integer] :limit The maximum records to return. Defaults to 100. (default to 100)
    # @option opts [Integer] :offset The offset to start retrieving records from
    # @option opts [String] :migrated Only return migrated d4c accounts
    # @return [RegistrationAWSAccountResponseV2]
    def get_d4_c_aws_account(opts = {})
      data, _status_code, _headers = get_d4_c_aws_account_with_http_info(opts)
      data
    end

    # Returns information about the current status of an AWS account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scan_type Type of scan, dry or full, to perform on selected accounts
    # @option opts [Array<String>] :ids AWS account IDs
    # @option opts [Array<String>] :organization_ids AWS organization IDs
    # @option opts [String] :status Account status to filter results by.
    # @option opts [Integer] :limit The maximum records to return. Defaults to 100. (default to 100)
    # @option opts [Integer] :offset The offset to start retrieving records from
    # @option opts [String] :migrated Only return migrated d4c accounts
    # @return [Array<(RegistrationAWSAccountResponseV2, Integer, Hash)>] RegistrationAWSAccountResponseV2 data, response status code and response headers
    def get_d4_c_aws_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: D4cRegistrationApi.get_d4_c_aws_account ...'
      end
      if @api_client.config.client_side_validation && !opts[:'scan_type'].nil? && opts[:'scan_type'].to_s.length > 4
        fail ArgumentError, 'invalid value for "opts[:"scan_type"]" when calling D4cRegistrationApi.get_d4_c_aws_account, the character length must be smaller than or equal to 4.'
      end

      if @api_client.config.client_side_validation && !opts[:'scan_type'].nil? && opts[:'scan_type'].to_s.length < 3
        fail ArgumentError, 'invalid value for "opts[:"scan_type"]" when calling D4cRegistrationApi.get_d4_c_aws_account, the character length must be great than or equal to 3.'
      end

      pattern = Regexp.new(/^(full|dry)$/)
      if @api_client.config.client_side_validation && !opts[:'scan_type'].nil? && opts[:'scan_type'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"scan_type\"]' when calling D4cRegistrationApi.get_d4_c_aws_account, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^(provisioned|operational)$/)
      if @api_client.config.client_side_validation && !opts[:'status'].nil? && opts[:'status'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"status\"]' when calling D4cRegistrationApi.get_d4_c_aws_account, must conform to the pattern #{pattern}."
      end

      allowable_values = ["true", "false"]
      if @api_client.config.client_side_validation && opts[:'migrated'] && !allowable_values.include?(opts[:'migrated'])
        fail ArgumentError, "invalid value for \"migrated\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/cloud-connect-aws/entities/account/v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'scan-type'] = opts[:'scan_type'] if !opts[:'scan_type'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :multi) if !opts[:'ids'].nil?
      query_params[:'organization-ids'] = @api_client.build_collection_param(opts[:'organization_ids'], :multi) if !opts[:'organization_ids'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'migrated'] = opts[:'migrated'] if !opts[:'migrated'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationAWSAccountResponseV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"D4cRegistrationApi.get_d4_c_aws_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: D4cRegistrationApi#get_d4_c_aws_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return a URL for customer to visit in their cloud environment to grant us access to their AWS environment.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :region Region
    # @return [RegistrationAWSAccountConsoleURL]
    def get_d4_c_aws_console_setup_urls(opts = {})
      data, _status_code, _headers = get_d4_c_aws_console_setup_urls_with_http_info(opts)
      data
    end

    # Return a URL for customer to visit in their cloud environment to grant us access to their AWS environment.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :region Region
    # @return [Array<(RegistrationAWSAccountConsoleURL, Integer, Hash)>] RegistrationAWSAccountConsoleURL data, response status code and response headers
    def get_d4_c_aws_console_setup_urls_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: D4cRegistrationApi.get_d4_c_aws_console_setup_urls ...'
      end
      pattern = Regexp.new(/^[0-9a-z-]{2,}$/)
      if @api_client.config.client_side_validation && !opts[:'region'].nil? && opts[:'region'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"region\"]' when calling D4cRegistrationApi.get_d4_c_aws_console_setup_urls, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/cloud-connect-aws/entities/console-setup-urls/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'region'] = opts[:'region'] if !opts[:'region'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationAWSAccountConsoleURL'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"D4cRegistrationApi.get_d4_c_aws_console_setup_urls",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: D4cRegistrationApi#get_d4_c_aws_console_setup_urls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return a script for customer to run in their cloud environment to grant us access to their AWS environment as a downloadable attachment.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :ids AWS account IDs
    # @return [RegistrationAWSProvisionGetAccountScriptResponseV2]
    def get_d4_caws_account_scripts_attachment(opts = {})
      data, _status_code, _headers = get_d4_caws_account_scripts_attachment_with_http_info(opts)
      data
    end

    # Return a script for customer to run in their cloud environment to grant us access to their AWS environment as a downloadable attachment.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :ids AWS account IDs
    # @return [Array<(RegistrationAWSProvisionGetAccountScriptResponseV2, Integer, Hash)>] RegistrationAWSProvisionGetAccountScriptResponseV2 data, response status code and response headers
    def get_d4_caws_account_scripts_attachment_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: D4cRegistrationApi.get_d4_caws_account_scripts_attachment ...'
      end
      # resource path
      local_var_path = '/cloud-connect-aws/entities/user-scripts-download/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :multi) if !opts[:'ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/octet-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationAWSProvisionGetAccountScriptResponseV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"D4cRegistrationApi.get_d4_caws_account_scripts_attachment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: D4cRegistrationApi#get_d4_caws_account_scripts_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns information about the current status of an GCP account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :parent_type GCP Hierarchy Parent Type, organization/folder/project
    # @option opts [Array<String>] :ids Hierarchical Resource IDs of accounts
    # @option opts [String] :scan_type Type of scan, dry or full, to perform on selected accounts
    # @option opts [String] :status Account status to filter results by.
    # @option opts [Integer] :limit The maximum records to return. Defaults to 100. (default to 100)
    # @option opts [Integer] :offset The offset to start retrieving records from
    # @option opts [String] :sort Order fields in ascending or descending order. Ex: parent_type|asc.
    # @return [RegistrationGCPAccountResponseV1]
    def get_d4_ccgp_account(opts = {})
      data, _status_code, _headers = get_d4_ccgp_account_with_http_info(opts)
      data
    end

    # Returns information about the current status of an GCP account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :parent_type GCP Hierarchy Parent Type, organization/folder/project
    # @option opts [Array<String>] :ids Hierarchical Resource IDs of accounts
    # @option opts [String] :scan_type Type of scan, dry or full, to perform on selected accounts
    # @option opts [String] :status Account status to filter results by.
    # @option opts [Integer] :limit The maximum records to return. Defaults to 100. (default to 100)
    # @option opts [Integer] :offset The offset to start retrieving records from
    # @option opts [String] :sort Order fields in ascending or descending order. Ex: parent_type|asc.
    # @return [Array<(RegistrationGCPAccountResponseV1, Integer, Hash)>] RegistrationGCPAccountResponseV1 data, response status code and response headers
    def get_d4_ccgp_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: D4cRegistrationApi.get_d4_ccgp_account ...'
      end
      allowable_values = ["Folder", "Organization", "Project"]
      if @api_client.config.client_side_validation && opts[:'parent_type'] && !allowable_values.include?(opts[:'parent_type'])
        fail ArgumentError, "invalid value for \"parent_type\", must be one of #{allowable_values}"
      end
      allowable_values = ["dry", "full"]
      if @api_client.config.client_side_validation && opts[:'scan_type'] && !allowable_values.include?(opts[:'scan_type'])
        fail ArgumentError, "invalid value for \"scan_type\", must be one of #{allowable_values}"
      end
      allowable_values = ["operational", "provisioned"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/cloud-connect-gcp/entities/account/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'parent_type'] = opts[:'parent_type'] if !opts[:'parent_type'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :multi) if !opts[:'ids'].nil?
      query_params[:'scan-type'] = opts[:'scan_type'] if !opts[:'scan_type'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationGCPAccountResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"D4cRegistrationApi.get_d4_ccgp_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: D4cRegistrationApi#get_d4_ccgp_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the service account id and client email for external clients.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Service Account ID
    # @return [RegistrationGCPServiceAccountResponseExtV1]
    def get_d4_cgcp_service_accounts_ext(opts = {})
      data, _status_code, _headers = get_d4_cgcp_service_accounts_ext_with_http_info(opts)
      data
    end

    # Returns the service account id and client email for external clients.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Service Account ID
    # @return [Array<(RegistrationGCPServiceAccountResponseExtV1, Integer, Hash)>] RegistrationGCPServiceAccountResponseExtV1 data, response status code and response headers
    def get_d4_cgcp_service_accounts_ext_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: D4cRegistrationApi.get_d4_cgcp_service_accounts_ext ...'
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && !opts[:'id'].nil? && opts[:'id'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"id\"]' when calling D4cRegistrationApi.get_d4_cgcp_service_accounts_ext, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/cloud-connect-gcp/entities/service-accounts/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationGCPServiceAccountResponseExtV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"D4cRegistrationApi.get_d4_cgcp_service_accounts_ext",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: D4cRegistrationApi#get_d4_cgcp_service_accounts_ext\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return a script for customer to run in their cloud environment to grant us access to their GCP environment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :parent_type GCP Hierarchy Parent Type, organization/folder/project
    # @return [RegistrationGCPProvisionGetUserScriptResponseV1]
    def get_d4_cgcp_user_scripts(opts = {})
      data, _status_code, _headers = get_d4_cgcp_user_scripts_with_http_info(opts)
      data
    end

    # Return a script for customer to run in their cloud environment to grant us access to their GCP environment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :parent_type GCP Hierarchy Parent Type, organization/folder/project
    # @return [Array<(RegistrationGCPProvisionGetUserScriptResponseV1, Integer, Hash)>] RegistrationGCPProvisionGetUserScriptResponseV1 data, response status code and response headers
    def get_d4_cgcp_user_scripts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: D4cRegistrationApi.get_d4_cgcp_user_scripts ...'
      end
      allowable_values = ["Folder", "Organization", "Project"]
      if @api_client.config.client_side_validation && opts[:'parent_type'] && !allowable_values.include?(opts[:'parent_type'])
        fail ArgumentError, "invalid value for \"parent_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/cloud-connect-gcp/entities/user-scripts/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'parent_type'] = opts[:'parent_type'] if !opts[:'parent_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationGCPProvisionGetUserScriptResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"D4cRegistrationApi.get_d4_cgcp_user_scripts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: D4cRegistrationApi#get_d4_cgcp_user_scripts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return a script for customer to run in their cloud environment to grant us access to their GCP environment as a downloadable attachment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :parent_type GCP Hierarchy Parent Type, organization/folder/project
    # @option opts [Array<String>] :ids Hierarchical Resource IDs of accounts
    # @option opts [String] :status Account status to filter results by.
    # @return [RegistrationGCPProvisionGetUserScriptResponseV1]
    def get_d4_cgcp_user_scripts_attachment(opts = {})
      data, _status_code, _headers = get_d4_cgcp_user_scripts_attachment_with_http_info(opts)
      data
    end

    # Return a script for customer to run in their cloud environment to grant us access to their GCP environment as a downloadable attachment
    # @param [Hash] opts the optional parameters
    # @option opts [String] :parent_type GCP Hierarchy Parent Type, organization/folder/project
    # @option opts [Array<String>] :ids Hierarchical Resource IDs of accounts
    # @option opts [String] :status Account status to filter results by.
    # @return [Array<(RegistrationGCPProvisionGetUserScriptResponseV1, Integer, Hash)>] RegistrationGCPProvisionGetUserScriptResponseV1 data, response status code and response headers
    def get_d4_cgcp_user_scripts_attachment_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: D4cRegistrationApi.get_d4_cgcp_user_scripts_attachment ...'
      end
      allowable_values = ["Folder", "Organization", "Project"]
      if @api_client.config.client_side_validation && opts[:'parent_type'] && !allowable_values.include?(opts[:'parent_type'])
        fail ArgumentError, "invalid value for \"parent_type\", must be one of #{allowable_values}"
      end
      allowable_values = ["operational", "provisioned"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/cloud-connect-gcp/entities/user-scripts-download/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'parent_type'] = opts[:'parent_type'] if !opts[:'parent_type'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :multi) if !opts[:'ids'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/octet-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationGCPProvisionGetUserScriptResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"D4cRegistrationApi.get_d4_cgcp_user_scripts_attachment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: D4cRegistrationApi#get_d4_cgcp_user_scripts_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return information about Azure account registration
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :ids SubscriptionIDs of accounts to select for this status operation. If this is empty then all accounts are returned.
    # @option opts [Array<String>] :tenant_ids Tenant ids to filter azure accounts
    # @option opts [String] :scan_type Type of scan, dry or full, to perform on selected accounts
    # @option opts [String] :status Account status to filter results by.
    # @option opts [Integer] :limit The maximum records to return. Defaults to 100. (default to 100)
    # @option opts [Integer] :offset The offset to start retrieving records from
    # @return [RegistrationAzureAccountResponseV1]
    def get_discover_cloud_azure_account(opts = {})
      data, _status_code, _headers = get_discover_cloud_azure_account_with_http_info(opts)
      data
    end

    # Return information about Azure account registration
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :ids SubscriptionIDs of accounts to select for this status operation. If this is empty then all accounts are returned.
    # @option opts [Array<String>] :tenant_ids Tenant ids to filter azure accounts
    # @option opts [String] :scan_type Type of scan, dry or full, to perform on selected accounts
    # @option opts [String] :status Account status to filter results by.
    # @option opts [Integer] :limit The maximum records to return. Defaults to 100. (default to 100)
    # @option opts [Integer] :offset The offset to start retrieving records from
    # @return [Array<(RegistrationAzureAccountResponseV1, Integer, Hash)>] RegistrationAzureAccountResponseV1 data, response status code and response headers
    def get_discover_cloud_azure_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: D4cRegistrationApi.get_discover_cloud_azure_account ...'
      end
      if @api_client.config.client_side_validation && !opts[:'scan_type'].nil? && opts[:'scan_type'].to_s.length > 4
        fail ArgumentError, 'invalid value for "opts[:"scan_type"]" when calling D4cRegistrationApi.get_discover_cloud_azure_account, the character length must be smaller than or equal to 4.'
      end

      if @api_client.config.client_side_validation && !opts[:'scan_type'].nil? && opts[:'scan_type'].to_s.length < 3
        fail ArgumentError, 'invalid value for "opts[:"scan_type"]" when calling D4cRegistrationApi.get_discover_cloud_azure_account, the character length must be great than or equal to 3.'
      end

      pattern = Regexp.new(/^(full|dry)$/)
      if @api_client.config.client_side_validation && !opts[:'scan_type'].nil? && opts[:'scan_type'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"scan_type\"]' when calling D4cRegistrationApi.get_discover_cloud_azure_account, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^(provisioned|operational)$/)
      if @api_client.config.client_side_validation && !opts[:'status'].nil? && opts[:'status'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"status\"]' when calling D4cRegistrationApi.get_discover_cloud_azure_account, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/cloud-connect-azure/entities/account/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :multi) if !opts[:'ids'].nil?
      query_params[:'tenant_ids'] = @api_client.build_collection_param(opts[:'tenant_ids'], :multi) if !opts[:'tenant_ids'].nil?
      query_params[:'scan-type'] = opts[:'scan_type'] if !opts[:'scan_type'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationAzureAccountResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"D4cRegistrationApi.get_discover_cloud_azure_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: D4cRegistrationApi#get_discover_cloud_azure_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return available tenant ids for discover for cloud
    # @param [Hash] opts the optional parameters
    # @return [RegistrationAzureTenantIDsResponseV1]
    def get_discover_cloud_azure_tenant_ids(opts = {})
      data, _status_code, _headers = get_discover_cloud_azure_tenant_ids_with_http_info(opts)
      data
    end

    # Return available tenant ids for discover for cloud
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationAzureTenantIDsResponseV1, Integer, Hash)>] RegistrationAzureTenantIDsResponseV1 data, response status code and response headers
    def get_discover_cloud_azure_tenant_ids_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: D4cRegistrationApi.get_discover_cloud_azure_tenant_ids ...'
      end
      # resource path
      local_var_path = '/cloud-connect-azure/entities/tenant-id/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationAzureTenantIDsResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"D4cRegistrationApi.get_discover_cloud_azure_tenant_ids",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: D4cRegistrationApi#get_discover_cloud_azure_tenant_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return a script for customer to run in their cloud environment to grant us access to their Azure environment
    # @param [Hash] opts the optional parameters
    # @return [RegistrationAzureProvisionGetUserScriptResponseV1]
    def get_discover_cloud_azure_user_scripts(opts = {})
      data, _status_code, _headers = get_discover_cloud_azure_user_scripts_with_http_info(opts)
      data
    end

    # Return a script for customer to run in their cloud environment to grant us access to their Azure environment
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationAzureProvisionGetUserScriptResponseV1, Integer, Hash)>] RegistrationAzureProvisionGetUserScriptResponseV1 data, response status code and response headers
    def get_discover_cloud_azure_user_scripts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: D4cRegistrationApi.get_discover_cloud_azure_user_scripts ...'
      end
      # resource path
      local_var_path = '/cloud-connect-azure/entities/user-scripts/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationAzureProvisionGetUserScriptResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"D4cRegistrationApi.get_discover_cloud_azure_user_scripts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: D4cRegistrationApi#get_discover_cloud_azure_user_scripts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return a script for customer to run in their cloud environment to grant us access to their Azure environment as a downloadable attachment
    # @param tenant_id [Array<String>] Azure Tenant ID
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :subscription_ids Azure Subscription ID
    # @option opts [String] :template Template to be rendered
    # @option opts [Boolean] :azure_management_group Use Azure Management Group
    # @return [RegistrationAzureProvisionGetUserScriptResponseV1]
    def get_discover_cloud_azure_user_scripts_attachment(tenant_id, opts = {})
      data, _status_code, _headers = get_discover_cloud_azure_user_scripts_attachment_with_http_info(tenant_id, opts)
      data
    end

    # Return a script for customer to run in their cloud environment to grant us access to their Azure environment as a downloadable attachment
    # @param tenant_id [Array<String>] Azure Tenant ID
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :subscription_ids Azure Subscription ID
    # @option opts [String] :template Template to be rendered
    # @option opts [Boolean] :azure_management_group Use Azure Management Group
    # @return [Array<(RegistrationAzureProvisionGetUserScriptResponseV1, Integer, Hash)>] RegistrationAzureProvisionGetUserScriptResponseV1 data, response status code and response headers
    def get_discover_cloud_azure_user_scripts_attachment_with_http_info(tenant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: D4cRegistrationApi.get_discover_cloud_azure_user_scripts_attachment ...'
      end
      # verify the required parameter 'tenant_id' is set
      if @api_client.config.client_side_validation && tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'tenant_id' when calling D4cRegistrationApi.get_discover_cloud_azure_user_scripts_attachment"
      end
      # resource path
      local_var_path = '/cloud-connect-azure/entities/user-scripts-download/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tenant-id'] = @api_client.build_collection_param(tenant_id, :csv)
      query_params[:'subscription_ids'] = @api_client.build_collection_param(opts[:'subscription_ids'], :csv) if !opts[:'subscription_ids'].nil?
      query_params[:'template'] = opts[:'template'] if !opts[:'template'].nil?
      query_params[:'azure_management_group'] = opts[:'azure_management_group'] if !opts[:'azure_management_group'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/octet-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationAzureProvisionGetUserScriptResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"D4cRegistrationApi.get_discover_cloud_azure_user_scripts_attachment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: D4cRegistrationApi#get_discover_cloud_azure_user_scripts_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns static install scripts for Horizon.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :single_account Get static script for single account
    # @option opts [String] :organization_id AWS organization ID
    # @option opts [String] :delete
    # @option opts [String] :account_type Account type (e.g.: commercial,gov) Only applicable when registering AWS commercial account in a Gov environment
    # @return [RegistrationStaticScriptsResponse]
    def get_horizon_d4_c_scripts(opts = {})
      data, _status_code, _headers = get_horizon_d4_c_scripts_with_http_info(opts)
      data
    end

    # Returns static install scripts for Horizon.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :single_account Get static script for single account
    # @option opts [String] :organization_id AWS organization ID
    # @option opts [String] :delete
    # @option opts [String] :account_type Account type (e.g.: commercial,gov) Only applicable when registering AWS commercial account in a Gov environment
    # @return [Array<(RegistrationStaticScriptsResponse, Integer, Hash)>] RegistrationStaticScriptsResponse data, response status code and response headers
    def get_horizon_d4_c_scripts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: D4cRegistrationApi.get_horizon_d4_c_scripts ...'
      end
      allowable_values = ["false", "true"]
      if @api_client.config.client_side_validation && opts[:'single_account'] && !allowable_values.include?(opts[:'single_account'])
        fail ArgumentError, "invalid value for \"single_account\", must be one of #{allowable_values}"
      end
      pattern = Regexp.new(/^(true|false)$/)
      if @api_client.config.client_side_validation && !opts[:'single_account'].nil? && opts[:'single_account'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"single_account\"]' when calling D4cRegistrationApi.get_horizon_d4_c_scripts, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^o-[0-9a-z]{10,32}$/)
      if @api_client.config.client_side_validation && !opts[:'organization_id'].nil? && opts[:'organization_id'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"organization_id\"]' when calling D4cRegistrationApi.get_horizon_d4_c_scripts, must conform to the pattern #{pattern}."
      end

      allowable_values = ["false", "true"]
      if @api_client.config.client_side_validation && opts[:'delete'] && !allowable_values.include?(opts[:'delete'])
        fail ArgumentError, "invalid value for \"delete\", must be one of #{allowable_values}"
      end
      pattern = Regexp.new(/^(true|false)$/)
      if @api_client.config.client_side_validation && !opts[:'delete'].nil? && opts[:'delete'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"delete\"]' when calling D4cRegistrationApi.get_horizon_d4_c_scripts, must conform to the pattern #{pattern}."
      end

      allowable_values = ["commercial", "gov"]
      if @api_client.config.client_side_validation && opts[:'account_type'] && !allowable_values.include?(opts[:'account_type'])
        fail ArgumentError, "invalid value for \"account_type\", must be one of #{allowable_values}"
      end
      pattern = Regexp.new(/^(commercial|gov)$/)
      if @api_client.config.client_side_validation && !opts[:'account_type'].nil? && opts[:'account_type'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"account_type\"]' when calling D4cRegistrationApi.get_horizon_d4_c_scripts, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/settings-discover/entities/gen/scripts/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'single_account'] = opts[:'single_account'] if !opts[:'single_account'].nil?
      query_params[:'organization-id'] = opts[:'organization_id'] if !opts[:'organization_id'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'account_type'] = opts[:'account_type'] if !opts[:'account_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationStaticScriptsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"D4cRegistrationApi.get_horizon_d4_c_scripts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: D4cRegistrationApi#get_horizon_d4_c_scripts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an Azure service account in our system by with the user-created client_id created with the public key we've provided
    # @param id [String] ClientID to use for the Service Principal associated with the customer&#39;s Azure account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :object_id Object ID to use for the Service Principal associated with the customer&#39;s Azure account
    # @option opts [String] :tenant_id Tenant ID to update client ID for. Required if multiple tenants are registered.
    # @return [RegistrationAzureTenantConfigurationResponseV1]
    def update_discover_cloud_azure_account_client_id(id, opts = {})
      data, _status_code, _headers = update_discover_cloud_azure_account_client_id_with_http_info(id, opts)
      data
    end

    # Update an Azure service account in our system by with the user-created client_id created with the public key we&#39;ve provided
    # @param id [String] ClientID to use for the Service Principal associated with the customer&#39;s Azure account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :object_id Object ID to use for the Service Principal associated with the customer&#39;s Azure account
    # @option opts [String] :tenant_id Tenant ID to update client ID for. Required if multiple tenants are registered.
    # @return [Array<(RegistrationAzureTenantConfigurationResponseV1, Integer, Hash)>] RegistrationAzureTenantConfigurationResponseV1 data, response status code and response headers
    def update_discover_cloud_azure_account_client_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: D4cRegistrationApi.update_discover_cloud_azure_account_client_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling D4cRegistrationApi.update_discover_cloud_azure_account_client_id"
      end
      if @api_client.config.client_side_validation && id.to_s.length > 36
        fail ArgumentError, 'invalid value for "id" when calling D4cRegistrationApi.update_discover_cloud_azure_account_client_id, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && id.to_s.length < 36
        fail ArgumentError, 'invalid value for "id" when calling D4cRegistrationApi.update_discover_cloud_azure_account_client_id, the character length must be great than or equal to 36.'
      end

      pattern = Regexp.new(/^[0-9a-z-]{36}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        fail ArgumentError, "invalid value for 'id' when calling D4cRegistrationApi.update_discover_cloud_azure_account_client_id, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'object_id'].nil? && opts[:'object_id'].to_s.length > 36
        fail ArgumentError, 'invalid value for "opts[:"object_id"]" when calling D4cRegistrationApi.update_discover_cloud_azure_account_client_id, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && !opts[:'object_id'].nil? && opts[:'object_id'].to_s.length < 36
        fail ArgumentError, 'invalid value for "opts[:"object_id"]" when calling D4cRegistrationApi.update_discover_cloud_azure_account_client_id, the character length must be great than or equal to 36.'
      end

      pattern = Regexp.new(/^[0-9a-z-]{36}$/)
      if @api_client.config.client_side_validation && !opts[:'object_id'].nil? && opts[:'object_id'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"object_id\"]' when calling D4cRegistrationApi.update_discover_cloud_azure_account_client_id, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'tenant_id'].nil? && opts[:'tenant_id'].to_s.length > 36
        fail ArgumentError, 'invalid value for "opts[:"tenant_id"]" when calling D4cRegistrationApi.update_discover_cloud_azure_account_client_id, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && !opts[:'tenant_id'].nil? && opts[:'tenant_id'].to_s.length < 36
        fail ArgumentError, 'invalid value for "opts[:"tenant_id"]" when calling D4cRegistrationApi.update_discover_cloud_azure_account_client_id, the character length must be great than or equal to 36.'
      end

      pattern = Regexp.new(/^[0-9a-z-]{36}$/)
      if @api_client.config.client_side_validation && !opts[:'tenant_id'].nil? && opts[:'tenant_id'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"tenant_id\"]' when calling D4cRegistrationApi.update_discover_cloud_azure_account_client_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/cloud-connect-azure/entities/client-id/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'object_id'] = opts[:'object_id'] if !opts[:'object_id'].nil?
      query_params[:'tenant-id'] = opts[:'tenant_id'] if !opts[:'tenant_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegistrationAzureTenantConfigurationResponseV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"D4cRegistrationApi.update_discover_cloud_azure_account_client_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: D4cRegistrationApi#update_discover_cloud_azure_account_client_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
