=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'cgi'

module Falcon
  class Workflows
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Search for activities by name. Returns all supported activities if no filter specified
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL query specifying filter parameters.
    # @option opts [String] :offset Starting pagination offset of records to return.
    # @option opts [Integer] :limit Maximum number of records to return.
    # @option opts [String] :sort Sort items by providing a comma separated list of property and direction (eg name.desc,time.asc). If direction is omitted, defaults to descending.
    # @return [ActivitiesActivityExternalResponse]
    def workflow_activities_combined(opts = {})
      data, _status_code, _headers = workflow_activities_combined_with_http_info(opts)
      data
    end

    # Search for activities by name. Returns all supported activities if no filter specified
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL query specifying filter parameters.
    # @option opts [String] :offset Starting pagination offset of records to return.
    # @option opts [Integer] :limit Maximum number of records to return.
    # @option opts [String] :sort Sort items by providing a comma separated list of property and direction (eg name.desc,time.asc). If direction is omitted, defaults to descending.
    # @return [Array<(ActivitiesActivityExternalResponse, Integer, Hash)>] ActivitiesActivityExternalResponse data, response status code and response headers
    def workflow_activities_combined_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Workflows.workflow_activities_combined ...'
      end
      pattern = Regexp.new(/^\w+(\.asc|\.desc)?(,\w+(\.asc|\.desc)?)*$/)
      if @api_client.config.client_side_validation && !opts[:'sort'].nil? && opts[:'sort'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"sort\"]' when calling Workflows.workflow_activities_combined, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/workflows/combined/activities/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActivitiesActivityExternalResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Workflows.workflow_activities_combined",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Workflows#workflow_activities_combined\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search for activities by name. Returns all supported activities if no filter specified
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL query specifying filter parameters.
    # @option opts [String] :offset Starting pagination offset of records to return.
    # @option opts [Integer] :limit Maximum number of records to return.
    # @option opts [String] :sort Sort items by providing a comma separated list of property and direction (eg name.desc,time.asc). If direction is omitted, defaults to descending.
    # @return [ActivitiesActivityExternalResponse]
    def workflow_activities_content_combined(opts = {})
      data, _status_code, _headers = workflow_activities_content_combined_with_http_info(opts)
      data
    end

    # Search for activities by name. Returns all supported activities if no filter specified
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL query specifying filter parameters.
    # @option opts [String] :offset Starting pagination offset of records to return.
    # @option opts [Integer] :limit Maximum number of records to return.
    # @option opts [String] :sort Sort items by providing a comma separated list of property and direction (eg name.desc,time.asc). If direction is omitted, defaults to descending.
    # @return [Array<(ActivitiesActivityExternalResponse, Integer, Hash)>] ActivitiesActivityExternalResponse data, response status code and response headers
    def workflow_activities_content_combined_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Workflows.workflow_activities_content_combined ...'
      end
      pattern = Regexp.new(/^\w+(\.asc|\.desc)?(,\w+(\.asc|\.desc)?)*$/)
      if @api_client.config.client_side_validation && !opts[:'sort'].nil? && opts[:'sort'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"sort\"]' when calling Workflows.workflow_activities_content_combined, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/workflows/combined/activity-content/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActivitiesActivityExternalResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Workflows.workflow_activities_content_combined",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Workflows#workflow_activities_content_combined\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search workflow definitions based on the provided filter
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL query specifying filter parameters.
    # @option opts [String] :offset Starting pagination offset of records to return.
    # @option opts [Integer] :limit Maximum number of records to return.
    # @option opts [String] :sort Sort items by providing a comma separated list of property and direction (eg name.desc,time.asc). If direction is omitted, defaults to descending.
    # @return [DefinitionsDefinitionExternalResponse]
    def workflow_definitions_combined(opts = {})
      data, _status_code, _headers = workflow_definitions_combined_with_http_info(opts)
      data
    end

    # Search workflow definitions based on the provided filter
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL query specifying filter parameters.
    # @option opts [String] :offset Starting pagination offset of records to return.
    # @option opts [Integer] :limit Maximum number of records to return.
    # @option opts [String] :sort Sort items by providing a comma separated list of property and direction (eg name.desc,time.asc). If direction is omitted, defaults to descending.
    # @return [Array<(DefinitionsDefinitionExternalResponse, Integer, Hash)>] DefinitionsDefinitionExternalResponse data, response status code and response headers
    def workflow_definitions_combined_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Workflows.workflow_definitions_combined ...'
      end
      pattern = Regexp.new(/^\w+(\.asc|\.desc)?(,\w+(\.asc|\.desc)?)*$/)
      if @api_client.config.client_side_validation && !opts[:'sort'].nil? && opts[:'sort'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"sort\"]' when calling Workflows.workflow_definitions_combined, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/workflows/combined/definitions/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/yaml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefinitionsDefinitionExternalResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Workflows.workflow_definitions_combined",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Workflows#workflow_definitions_combined\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Exports a workflow definition for the given definition ID
    # @param id [String] ID of workflow definitions to return details for
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :sanitize whether or not to sanitize PII from workflow before it&#39;s exported (default to true)
    # @return [Array<Integer>]
    def workflow_definitions_export(id, opts = {})
      data, _status_code, _headers = workflow_definitions_export_with_http_info(id, opts)
      data
    end

    # Exports a workflow definition for the given definition ID
    # @param id [String] ID of workflow definitions to return details for
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :sanitize whether or not to sanitize PII from workflow before it&#39;s exported (default to true)
    # @return [Array<(Array<Integer>, Integer, Hash)>] Array<Integer> data, response status code and response headers
    def workflow_definitions_export_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Workflows.workflow_definitions_export ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling Workflows.workflow_definitions_export"
      end
      if @api_client.config.client_side_validation && id.to_s.length > 40
        fail ArgumentError, 'invalid value for "id" when calling Workflows.workflow_definitions_export, the character length must be smaller than or equal to 40.'
      end

      if @api_client.config.client_side_validation && id.to_s.length < 32
        fail ArgumentError, 'invalid value for "id" when calling Workflows.workflow_definitions_export, the character length must be great than or equal to 32.'
      end

      # resource path
      local_var_path = '/workflows/entities/definitions/export/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'sanitize'] = opts[:'sanitize'] if !opts[:'sanitize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/yaml', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Integer>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Workflows.workflow_definitions_export",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Workflows#workflow_definitions_export\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Imports a workflow definition based on the provided model
    # @param data_file [File] A workflow definition in YAML format to import
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Workflow name to override
    # @option opts [Boolean] :validate_only When enabled, prevents saving workflow after validating (default to false)
    # @return [DefinitionsDefinitionImportResponse]
    def workflow_definitions_import(data_file, opts = {})
      data, _status_code, _headers = workflow_definitions_import_with_http_info(data_file, opts)
      data
    end

    # Imports a workflow definition based on the provided model
    # @param data_file [File] A workflow definition in YAML format to import
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Workflow name to override
    # @option opts [Boolean] :validate_only When enabled, prevents saving workflow after validating (default to false)
    # @return [Array<(DefinitionsDefinitionImportResponse, Integer, Hash)>] DefinitionsDefinitionImportResponse data, response status code and response headers
    def workflow_definitions_import_with_http_info(data_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Workflows.workflow_definitions_import ...'
      end
      # verify the required parameter 'data_file' is set
      if @api_client.config.client_side_validation && data_file.nil?
        fail ArgumentError, "Missing the required parameter 'data_file' when calling Workflows.workflow_definitions_import"
      end
      # resource path
      local_var_path = '/workflows/entities/definitions/import/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'validate_only'] = opts[:'validate_only'] if !opts[:'validate_only'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['data_file'] = data_file

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefinitionsDefinitionImportResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Workflows.workflow_definitions_import",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Workflows#workflow_definitions_import\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a workflow definition based on the provided model
    # @param body [ModelsDefinitionUpdateRequestV2]
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :validate_only When enabled, prevents saving workflow after validating (default to false)
    # @return [ApiResourceIDsResponse]
    def workflow_definitions_update(body, opts = {})
      data, _status_code, _headers = workflow_definitions_update_with_http_info(body, opts)
      data
    end

    # Updates a workflow definition based on the provided model
    # @param body [ModelsDefinitionUpdateRequestV2]
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :validate_only When enabled, prevents saving workflow after validating (default to false)
    # @return [Array<(ApiResourceIDsResponse, Integer, Hash)>] ApiResourceIDsResponse data, response status code and response headers
    def workflow_definitions_update_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Workflows.workflow_definitions_update ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling Workflows.workflow_definitions_update"
      end
      # resource path
      local_var_path = '/workflows/entities/definitions/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'validate_only'] = opts[:'validate_only'] if !opts[:'validate_only'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/yaml'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiResourceIDsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Workflows.workflow_definitions_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Workflows#workflow_definitions_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Executes an on-demand Workflow, the body is JSON used to trigger the execution, the response the execution ID(s)
    # @param body [Object]
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :execution_cid CID(s) to execute on. This can be a child if this is a flight control enabled definition. If unset the definition CID is used.
    # @option opts [Array<String>] :definition_id Definition ID to execute, either a name or an ID can be specified.
    # @option opts [String] :name Workflow name to execute, either a name or an ID can be specified.
    # @option opts [String] :key Key used to help deduplicate executions, if unset a new UUID is used
    # @option opts [Integer] :depth Used to record the execution depth to help limit execution loops when a workflow triggers another. The maximum depth is 4.
    # @option opts [String] :source_event_url Used to record a URL to the source that led to triggering this workflow
    # @return [ApiResourceIDsResponse]
    def workflow_execute(body, opts = {})
      data, _status_code, _headers = workflow_execute_with_http_info(body, opts)
      data
    end

    # Executes an on-demand Workflow, the body is JSON used to trigger the execution, the response the execution ID(s)
    # @param body [Object]
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :execution_cid CID(s) to execute on. This can be a child if this is a flight control enabled definition. If unset the definition CID is used.
    # @option opts [Array<String>] :definition_id Definition ID to execute, either a name or an ID can be specified.
    # @option opts [String] :name Workflow name to execute, either a name or an ID can be specified.
    # @option opts [String] :key Key used to help deduplicate executions, if unset a new UUID is used
    # @option opts [Integer] :depth Used to record the execution depth to help limit execution loops when a workflow triggers another. The maximum depth is 4.
    # @option opts [String] :source_event_url Used to record a URL to the source that led to triggering this workflow
    # @return [Array<(ApiResourceIDsResponse, Integer, Hash)>] ApiResourceIDsResponse data, response status code and response headers
    def workflow_execute_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Workflows.workflow_execute ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling Workflows.workflow_execute"
      end
      # resource path
      local_var_path = '/workflows/entities/execute/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'execution_cid'] = @api_client.build_collection_param(opts[:'execution_cid'], :csv) if !opts[:'execution_cid'].nil?
      query_params[:'definition_id'] = @api_client.build_collection_param(opts[:'definition_id'], :csv) if !opts[:'definition_id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'key'] = opts[:'key'] if !opts[:'key'].nil?
      query_params[:'depth'] = opts[:'depth'] if !opts[:'depth'].nil?
      query_params[:'source_event_url'] = opts[:'source_event_url'] if !opts[:'source_event_url'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiResourceIDsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Workflows.workflow_execute",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Workflows#workflow_execute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Executes an on-demand Workflow - internal workflows permitted, the body is JSON used to trigger the execution, the response the execution ID(s)
    # @param body [Object]
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :execution_cid CID(s) to execute on. This can be a child if this is a flight control enabled definition. If unset the definition CID is used.
    # @option opts [Array<String>] :definition_id Definition ID to execute, either a name or an ID can be specified.
    # @option opts [String] :name Workflow name to execute, either a name or an ID can be specified.
    # @option opts [String] :key Key used to help deduplicate executions, if unset a new UUID is used
    # @option opts [Integer] :depth Used to record the execution depth to help limit execution loops when a workflow triggers another. The maximum depth is 4.
    # @option opts [Integer] :batch_size Used to set the batchSize, if unset the default batchSize is used
    # @option opts [String] :source_event_url Used to record a URL to the source that led to triggering this workflow
    # @return [ApiResourceIDsResponse]
    def workflow_execute_internal(body, opts = {})
      data, _status_code, _headers = workflow_execute_internal_with_http_info(body, opts)
      data
    end

    # Executes an on-demand Workflow - internal workflows permitted, the body is JSON used to trigger the execution, the response the execution ID(s)
    # @param body [Object]
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :execution_cid CID(s) to execute on. This can be a child if this is a flight control enabled definition. If unset the definition CID is used.
    # @option opts [Array<String>] :definition_id Definition ID to execute, either a name or an ID can be specified.
    # @option opts [String] :name Workflow name to execute, either a name or an ID can be specified.
    # @option opts [String] :key Key used to help deduplicate executions, if unset a new UUID is used
    # @option opts [Integer] :depth Used to record the execution depth to help limit execution loops when a workflow triggers another. The maximum depth is 4.
    # @option opts [Integer] :batch_size Used to set the batchSize, if unset the default batchSize is used
    # @option opts [String] :source_event_url Used to record a URL to the source that led to triggering this workflow
    # @return [Array<(ApiResourceIDsResponse, Integer, Hash)>] ApiResourceIDsResponse data, response status code and response headers
    def workflow_execute_internal_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Workflows.workflow_execute_internal ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling Workflows.workflow_execute_internal"
      end
      # resource path
      local_var_path = '/workflows/entities/execute/internal/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'execution_cid'] = @api_client.build_collection_param(opts[:'execution_cid'], :csv) if !opts[:'execution_cid'].nil?
      query_params[:'definition_id'] = @api_client.build_collection_param(opts[:'definition_id'], :csv) if !opts[:'definition_id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'key'] = opts[:'key'] if !opts[:'key'].nil?
      query_params[:'depth'] = opts[:'depth'] if !opts[:'depth'].nil?
      query_params[:'batch_size'] = opts[:'batch_size'] if !opts[:'batch_size'].nil?
      query_params[:'source_event_url'] = opts[:'source_event_url'] if !opts[:'source_event_url'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiResourceIDsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Workflows.workflow_execute_internal",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Workflows#workflow_execute_internal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get execution result of a given execution
    # @param ids [Array<String>] workflow execution id to return results for.
    # @param [Hash] opts the optional parameters
    # @return [ApiExecutionResultsResponse]
    def workflow_execution_results(ids, opts = {})
      data, _status_code, _headers = workflow_execution_results_with_http_info(ids, opts)
      data
    end

    # Get execution result of a given execution
    # @param ids [Array<String>] workflow execution id to return results for.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiExecutionResultsResponse, Integer, Hash)>] ApiExecutionResultsResponse data, response status code and response headers
    def workflow_execution_results_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Workflows.workflow_execution_results ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling Workflows.workflow_execution_results"
      end
      if @api_client.config.client_side_validation && ids.length > 500
        fail ArgumentError, 'invalid value for "ids" when calling Workflows.workflow_execution_results, number of items must be less than or equal to 500.'
      end

      if @api_client.config.client_side_validation && ids.length < 1
        fail ArgumentError, 'invalid value for "ids" when calling Workflows.workflow_execution_results, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/workflows/entities/execution-results/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :csv)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiExecutionResultsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Workflows.workflow_execution_results",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Workflows#workflow_execution_results\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Allows a user to resume/retry a failed workflow execution.
    # @param action_name [String] Specify one of these actions:  - &#x60;resume&#x60;: resume/retry the workflow execution(s) specified in ids
    # @param body [ClientActionRequest]
    # @param [Hash] opts the optional parameters
    # @return [DefinitionsDefinitionEntitiesResponse]
    def workflow_executions_action(action_name, body, opts = {})
      data, _status_code, _headers = workflow_executions_action_with_http_info(action_name, body, opts)
      data
    end

    # Allows a user to resume/retry a failed workflow execution.
    # @param action_name [String] Specify one of these actions:  - &#x60;resume&#x60;: resume/retry the workflow execution(s) specified in ids
    # @param body [ClientActionRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefinitionsDefinitionEntitiesResponse, Integer, Hash)>] DefinitionsDefinitionEntitiesResponse data, response status code and response headers
    def workflow_executions_action_with_http_info(action_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Workflows.workflow_executions_action ...'
      end
      # verify the required parameter 'action_name' is set
      if @api_client.config.client_side_validation && action_name.nil?
        fail ArgumentError, "Missing the required parameter 'action_name' when calling Workflows.workflow_executions_action"
      end
      # verify enum value
      allowable_values = ["resume"]
      if @api_client.config.client_side_validation && !allowable_values.include?(action_name)
        fail ArgumentError, "invalid value for \"action_name\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling Workflows.workflow_executions_action"
      end
      # resource path
      local_var_path = '/workflows/entities/execution-actions/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'action_name'] = action_name

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DefinitionsDefinitionEntitiesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Workflows.workflow_executions_action",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Workflows#workflow_executions_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search workflow executions based on the provided filter
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL query specifying filter parameters.
    # @option opts [String] :offset Starting pagination offset of records to return.
    # @option opts [Integer] :limit Maximum number of records to return.
    # @option opts [String] :sort Sort items by providing a comma separated list of property and direction (eg name.desc,time.asc). If direction is omitted, defaults to descending.
    # @return [ApiExecutionResultsResponse]
    def workflow_executions_combined(opts = {})
      data, _status_code, _headers = workflow_executions_combined_with_http_info(opts)
      data
    end

    # Search workflow executions based on the provided filter
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL query specifying filter parameters.
    # @option opts [String] :offset Starting pagination offset of records to return.
    # @option opts [Integer] :limit Maximum number of records to return.
    # @option opts [String] :sort Sort items by providing a comma separated list of property and direction (eg name.desc,time.asc). If direction is omitted, defaults to descending.
    # @return [Array<(ApiExecutionResultsResponse, Integer, Hash)>] ApiExecutionResultsResponse data, response status code and response headers
    def workflow_executions_combined_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Workflows.workflow_executions_combined ...'
      end
      pattern = Regexp.new(/^\w+(\.asc|\.desc)?(,\w+(\.asc|\.desc)?)*$/)
      if @api_client.config.client_side_validation && !opts[:'sort'].nil? && opts[:'sort'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"sort\"]' when calling Workflows.workflow_executions_combined, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/workflows/combined/executions/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiExecutionResultsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Workflows.workflow_executions_combined",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Workflows#workflow_executions_combined\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets one or more specific human inputs by their IDs.
    # @param ids [Array<String>] IDs of human inputs to read
    # @param [Hash] opts the optional parameters
    # @return [ModelUserInputReadResponse]
    def workflow_get_human_input_v1(ids, opts = {})
      data, _status_code, _headers = workflow_get_human_input_v1_with_http_info(ids, opts)
      data
    end

    # Gets one or more specific human inputs by their IDs.
    # @param ids [Array<String>] IDs of human inputs to read
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelUserInputReadResponse, Integer, Hash)>] ModelUserInputReadResponse data, response status code and response headers
    def workflow_get_human_input_v1_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Workflows.workflow_get_human_input_v1 ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling Workflows.workflow_get_human_input_v1"
      end
      # resource path
      local_var_path = '/workflows/entities/human-inputs/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :csv)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelUserInputReadResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Workflows.workflow_get_human_input_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Workflows#workflow_get_human_input_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Executes a workflow definition with mocks
    # @param body [ModelsMockExecutionCreateRequestV1]
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :execution_cid CID(s) to execute on. This can be a child if this is a flight control enabled definition. If unset the definition CID is used.
    # @option opts [String] :definition_id Definition ID to execute, either a name or an ID, or the definition itself in the request body, can be specified.
    # @option opts [String] :name Workflow name to execute, either a name or an ID, or the definition itself in the request body, can be specified.
    # @option opts [String] :key Key used to help deduplicate executions, if unset a new UUID is used
    # @option opts [Integer] :depth Used to record the execution depth to help limit execution loops when a workflow triggers another. The maximum depth is 4.
    # @option opts [String] :source_event_url Used to record a URL to the source that led to triggering this workflow
    # @option opts [Boolean] :validate_only When enabled, prevents execution after validating mocks against definition (default to false)
    # @return [ApiResourceIDsResponse]
    def workflow_mock_execute(body, opts = {})
      data, _status_code, _headers = workflow_mock_execute_with_http_info(body, opts)
      data
    end

    # Executes a workflow definition with mocks
    # @param body [ModelsMockExecutionCreateRequestV1]
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :execution_cid CID(s) to execute on. This can be a child if this is a flight control enabled definition. If unset the definition CID is used.
    # @option opts [String] :definition_id Definition ID to execute, either a name or an ID, or the definition itself in the request body, can be specified.
    # @option opts [String] :name Workflow name to execute, either a name or an ID, or the definition itself in the request body, can be specified.
    # @option opts [String] :key Key used to help deduplicate executions, if unset a new UUID is used
    # @option opts [Integer] :depth Used to record the execution depth to help limit execution loops when a workflow triggers another. The maximum depth is 4.
    # @option opts [String] :source_event_url Used to record a URL to the source that led to triggering this workflow
    # @option opts [Boolean] :validate_only When enabled, prevents execution after validating mocks against definition (default to false)
    # @return [Array<(ApiResourceIDsResponse, Integer, Hash)>] ApiResourceIDsResponse data, response status code and response headers
    def workflow_mock_execute_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Workflows.workflow_mock_execute ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling Workflows.workflow_mock_execute"
      end
      # resource path
      local_var_path = '/workflows/entities/mock-executions/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'execution_cid'] = @api_client.build_collection_param(opts[:'execution_cid'], :csv) if !opts[:'execution_cid'].nil?
      query_params[:'definition_id'] = opts[:'definition_id'] if !opts[:'definition_id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'key'] = opts[:'key'] if !opts[:'key'].nil?
      query_params[:'depth'] = opts[:'depth'] if !opts[:'depth'].nil?
      query_params[:'source_event_url'] = opts[:'source_event_url'] if !opts[:'source_event_url'].nil?
      query_params[:'validate_only'] = opts[:'validate_only'] if !opts[:'validate_only'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiResourceIDsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Workflows.workflow_mock_execute",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Workflows#workflow_mock_execute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deprovisions a system definition that was previously provisioned on the target CID
    # @param body [ClientSystemDefinitionDeProvisionRequest]
    # @param [Hash] opts the optional parameters
    # @return [ClientSystemDefinitionCreateResponse]
    def workflow_system_definitions_de_provision(body, opts = {})
      data, _status_code, _headers = workflow_system_definitions_de_provision_with_http_info(body, opts)
      data
    end

    # Deprovisions a system definition that was previously provisioned on the target CID
    # @param body [ClientSystemDefinitionDeProvisionRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClientSystemDefinitionCreateResponse, Integer, Hash)>] ClientSystemDefinitionCreateResponse data, response status code and response headers
    def workflow_system_definitions_de_provision_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Workflows.workflow_system_definitions_de_provision ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling Workflows.workflow_system_definitions_de_provision"
      end
      # resource path
      local_var_path = '/workflows/system-definitions/deprovision/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ClientSystemDefinitionCreateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Workflows.workflow_system_definitions_de_provision",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Workflows#workflow_system_definitions_de_provision\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Promotes a version of a system definition for a customer. The customer must already have been provisioned. This allows the caller to apply an updated template version to a specific cid and expects all parameters to be supplied. If the template supports multi-instance the customer scope definition ID must be supplied to determine which customer workflow should be updated.
    # @param body [ClientSystemDefinitionPromoteRequest]
    # @param [Hash] opts the optional parameters
    # @return [ClientSystemDefinitionCreateResponse]
    def workflow_system_definitions_promote(body, opts = {})
      data, _status_code, _headers = workflow_system_definitions_promote_with_http_info(body, opts)
      data
    end

    # Promotes a version of a system definition for a customer. The customer must already have been provisioned. This allows the caller to apply an updated template version to a specific cid and expects all parameters to be supplied. If the template supports multi-instance the customer scope definition ID must be supplied to determine which customer workflow should be updated.
    # @param body [ClientSystemDefinitionPromoteRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClientSystemDefinitionCreateResponse, Integer, Hash)>] ClientSystemDefinitionCreateResponse data, response status code and response headers
    def workflow_system_definitions_promote_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Workflows.workflow_system_definitions_promote ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling Workflows.workflow_system_definitions_promote"
      end
      # resource path
      local_var_path = '/workflows/system-definitions/promote/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ClientSystemDefinitionCreateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Workflows.workflow_system_definitions_promote",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Workflows#workflow_system_definitions_promote\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Provisions a system definition onto the target CID by using the template and provided parameters
    # @param body [ClientSystemDefinitionProvisionRequest]
    # @param [Hash] opts the optional parameters
    # @return [ClientSystemDefinitionCreateResponse]
    def workflow_system_definitions_provision(body, opts = {})
      data, _status_code, _headers = workflow_system_definitions_provision_with_http_info(body, opts)
      data
    end

    # Provisions a system definition onto the target CID by using the template and provided parameters
    # @param body [ClientSystemDefinitionProvisionRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClientSystemDefinitionCreateResponse, Integer, Hash)>] ClientSystemDefinitionCreateResponse data, response status code and response headers
    def workflow_system_definitions_provision_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Workflows.workflow_system_definitions_provision ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling Workflows.workflow_system_definitions_provision"
      end
      # resource path
      local_var_path = '/workflows/system-definitions/provision/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ClientSystemDefinitionCreateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Workflows.workflow_system_definitions_provision",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Workflows#workflow_system_definitions_provision\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search for triggers by namespaced identifier, i.e. FalconAudit, Detection, or FalconAudit/Detection/Status. Returns all triggers if no filter specified
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL query specifying filter parameters.
    # @return [TriggersTriggerExternalResponse]
    def workflow_triggers_combined(opts = {})
      data, _status_code, _headers = workflow_triggers_combined_with_http_info(opts)
      data
    end

    # Search for triggers by namespaced identifier, i.e. FalconAudit, Detection, or FalconAudit/Detection/Status. Returns all triggers if no filter specified
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter FQL query specifying filter parameters.
    # @return [Array<(TriggersTriggerExternalResponse, Integer, Hash)>] TriggersTriggerExternalResponse data, response status code and response headers
    def workflow_triggers_combined_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Workflows.workflow_triggers_combined ...'
      end
      # resource path
      local_var_path = '/workflows/combined/triggers/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TriggersTriggerExternalResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Workflows.workflow_triggers_combined",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Workflows#workflow_triggers_combined\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Provides an input in response to a human input action. Depending on action configuration, one or more of Approve, Decline, and/or Escalate are permitted.
    # @param id [String] ID of human input to provide an input to
    # @param body [ModelUserInputUpdateRequest]
    # @param [Hash] opts the optional parameters
    # @return [ApiResourceIDsResponse]
    def workflow_update_human_input_v1(id, body, opts = {})
      data, _status_code, _headers = workflow_update_human_input_v1_with_http_info(id, body, opts)
      data
    end

    # Provides an input in response to a human input action. Depending on action configuration, one or more of Approve, Decline, and/or Escalate are permitted.
    # @param id [String] ID of human input to provide an input to
    # @param body [ModelUserInputUpdateRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiResourceIDsResponse, Integer, Hash)>] ApiResourceIDsResponse data, response status code and response headers
    def workflow_update_human_input_v1_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Workflows.workflow_update_human_input_v1 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling Workflows.workflow_update_human_input_v1"
      end
      if @api_client.config.client_side_validation && id.to_s.length > 32
        fail ArgumentError, 'invalid value for "id" when calling Workflows.workflow_update_human_input_v1, the character length must be smaller than or equal to 32.'
      end

      if @api_client.config.client_side_validation && id.to_s.length < 32
        fail ArgumentError, 'invalid value for "id" when calling Workflows.workflow_update_human_input_v1, the character length must be great than or equal to 32.'
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling Workflows.workflow_update_human_input_v1"
      end
      # resource path
      local_var_path = '/workflows/entities/human-inputs/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiResourceIDsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"Workflows.workflow_update_human_input_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Workflows#workflow_update_human_input_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
