=begin
#CrowdStrike API Specification

#Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.

The version of the OpenAPI document: 2023-05-30T23:10:32Z

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module Falcon
  class EventStreamsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Discover all event streams in your environment
    # @param app_id [String] Label that identifies your connection. Max: 32 alphanumeric characters (a-z, A-Z, 0-9).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format Format for streaming events. Valid values: json, flatjson
    # @return [MainDiscoveryResponseV2]
    def list_available_streams_o_auth2(app_id, opts = {})
      data, _status_code, _headers = list_available_streams_o_auth2_with_http_info(app_id, opts)
      data
    end

    # Discover all event streams in your environment
    # @param app_id [String] Label that identifies your connection. Max: 32 alphanumeric characters (a-z, A-Z, 0-9).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format Format for streaming events. Valid values: json, flatjson
    # @return [Array<(MainDiscoveryResponseV2, Integer, Hash)>] MainDiscoveryResponseV2 data, response status code and response headers
    def list_available_streams_o_auth2_with_http_info(app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventStreamsApi.list_available_streams_o_auth2 ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling EventStreamsApi.list_available_streams_o_auth2"
      end
      # resource path
      local_var_path = '/sensors/entities/datafeed/v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'appId'] = app_id
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MainDiscoveryResponseV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"EventStreamsApi.list_available_streams_o_auth2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventStreamsApi#list_available_streams_o_auth2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refresh an active event stream. Use the URL shown in a GET /sensors/entities/datafeed/v2 response.
    # @param action_name [String] Action name. Allowed value is refresh_active_stream_session.
    # @param app_id [String] Label that identifies your connection. Max: 32 alphanumeric characters (a-z, A-Z, 0-9).
    # @param partition [Integer] Partition to request data for.
    # @param [Hash] opts the optional parameters
    # @return [MsaReplyMetaOnly]
    def refresh_active_stream_session(action_name, app_id, partition, opts = {})
      data, _status_code, _headers = refresh_active_stream_session_with_http_info(action_name, app_id, partition, opts)
      data
    end

    # Refresh an active event stream. Use the URL shown in a GET /sensors/entities/datafeed/v2 response.
    # @param action_name [String] Action name. Allowed value is refresh_active_stream_session.
    # @param app_id [String] Label that identifies your connection. Max: 32 alphanumeric characters (a-z, A-Z, 0-9).
    # @param partition [Integer] Partition to request data for.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MsaReplyMetaOnly, Integer, Hash)>] MsaReplyMetaOnly data, response status code and response headers
    def refresh_active_stream_session_with_http_info(action_name, app_id, partition, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventStreamsApi.refresh_active_stream_session ...'
      end
      # verify the required parameter 'action_name' is set
      if @api_client.config.client_side_validation && action_name.nil?
        fail ArgumentError, "Missing the required parameter 'action_name' when calling EventStreamsApi.refresh_active_stream_session"
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling EventStreamsApi.refresh_active_stream_session"
      end
      # verify the required parameter 'partition' is set
      if @api_client.config.client_side_validation && partition.nil?
        fail ArgumentError, "Missing the required parameter 'partition' when calling EventStreamsApi.refresh_active_stream_session"
      end
      # resource path
      local_var_path = '/sensors/entities/datafeed-actions/v1/{partition}'.sub('{' + 'partition' + '}', CGI.escape(partition.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'action_name'] = action_name
      query_params[:'appId'] = app_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaReplyMetaOnly'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"EventStreamsApi.refresh_active_stream_session",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventStreamsApi#refresh_active_stream_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
