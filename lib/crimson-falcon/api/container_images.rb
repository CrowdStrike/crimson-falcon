=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'cgi'

module Falcon
  class ContainerImages
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Image assessment history
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter using a query in Falcon Query Language (FQL). Supported filter fields: - &#x60;cid&#x60; - &#x60;registry&#x60; - &#x60;repository&#x60;
    # @return [ImagesApiImageAssessmentHistory]
    def aggregate_image_assessment_history(opts = {})
      data, _status_code, _headers = aggregate_image_assessment_history_with_http_info(opts)
      data
    end

    # Image assessment history
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter using a query in Falcon Query Language (FQL). Supported filter fields: - &#x60;cid&#x60; - &#x60;registry&#x60; - &#x60;repository&#x60;
    # @return [Array<(ImagesApiImageAssessmentHistory, Integer, Hash)>] ImagesApiImageAssessmentHistory data, response status code and response headers
    def aggregate_image_assessment_history_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContainerImages.aggregate_image_assessment_history ...'
      end
      # resource path
      local_var_path = '/container-security/aggregates/images/assessment-history/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ImagesApiImageAssessmentHistory'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ContainerImages.aggregate_image_assessment_history",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContainerImages#aggregate_image_assessment_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Aggregate count of images
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter images using a query in Falcon Query Language (FQL). Supported filter fields: - &#x60;ai_related&#x60; - &#x60;ai_vulnerability_count&#x60; - &#x60;arch&#x60; - &#x60;base_os&#x60; - &#x60;cid&#x60; - &#x60;container_id&#x60; - &#x60;container_running_status&#x60; - &#x60;cps_rating&#x60; - &#x60;crowdstrike_user&#x60; - &#x60;cve_id&#x60; - &#x60;detection_count&#x60; - &#x60;detection_name&#x60; - &#x60;detection_severity&#x60; - &#x60;first_seen&#x60; - &#x60;image_digest&#x60; - &#x60;image_id&#x60; - &#x60;include_base_image_vuln&#x60; - &#x60;layer_digest&#x60; - &#x60;package_name_version&#x60; - &#x60;registry&#x60; - &#x60;repository&#x60; - &#x60;source&#x60; - &#x60;tag&#x60; - &#x60;vulnerability_count&#x60; - &#x60;vulnerability_severity&#x60;
    # @return [ImagesApiImageCount]
    def aggregate_image_count(opts = {})
      data, _status_code, _headers = aggregate_image_count_with_http_info(opts)
      data
    end

    # Aggregate count of images
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter images using a query in Falcon Query Language (FQL). Supported filter fields: - &#x60;ai_related&#x60; - &#x60;ai_vulnerability_count&#x60; - &#x60;arch&#x60; - &#x60;base_os&#x60; - &#x60;cid&#x60; - &#x60;container_id&#x60; - &#x60;container_running_status&#x60; - &#x60;cps_rating&#x60; - &#x60;crowdstrike_user&#x60; - &#x60;cve_id&#x60; - &#x60;detection_count&#x60; - &#x60;detection_name&#x60; - &#x60;detection_severity&#x60; - &#x60;first_seen&#x60; - &#x60;image_digest&#x60; - &#x60;image_id&#x60; - &#x60;include_base_image_vuln&#x60; - &#x60;layer_digest&#x60; - &#x60;package_name_version&#x60; - &#x60;registry&#x60; - &#x60;repository&#x60; - &#x60;source&#x60; - &#x60;tag&#x60; - &#x60;vulnerability_count&#x60; - &#x60;vulnerability_severity&#x60;
    # @return [Array<(ImagesApiImageCount, Integer, Hash)>] ImagesApiImageCount data, response status code and response headers
    def aggregate_image_count_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContainerImages.aggregate_image_count ...'
      end
      # resource path
      local_var_path = '/container-security/aggregates/images/count/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ImagesApiImageCount'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ContainerImages.aggregate_image_count",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContainerImages#aggregate_image_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Aggregate count of images grouped by Base OS distribution
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter images using a query in Falcon Query Language (FQL). Supported filter fields: - &#x60;arch&#x60; - &#x60;base_os&#x60; - &#x60;cid&#x60; - &#x60;first_seen&#x60; - &#x60;image_digest&#x60; - &#x60;image_id&#x60; - &#x60;registry&#x60; - &#x60;repository&#x60; - &#x60;source&#x60; - &#x60;tag&#x60;
    # @return [ImagesApiImageCountByBaseOS]
    def aggregate_image_count_by_base_os(opts = {})
      data, _status_code, _headers = aggregate_image_count_by_base_os_with_http_info(opts)
      data
    end

    # Aggregate count of images grouped by Base OS distribution
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter images using a query in Falcon Query Language (FQL). Supported filter fields: - &#x60;arch&#x60; - &#x60;base_os&#x60; - &#x60;cid&#x60; - &#x60;first_seen&#x60; - &#x60;image_digest&#x60; - &#x60;image_id&#x60; - &#x60;registry&#x60; - &#x60;repository&#x60; - &#x60;source&#x60; - &#x60;tag&#x60;
    # @return [Array<(ImagesApiImageCountByBaseOS, Integer, Hash)>] ImagesApiImageCountByBaseOS data, response status code and response headers
    def aggregate_image_count_by_base_os_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContainerImages.aggregate_image_count_by_base_os ...'
      end
      # resource path
      local_var_path = '/container-security/aggregates/images/count-by-os-distribution/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ImagesApiImageCountByBaseOS'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ContainerImages.aggregate_image_count_by_base_os",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContainerImages#aggregate_image_count_by_base_os\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Aggregate count of images grouped by state
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter images using a query in Falcon Query Language (FQL). Supported filter fields: - &#x60;arch&#x60; - &#x60;base_os&#x60; - &#x60;cid&#x60; - &#x60;first_seen&#x60; - &#x60;image_digest&#x60; - &#x60;image_id&#x60; - &#x60;registry&#x60; - &#x60;repository&#x60; - &#x60;source&#x60; - &#x60;tag&#x60;
    # @return [ImagesApiImageCountByState]
    def aggregate_image_count_by_state(opts = {})
      data, _status_code, _headers = aggregate_image_count_by_state_with_http_info(opts)
      data
    end

    # Aggregate count of images grouped by state
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter images using a query in Falcon Query Language (FQL). Supported filter fields: - &#x60;arch&#x60; - &#x60;base_os&#x60; - &#x60;cid&#x60; - &#x60;first_seen&#x60; - &#x60;image_digest&#x60; - &#x60;image_id&#x60; - &#x60;registry&#x60; - &#x60;repository&#x60; - &#x60;source&#x60; - &#x60;tag&#x60;
    # @return [Array<(ImagesApiImageCountByState, Integer, Hash)>] ImagesApiImageCountByState data, response status code and response headers
    def aggregate_image_count_by_state_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContainerImages.aggregate_image_count_by_state ...'
      end
      # resource path
      local_var_path = '/container-security/aggregates/images/count-by-state/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ImagesApiImageCountByState'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ContainerImages.aggregate_image_count_by_state",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContainerImages#aggregate_image_count_by_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a list of base images for the provided filter. Maximum page size: 100
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Search base images using a query in Falcon Query Language (FQL). Supported filter fields: - &#x60;image_digest&#x60; - &#x60;image_id&#x60; - &#x60;registry&#x60; - &#x60;repository&#x60; - &#x60;tag&#x60;
    # @return [CoreEntitiesResponse]
    def combined_base_images(opts = {})
      data, _status_code, _headers = combined_base_images_with_http_info(opts)
      data
    end

    # Retrieves a list of base images for the provided filter. Maximum page size: 100
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Search base images using a query in Falcon Query Language (FQL). Supported filter fields: - &#x60;image_digest&#x60; - &#x60;image_id&#x60; - &#x60;registry&#x60; - &#x60;repository&#x60; - &#x60;tag&#x60;
    # @return [Array<(CoreEntitiesResponse, Integer, Hash)>] CoreEntitiesResponse data, response status code and response headers
    def combined_base_images_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContainerImages.combined_base_images ...'
      end
      # resource path
      local_var_path = '/container-security/combined/base-images/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CoreEntitiesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ContainerImages.combined_base_images",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContainerImages#combined_base_images\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve top x images with the most vulnerabilities
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter images using a query in Falcon Query Language (FQL). Supported filter fields: - &#x60;arch&#x60; - &#x60;base_os&#x60; - &#x60;cid&#x60; - &#x60;first_seen&#x60; - &#x60;image_digest&#x60; - &#x60;image_id&#x60; - &#x60;registry&#x60; - &#x60;repository&#x60; - &#x60;source&#x60; - &#x60;tag&#x60;
    # @option opts [Integer] :limit The upper-bound on the number of records to retrieve.
    # @option opts [Integer] :offset The fields to sort the records on. **Not supported.**
    # @return [ImagesApiImageByVulnerabilityCount]
    def combined_image_by_vulnerability_count(opts = {})
      data, _status_code, _headers = combined_image_by_vulnerability_count_with_http_info(opts)
      data
    end

    # Retrieve top x images with the most vulnerabilities
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter images using a query in Falcon Query Language (FQL). Supported filter fields: - &#x60;arch&#x60; - &#x60;base_os&#x60; - &#x60;cid&#x60; - &#x60;first_seen&#x60; - &#x60;image_digest&#x60; - &#x60;image_id&#x60; - &#x60;registry&#x60; - &#x60;repository&#x60; - &#x60;source&#x60; - &#x60;tag&#x60;
    # @option opts [Integer] :limit The upper-bound on the number of records to retrieve.
    # @option opts [Integer] :offset The fields to sort the records on. **Not supported.**
    # @return [Array<(ImagesApiImageByVulnerabilityCount, Integer, Hash)>] ImagesApiImageByVulnerabilityCount data, response status code and response headers
    def combined_image_by_vulnerability_count_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContainerImages.combined_image_by_vulnerability_count ...'
      end
      # resource path
      local_var_path = '/container-security/combined/images/by-vulnerability-count/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ImagesApiImageByVulnerabilityCount'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ContainerImages.combined_image_by_vulnerability_count",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContainerImages#combined_image_by_vulnerability_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Maximum offset = 10000 - limit
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter images using a query in Falcon Query Language (FQL). Supported filter fields: - &#x60;arch&#x60; - &#x60;base_os&#x60; - &#x60;cid&#x60; - &#x60;first_seen&#x60; - &#x60;image_digest&#x60; - &#x60;image_id&#x60; - &#x60;registry&#x60; - &#x60;repository&#x60; - &#x60;source&#x60; - &#x60;tag&#x60;
    # @option opts [Boolean] :with_config (true/false) include image config, default is false
    # @option opts [String] :sort The fields to sort the records on.
    # @option opts [Integer] :limit The upper-bound on the number of records to retrieve. (default to 100)
    # @option opts [Integer] :offset The offset from where to begin.
    # @return [ImagesApiCustomerAndImage]
    def combined_image_detail(opts = {})
      data, _status_code, _headers = combined_image_detail_with_http_info(opts)
      data
    end

    # Maximum offset &#x3D; 10000 - limit
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter images using a query in Falcon Query Language (FQL). Supported filter fields: - &#x60;arch&#x60; - &#x60;base_os&#x60; - &#x60;cid&#x60; - &#x60;first_seen&#x60; - &#x60;image_digest&#x60; - &#x60;image_id&#x60; - &#x60;registry&#x60; - &#x60;repository&#x60; - &#x60;source&#x60; - &#x60;tag&#x60;
    # @option opts [Boolean] :with_config (true/false) include image config, default is false
    # @option opts [String] :sort The fields to sort the records on.
    # @option opts [Integer] :limit The upper-bound on the number of records to retrieve. (default to 100)
    # @option opts [Integer] :offset The offset from where to begin.
    # @return [Array<(ImagesApiCustomerAndImage, Integer, Hash)>] ImagesApiCustomerAndImage data, response status code and response headers
    def combined_image_detail_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContainerImages.combined_image_detail ...'
      end
      # resource path
      local_var_path = '/container-security/combined/images/detail/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'with_config'] = opts[:'with_config'] if !opts[:'with_config'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ImagesApiCustomerAndImage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ContainerImages.combined_image_detail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContainerImages#combined_image_detail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve image issues summary such as Image detections, Runtime detections, Policies, vulnerabilities
    # @param cid [String] CS Customer ID
    # @param registry [String] Registry
    # @param repository [String] Repository name
    # @param tag [String] Tag name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :image_digest Digest ID
    # @option opts [Boolean] :include_base_image_vuln Include base image vulnerabilities. (default to false)
    # @return [ImagesApiImageIssuesSummary]
    def combined_image_issues_summary(cid, registry, repository, tag, opts = {})
      data, _status_code, _headers = combined_image_issues_summary_with_http_info(cid, registry, repository, tag, opts)
      data
    end

    # Retrieve image issues summary such as Image detections, Runtime detections, Policies, vulnerabilities
    # @param cid [String] CS Customer ID
    # @param registry [String] Registry
    # @param repository [String] Repository name
    # @param tag [String] Tag name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :image_digest Digest ID
    # @option opts [Boolean] :include_base_image_vuln Include base image vulnerabilities. (default to false)
    # @return [Array<(ImagesApiImageIssuesSummary, Integer, Hash)>] ImagesApiImageIssuesSummary data, response status code and response headers
    def combined_image_issues_summary_with_http_info(cid, registry, repository, tag, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContainerImages.combined_image_issues_summary ...'
      end
      # verify the required parameter 'cid' is set
      if @api_client.config.client_side_validation && cid.nil?
        fail ArgumentError, "Missing the required parameter 'cid' when calling ContainerImages.combined_image_issues_summary"
      end
      # verify the required parameter 'registry' is set
      if @api_client.config.client_side_validation && registry.nil?
        fail ArgumentError, "Missing the required parameter 'registry' when calling ContainerImages.combined_image_issues_summary"
      end
      # verify the required parameter 'repository' is set
      if @api_client.config.client_side_validation && repository.nil?
        fail ArgumentError, "Missing the required parameter 'repository' when calling ContainerImages.combined_image_issues_summary"
      end
      # verify the required parameter 'tag' is set
      if @api_client.config.client_side_validation && tag.nil?
        fail ArgumentError, "Missing the required parameter 'tag' when calling ContainerImages.combined_image_issues_summary"
      end
      # resource path
      local_var_path = '/container-security/combined/images/issues-summary/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cid'] = cid
      query_params[:'registry'] = registry
      query_params[:'repository'] = repository
      query_params[:'tag'] = tag
      query_params[:'image_digest'] = opts[:'image_digest'] if !opts[:'image_digest'].nil?
      query_params[:'include_base_image_vuln'] = opts[:'include_base_image_vuln'] if !opts[:'include_base_image_vuln'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ImagesApiImageIssuesSummary'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ContainerImages.combined_image_issues_summary",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContainerImages#combined_image_issues_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # aggregates information about vulnerabilities for an image
    # @param cid [String] CS Customer ID
    # @param registry [String] Registry
    # @param repository [String] Repository name
    # @param tag [String] Tag name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :image_digest Digest ID
    # @option opts [Boolean] :include_base_image_vuln Include base image vulnerabilities. (default to false)
    # @return [ImagesApiImageVulnerabilitiesSummary]
    def combined_image_vulnerability_summary(cid, registry, repository, tag, opts = {})
      data, _status_code, _headers = combined_image_vulnerability_summary_with_http_info(cid, registry, repository, tag, opts)
      data
    end

    # aggregates information about vulnerabilities for an image
    # @param cid [String] CS Customer ID
    # @param registry [String] Registry
    # @param repository [String] Repository name
    # @param tag [String] Tag name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :image_digest Digest ID
    # @option opts [Boolean] :include_base_image_vuln Include base image vulnerabilities. (default to false)
    # @return [Array<(ImagesApiImageVulnerabilitiesSummary, Integer, Hash)>] ImagesApiImageVulnerabilitiesSummary data, response status code and response headers
    def combined_image_vulnerability_summary_with_http_info(cid, registry, repository, tag, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContainerImages.combined_image_vulnerability_summary ...'
      end
      # verify the required parameter 'cid' is set
      if @api_client.config.client_side_validation && cid.nil?
        fail ArgumentError, "Missing the required parameter 'cid' when calling ContainerImages.combined_image_vulnerability_summary"
      end
      # verify the required parameter 'registry' is set
      if @api_client.config.client_side_validation && registry.nil?
        fail ArgumentError, "Missing the required parameter 'registry' when calling ContainerImages.combined_image_vulnerability_summary"
      end
      # verify the required parameter 'repository' is set
      if @api_client.config.client_side_validation && repository.nil?
        fail ArgumentError, "Missing the required parameter 'repository' when calling ContainerImages.combined_image_vulnerability_summary"
      end
      # verify the required parameter 'tag' is set
      if @api_client.config.client_side_validation && tag.nil?
        fail ArgumentError, "Missing the required parameter 'tag' when calling ContainerImages.combined_image_vulnerability_summary"
      end
      # resource path
      local_var_path = '/container-security/combined/images/vulnerabilities-summary/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cid'] = cid
      query_params[:'registry'] = registry
      query_params[:'repository'] = repository
      query_params[:'tag'] = tag
      query_params[:'image_digest'] = opts[:'image_digest'] if !opts[:'image_digest'].nil?
      query_params[:'include_base_image_vuln'] = opts[:'include_base_image_vuln'] if !opts[:'include_base_image_vuln'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ImagesApiImageVulnerabilitiesSummary'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ContainerImages.combined_image_vulnerability_summary",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContainerImages#combined_image_vulnerability_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates base images using the provided details
    # @param body [ModelsCreateBaseImagesRequest]
    # @param [Hash] opts the optional parameters
    # @return [CoreEntitiesResponse]
    def create_base_images_entities(body, opts = {})
      data, _status_code, _headers = create_base_images_entities_with_http_info(body, opts)
      data
    end

    # Creates base images using the provided details
    # @param body [ModelsCreateBaseImagesRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(CoreEntitiesResponse, Integer, Hash)>] CoreEntitiesResponse data, response status code and response headers
    def create_base_images_entities_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContainerImages.create_base_images_entities ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ContainerImages.create_base_images_entities"
      end
      # resource path
      local_var_path = '/container-security/entities/base-images/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CoreEntitiesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ContainerImages.create_base_images_entities",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContainerImages#create_base_images_entities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete base images by base image uuid
    # @param ids [Array<String>] BaseImageIDs
    # @param [Hash] opts the optional parameters
    # @return [CoreEntitiesResponse]
    def delete_base_images(ids, opts = {})
      data, _status_code, _headers = delete_base_images_with_http_info(ids, opts)
      data
    end

    # Delete base images by base image uuid
    # @param ids [Array<String>] BaseImageIDs
    # @param [Hash] opts the optional parameters
    # @return [Array<(CoreEntitiesResponse, Integer, Hash)>] CoreEntitiesResponse data, response status code and response headers
    def delete_base_images_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContainerImages.delete_base_images ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling ContainerImages.delete_base_images"
      end
      # resource path
      local_var_path = '/container-security/entities/base-images/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :csv)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CoreEntitiesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ContainerImages.delete_base_images",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContainerImages#delete_base_images\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Maximum offset = 10000 - limit
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter images using a query in Falcon Query Language (FQL). Supported filter fields: - &#x60;ai_related&#x60; - &#x60;container_id&#x60; - &#x60;container_running_status&#x60; - &#x60;cve_id&#x60; - &#x60;detection_name&#x60; - &#x60;detection_severity&#x60; - &#x60;first_seen&#x60; - &#x60;image_digest&#x60; - &#x60;image_id&#x60; - &#x60;registry&#x60; - &#x60;repository&#x60; - &#x60;tag&#x60; - &#x60;vulnerability_severity&#x60;
    # @option opts [String] :sort The fields to sort the records on. Supported columns: - &#x60;first_seen&#x60; - &#x60;highest_detection_severity&#x60; - &#x60;highest_vulnerability_severity&#x60; - &#x60;image_digest&#x60; - &#x60;image_id&#x60; - &#x60;registry&#x60; - &#x60;repository&#x60; - &#x60;source&#x60; - &#x60;tag&#x60;
    # @option opts [Integer] :limit The upper-bound on the number of records to retrieve. (default to 100)
    # @option opts [Integer] :offset The offset from where to begin.
    # @return [ImagesExtCombinedImagesResponse]
    def get_combined_images(opts = {})
      data, _status_code, _headers = get_combined_images_with_http_info(opts)
      data
    end

    # Maximum offset &#x3D; 10000 - limit
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter images using a query in Falcon Query Language (FQL). Supported filter fields: - &#x60;ai_related&#x60; - &#x60;container_id&#x60; - &#x60;container_running_status&#x60; - &#x60;cve_id&#x60; - &#x60;detection_name&#x60; - &#x60;detection_severity&#x60; - &#x60;first_seen&#x60; - &#x60;image_digest&#x60; - &#x60;image_id&#x60; - &#x60;registry&#x60; - &#x60;repository&#x60; - &#x60;tag&#x60; - &#x60;vulnerability_severity&#x60;
    # @option opts [String] :sort The fields to sort the records on. Supported columns: - &#x60;first_seen&#x60; - &#x60;highest_detection_severity&#x60; - &#x60;highest_vulnerability_severity&#x60; - &#x60;image_digest&#x60; - &#x60;image_id&#x60; - &#x60;registry&#x60; - &#x60;repository&#x60; - &#x60;source&#x60; - &#x60;tag&#x60;
    # @option opts [Integer] :limit The upper-bound on the number of records to retrieve. (default to 100)
    # @option opts [Integer] :offset The offset from where to begin.
    # @return [Array<(ImagesExtCombinedImagesResponse, Integer, Hash)>] ImagesExtCombinedImagesResponse data, response status code and response headers
    def get_combined_images_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContainerImages.get_combined_images ...'
      end
      # resource path
      local_var_path = '/container-security/combined/image-assessment/images/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ImagesExtCombinedImagesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ContainerImages.get_combined_images",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContainerImages#get_combined_images\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Maximum offset = 10000 - limit
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter images using a query in Falcon Query Language (FQL). Supported filter fields: - &#x60;ai_related&#x60; - &#x60;ai_vulnerability_count&#x60; - &#x60;arch&#x60; - &#x60;base_os&#x60; - &#x60;cid&#x60; - &#x60;container_id&#x60; - &#x60;container_running_status&#x60; - &#x60;cps_rating&#x60; - &#x60;crowdstrike_user&#x60; - &#x60;cve_id&#x60; - &#x60;detection_count&#x60; - &#x60;detection_name&#x60; - &#x60;detection_severity&#x60; - &#x60;first_seen&#x60; - &#x60;image_digest&#x60; - &#x60;image_id&#x60; - &#x60;include_base_image_vuln&#x60; - &#x60;layer_digest&#x60; - &#x60;package_name_version&#x60; - &#x60;registry&#x60; - &#x60;repository&#x60; - &#x60;source&#x60; - &#x60;tag&#x60; - &#x60;vulnerability_count&#x60; - &#x60;vulnerability_severity&#x60;
    # @option opts [Boolean] :expand_vulnerabilities Expand vulnerabilities details (default to false)
    # @option opts [Boolean] :expand_detections Expand detections details (default to false)
    # @option opts [Integer] :limit The upper-bound on the number of records to retrieve. (default to 100)
    # @option opts [Integer] :offset The offset from where to begin.
    # @option opts [String] :sort The fields to sort the records on. Supported columns: - &#x60;ai_vulnerabilities&#x60; - &#x60;base_os&#x60; - &#x60;cid&#x60; - &#x60;detections&#x60; - &#x60;firstScanned&#x60; - &#x60;first_seen&#x60; - &#x60;highest_cps_current_rating&#x60; - &#x60;highest_detection_severity&#x60; - &#x60;highest_vulnerability_severity&#x60; - &#x60;image_digest&#x60; - &#x60;image_id&#x60; - &#x60;last_seen&#x60; - &#x60;layers_with_vulnerabilities&#x60; - &#x60;packages&#x60; - &#x60;registry&#x60; - &#x60;repository&#x60; - &#x60;source&#x60; - &#x60;tag&#x60; - &#x60;vulnerabilities&#x60;
    # @return [ImagesApiCombinedImageExport]
    def read_combined_images_export(opts = {})
      data, _status_code, _headers = read_combined_images_export_with_http_info(opts)
      data
    end

    # Maximum offset &#x3D; 10000 - limit
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter images using a query in Falcon Query Language (FQL). Supported filter fields: - &#x60;ai_related&#x60; - &#x60;ai_vulnerability_count&#x60; - &#x60;arch&#x60; - &#x60;base_os&#x60; - &#x60;cid&#x60; - &#x60;container_id&#x60; - &#x60;container_running_status&#x60; - &#x60;cps_rating&#x60; - &#x60;crowdstrike_user&#x60; - &#x60;cve_id&#x60; - &#x60;detection_count&#x60; - &#x60;detection_name&#x60; - &#x60;detection_severity&#x60; - &#x60;first_seen&#x60; - &#x60;image_digest&#x60; - &#x60;image_id&#x60; - &#x60;include_base_image_vuln&#x60; - &#x60;layer_digest&#x60; - &#x60;package_name_version&#x60; - &#x60;registry&#x60; - &#x60;repository&#x60; - &#x60;source&#x60; - &#x60;tag&#x60; - &#x60;vulnerability_count&#x60; - &#x60;vulnerability_severity&#x60;
    # @option opts [Boolean] :expand_vulnerabilities Expand vulnerabilities details (default to false)
    # @option opts [Boolean] :expand_detections Expand detections details (default to false)
    # @option opts [Integer] :limit The upper-bound on the number of records to retrieve. (default to 100)
    # @option opts [Integer] :offset The offset from where to begin.
    # @option opts [String] :sort The fields to sort the records on. Supported columns: - &#x60;ai_vulnerabilities&#x60; - &#x60;base_os&#x60; - &#x60;cid&#x60; - &#x60;detections&#x60; - &#x60;firstScanned&#x60; - &#x60;first_seen&#x60; - &#x60;highest_cps_current_rating&#x60; - &#x60;highest_detection_severity&#x60; - &#x60;highest_vulnerability_severity&#x60; - &#x60;image_digest&#x60; - &#x60;image_id&#x60; - &#x60;last_seen&#x60; - &#x60;layers_with_vulnerabilities&#x60; - &#x60;packages&#x60; - &#x60;registry&#x60; - &#x60;repository&#x60; - &#x60;source&#x60; - &#x60;tag&#x60; - &#x60;vulnerabilities&#x60;
    # @return [Array<(ImagesApiCombinedImageExport, Integer, Hash)>] ImagesApiCombinedImageExport data, response status code and response headers
    def read_combined_images_export_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContainerImages.read_combined_images_export ...'
      end
      # resource path
      local_var_path = '/container-security/combined/images/export/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'expand_vulnerabilities'] = opts[:'expand_vulnerabilities'] if !opts[:'expand_vulnerabilities'].nil?
      query_params[:'expand_detections'] = opts[:'expand_detections'] if !opts[:'expand_detections'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ImagesApiCombinedImageExport'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ContainerImages.read_combined_images_export",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContainerImages#read_combined_images_export\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
