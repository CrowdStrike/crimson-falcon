=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'cgi'

module Falcon
  class ExposureManagementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returns external assets aggregates.
    # Returns external assets aggregates as specified via JSON in request body.
    # @param body [Array<MsaAggregateQueryRequest>] Aggregation specification.
    # @param [Hash] opts the optional parameters
    # @return [MsaAggregatesResponse]
    def aggregate_external_assets(body, opts = {})
      data, _status_code, _headers = aggregate_external_assets_with_http_info(body, opts)
      data
    end

    # Returns external assets aggregates.
    # Returns external assets aggregates as specified via JSON in request body.
    # @param body [Array<MsaAggregateQueryRequest>] Aggregation specification.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MsaAggregatesResponse, Integer, Hash)>] MsaAggregatesResponse data, response status code and response headers
    def aggregate_external_assets_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExposureManagementApi.aggregate_external_assets ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ExposureManagementApi.aggregate_external_assets"
      end
      # resource path
      local_var_path = '/fem/aggregates/external-assets/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'MsaAggregatesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ExposureManagementApi.aggregate_external_assets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExposureManagementApi#aggregate_external_assets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download the entire contents of the blob. The relative link to this endpoint is returned in the GET /entities/external-assets/v1 request.
    # Download the entire contents of the blob.
    # @param asset_id [String] The Asset ID
    # @param hash [String] The File Hash
    # @param [Hash] opts the optional parameters
    # @return [Array<Integer>]
    def blob_download_external_assets(asset_id, hash, opts = {})
      data, _status_code, _headers = blob_download_external_assets_with_http_info(asset_id, hash, opts)
      data
    end

    # Download the entire contents of the blob. The relative link to this endpoint is returned in the GET /entities/external-assets/v1 request.
    # Download the entire contents of the blob.
    # @param asset_id [String] The Asset ID
    # @param hash [String] The File Hash
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Integer>, Integer, Hash)>] Array<Integer> data, response status code and response headers
    def blob_download_external_assets_with_http_info(asset_id, hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExposureManagementApi.blob_download_external_assets ...'
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling ExposureManagementApi.blob_download_external_assets"
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling ExposureManagementApi.blob_download_external_assets"
      end
      # resource path
      local_var_path = '/fem/entities/blobs-download/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'assetId'] = asset_id
      query_params[:'hash'] = hash

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Integer>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ExposureManagementApi.blob_download_external_assets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExposureManagementApi#blob_download_external_assets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download a preview of the blob. The relative link to this endpoint is returned in the GET /entities/external-assets/v1 request.
    # Download a preview of the blob.
    # @param asset_id [String] The Asset ID
    # @param hash [String] The File Hash
    # @param [Hash] opts the optional parameters
    # @return [DomainExternalAssetsBlobAPITypeV1]
    def blob_preview_external_assets(asset_id, hash, opts = {})
      data, _status_code, _headers = blob_preview_external_assets_with_http_info(asset_id, hash, opts)
      data
    end

    # Download a preview of the blob. The relative link to this endpoint is returned in the GET /entities/external-assets/v1 request.
    # Download a preview of the blob.
    # @param asset_id [String] The Asset ID
    # @param hash [String] The File Hash
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainExternalAssetsBlobAPITypeV1, Integer, Hash)>] DomainExternalAssetsBlobAPITypeV1 data, response status code and response headers
    def blob_preview_external_assets_with_http_info(asset_id, hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExposureManagementApi.blob_preview_external_assets ...'
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling ExposureManagementApi.blob_preview_external_assets"
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling ExposureManagementApi.blob_preview_external_assets"
      end
      # resource path
      local_var_path = '/fem/entities/blobs-preview/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'assetId'] = asset_id
      query_params[:'hash'] = hash

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainExternalAssetsBlobAPITypeV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ExposureManagementApi.blob_preview_external_assets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExposureManagementApi#blob_preview_external_assets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a list of ecosystem subsidiaries with their detailed information.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Starting index of result set from which to return subsidiaries (default to 0)
    # @option opts [Integer] :limit The maximum number of subsidiaries to return in the response. (default to 100)
    # @option opts [String] :sort The field by which to sort the list of subsidiaries. Possible values:&lt;ul&gt;&lt;li&gt;name&lt;/li&gt;&lt;li&gt;primary_domain&lt;/li&gt;&lt;/ul&gt;&lt;/br&gt;Sort order can be specified by appending \&quot;asc\&quot; or \&quot;desc\&quot; to the field name (e.g. \&quot;name|asc\&quot; or \&quot;primary_domain|desc\&quot;).
    # @option opts [String] :version_id The version ID of the ecosystem subsidiaries data, represented as a hash string. This parameter is required to ensure data consistency and prevent stale data. If a new version of the ecosystem subsidiaries data is written, the version ID will be updated. By including this parameter in the request, the client can ensure that the response will be invalidated if a new version is written.
    # @return [DomainFemEcosystemSubsidiariesEntitiesResponse]
    def combined_ecosystem_subsidiaries(opts = {})
      data, _status_code, _headers = combined_ecosystem_subsidiaries_with_http_info(opts)
      data
    end

    # Retrieves a list of ecosystem subsidiaries with their detailed information.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Starting index of result set from which to return subsidiaries (default to 0)
    # @option opts [Integer] :limit The maximum number of subsidiaries to return in the response. (default to 100)
    # @option opts [String] :sort The field by which to sort the list of subsidiaries. Possible values:&lt;ul&gt;&lt;li&gt;name&lt;/li&gt;&lt;li&gt;primary_domain&lt;/li&gt;&lt;/ul&gt;&lt;/br&gt;Sort order can be specified by appending \&quot;asc\&quot; or \&quot;desc\&quot; to the field name (e.g. \&quot;name|asc\&quot; or \&quot;primary_domain|desc\&quot;).
    # @option opts [String] :version_id The version ID of the ecosystem subsidiaries data, represented as a hash string. This parameter is required to ensure data consistency and prevent stale data. If a new version of the ecosystem subsidiaries data is written, the version ID will be updated. By including this parameter in the request, the client can ensure that the response will be invalidated if a new version is written.
    # @return [Array<(DomainFemEcosystemSubsidiariesEntitiesResponse, Integer, Hash)>] DomainFemEcosystemSubsidiariesEntitiesResponse data, response status code and response headers
    def combined_ecosystem_subsidiaries_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExposureManagementApi.combined_ecosystem_subsidiaries ...'
      end
      # resource path
      local_var_path = '/fem/combined/ecosystem-subsidiaries/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'version_id'] = opts[:'version_id'] if !opts[:'version_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainFemEcosystemSubsidiariesEntitiesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ExposureManagementApi.combined_ecosystem_subsidiaries",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExposureManagementApi#combined_ecosystem_subsidiaries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete multiple external assets.
    # @param ids [Array<String>] One or more asset IDs (max: 100).
    # @param body [DomainExternalAssetAPIDeleteRequestV1]
    # @param [Hash] opts the optional parameters
    # @return [MsaspecQueryResponse]
    def delete_external_assets(ids, body, opts = {})
      data, _status_code, _headers = delete_external_assets_with_http_info(ids, body, opts)
      data
    end

    # Delete multiple external assets.
    # @param ids [Array<String>] One or more asset IDs (max: 100).
    # @param body [DomainExternalAssetAPIDeleteRequestV1]
    # @param [Hash] opts the optional parameters
    # @return [Array<(MsaspecQueryResponse, Integer, Hash)>] MsaspecQueryResponse data, response status code and response headers
    def delete_external_assets_with_http_info(ids, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExposureManagementApi.delete_external_assets ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling ExposureManagementApi.delete_external_assets"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ExposureManagementApi.delete_external_assets"
      end
      # resource path
      local_var_path = '/fem/entities/external-assets/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'MsaspecQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ExposureManagementApi.delete_external_assets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExposureManagementApi#delete_external_assets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves detailed information about ecosystem subsidiaries by ID.
    # @param ids [Array<String>] One or more asset IDs (max: 100). Find ecosystem subsidiary IDs with GET &#x60;/fem/entities/ecosystem-subsidiaries/v1&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :version_id The version ID of the ecosystem subsidiaries data, represented as a hash string. This parameter is required to ensure data consistency and prevent stale data. If a new version of the ecosystem subsidiaries data is written, the version ID will be updated. By including this parameter in the request, the client can ensure that the response will be invalidated if a new version is written.
    # @return [DomainFemEcosystemSubsidiariesEntitiesResponse]
    def get_ecosystem_subsidiaries(ids, opts = {})
      data, _status_code, _headers = get_ecosystem_subsidiaries_with_http_info(ids, opts)
      data
    end

    # Retrieves detailed information about ecosystem subsidiaries by ID.
    # @param ids [Array<String>] One or more asset IDs (max: 100). Find ecosystem subsidiary IDs with GET &#x60;/fem/entities/ecosystem-subsidiaries/v1&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :version_id The version ID of the ecosystem subsidiaries data, represented as a hash string. This parameter is required to ensure data consistency and prevent stale data. If a new version of the ecosystem subsidiaries data is written, the version ID will be updated. By including this parameter in the request, the client can ensure that the response will be invalidated if a new version is written.
    # @return [Array<(DomainFemEcosystemSubsidiariesEntitiesResponse, Integer, Hash)>] DomainFemEcosystemSubsidiariesEntitiesResponse data, response status code and response headers
    def get_ecosystem_subsidiaries_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExposureManagementApi.get_ecosystem_subsidiaries ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling ExposureManagementApi.get_ecosystem_subsidiaries"
      end
      # resource path
      local_var_path = '/fem/entities/ecosystem-subsidiaries/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)
      query_params[:'version_id'] = opts[:'version_id'] if !opts[:'version_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainFemEcosystemSubsidiariesEntitiesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ExposureManagementApi.get_ecosystem_subsidiaries",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExposureManagementApi#get_ecosystem_subsidiaries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details on external assets by providing one or more IDs.
    # @param ids [Array<String>] One or more asset IDs (max: 100). Find asset IDs with GET &#x60;/fem/queries/external-assets/v1&#x60;
    # @param [Hash] opts the optional parameters
    # @return [DomainExternalAssetsAPITypeV1]
    def get_external_assets(ids, opts = {})
      data, _status_code, _headers = get_external_assets_with_http_info(ids, opts)
      data
    end

    # Get details on external assets by providing one or more IDs.
    # @param ids [Array<String>] One or more asset IDs (max: 100). Find asset IDs with GET &#x60;/fem/queries/external-assets/v1&#x60;
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainExternalAssetsAPITypeV1, Integer, Hash)>] DomainExternalAssetsAPITypeV1 data, response status code and response headers
    def get_external_assets_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExposureManagementApi.get_external_assets ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling ExposureManagementApi.get_external_assets"
      end
      # resource path
      local_var_path = '/fem/entities/external-assets/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainExternalAssetsAPITypeV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ExposureManagementApi.get_external_assets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExposureManagementApi#get_external_assets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the details of external assets.
    # @param body [DomainExternalAssetAPIPatchRequestV1]
    # @param [Hash] opts the optional parameters
    # @return [DomainExternalAssetsAPITypeV1]
    def patch_external_assets(body, opts = {})
      data, _status_code, _headers = patch_external_assets_with_http_info(body, opts)
      data
    end

    # Update the details of external assets.
    # @param body [DomainExternalAssetAPIPatchRequestV1]
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainExternalAssetsAPITypeV1, Integer, Hash)>] DomainExternalAssetsAPITypeV1 data, response status code and response headers
    def patch_external_assets_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExposureManagementApi.patch_external_assets ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ExposureManagementApi.patch_external_assets"
      end
      # resource path
      local_var_path = '/fem/entities/external-assets/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainExternalAssetsAPITypeV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ExposureManagementApi.patch_external_assets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExposureManagementApi#patch_external_assets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a list of IDs for ecosystem subsidiaries. Use these IDs with the /entities/ecosystem-subsidiaries/v1 endpoints.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Starting index of result set from which to return subsidiaries (default to 0)
    # @option opts [Integer] :limit The maximum number of IDs to return in the response. (default to 100)
    # @option opts [String] :sort The field by which to sort the list of IDs. Possible values:&lt;ul&gt;&lt;li&gt;name&lt;/li&gt;&lt;li&gt;primary_domain&lt;/li&gt;&lt;/ul&gt;&lt;/br&gt;Sort order can be specified by appending \&quot;asc\&quot; or \&quot;desc\&quot; to the field name (e.g. \&quot;name|asc\&quot; or \&quot;primary_domain|desc\&quot;).
    # @option opts [String] :version_id The version ID of the ecosystem subsidiaries data, represented as a hash string. This parameter is required to ensure data consistency and prevent stale data. If a new version of the ecosystem subsidiaries data is written, the version ID will be updated. By including this parameter in the request, the client can ensure that the response will be invalidated if a new version is written.
    # @return [DomainFemEcosystemSubsidiariesQueryResponse]
    def query_ecosystem_subsidiaries(opts = {})
      data, _status_code, _headers = query_ecosystem_subsidiaries_with_http_info(opts)
      data
    end

    # Retrieves a list of IDs for ecosystem subsidiaries. Use these IDs with the /entities/ecosystem-subsidiaries/v1 endpoints.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Starting index of result set from which to return subsidiaries (default to 0)
    # @option opts [Integer] :limit The maximum number of IDs to return in the response. (default to 100)
    # @option opts [String] :sort The field by which to sort the list of IDs. Possible values:&lt;ul&gt;&lt;li&gt;name&lt;/li&gt;&lt;li&gt;primary_domain&lt;/li&gt;&lt;/ul&gt;&lt;/br&gt;Sort order can be specified by appending \&quot;asc\&quot; or \&quot;desc\&quot; to the field name (e.g. \&quot;name|asc\&quot; or \&quot;primary_domain|desc\&quot;).
    # @option opts [String] :version_id The version ID of the ecosystem subsidiaries data, represented as a hash string. This parameter is required to ensure data consistency and prevent stale data. If a new version of the ecosystem subsidiaries data is written, the version ID will be updated. By including this parameter in the request, the client can ensure that the response will be invalidated if a new version is written.
    # @return [Array<(DomainFemEcosystemSubsidiariesQueryResponse, Integer, Hash)>] DomainFemEcosystemSubsidiariesQueryResponse data, response status code and response headers
    def query_ecosystem_subsidiaries_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExposureManagementApi.query_ecosystem_subsidiaries ...'
      end
      # resource path
      local_var_path = '/fem/queries/ecosystem-subsidiaries/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'version_id'] = opts[:'version_id'] if !opts[:'version_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainFemEcosystemSubsidiariesQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ExposureManagementApi.query_ecosystem_subsidiaries",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExposureManagementApi#query_ecosystem_subsidiaries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of external asset IDs that match the provided filter conditions. Use these IDs with the /entities/external-assets/v1 endpoints
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset Starting index of result set from which to return IDs.
    # @option opts [Integer] :limit Number of IDs to return.
    # @option opts [String] :sort Order by fields.
    # @option opts [String] :filter Filter assets using an FQL query. Common filter options include:&lt;ul&gt;&lt;li&gt;asset_type:&#39;ip&#39;&lt;/li&gt;&lt;li&gt;last_seen_timestamp:&gt;&#39;now-7d&#39;&lt;/li&gt;&lt;/ul&gt;    &lt;/br&gt;Available filter fields that support exact match: asset_id, asset_type, confidence, connectivity_status, criticality, criticality_description, criticality_timestamp, criticality_username, data_providers, discovered_by, dns_domain.fqdn, dns_domain.isps, dns_domain.parent_domain, dns_domain.resolved_ips, dns_domain.services.applications.category, dns_domain.services.applications.cpe, dns_domain.services.applications.name, dns_domain.services.applications.vendor, dns_domain.services.applications.version, dns_domain.services.cloud_provider, dns_domain.services.cpes, dns_domain.services.hosting_provider, dns_domain.services.last_seen, dns_domain.services.platform_name, dns_domain.services.port, dns_domain.services.protocol, dns_domain.services.protocol_port, dns_domain.services.status, dns_domain.services.status_code, dns_domain.services.transport, dns_domain.type, first_seen, id, internet_exposure, ip.asn, ip.cloud_provider, ip.cloud_vm.description, ip.cloud_vm.instance_id, ip.cloud_vm.lifecycle, ip.cloud_vm.mac_address, ip.cloud_vm.owner_id, ip.cloud_vm.platform, ip.cloud_vm.private_ip, ip.cloud_vm.public_ip, ip.cloud_vm.region, ip.cloud_vm.security_groups, ip.cloud_vm.source, ip.cloud_vm.status, ip.fqdns, ip.ip_address, ip.isp, ip.location.area_code, ip.location.city, ip.location.country_code, ip.location.country_name, ip.location.postal_code, ip.location.region_code, ip.location.region_name, ip.location.timezone, ip.ptr, ip.aid, ip.services.applications.category, ip.services.applications.cpe, ip.services.applications.name, ip.services.applications.vendor, ip.services.applications.version, ip.services.cloud_provider, ip.services.cpes, ip.services.first_seen, ip.services.last_seen, ip.services.platform_name, ip.services.port, ip.services.protocol, ip.services.protocol_port, ip.services.status, ip.services.status_code, ip.services.transport, last_seen, manual, perimeter, subsidiaries.id, subsidiaries.name, triage.action, triage.assigned_to, triage.status, triage.updated_by, triage.updated_timestamp    &lt;/br&gt;Available filter fields that supports wildcard (*): asset_id, asset_type, confidence, connectivity_status, criticality, criticality_username, data_providers, discovered_by, dns_domain.fqdn, dns_domain.isps, dns_domain.parent_domain, dns_domain.resolved_ips, dns_domain.services.applications.category, dns_domain.services.applications.cpe, dns_domain.services.applications.name, dns_domain.services.applications.vendor, dns_domain.services.applications.version, dns_domain.services.cloud_provider, dns_domain.services.cpes, dns_domain.services.hosting_provider, dns_domain.services.id, dns_domain.services.platform_name, dns_domain.services.port, dns_domain.services.protocol, dns_domain.services.protocol_port, dns_domain.services.status, dns_domain.services.status_code, dns_domain.services.transport, dns_domain.type, id, internet_exposure, ip.asn, ip.cloud_vm.instance_id, ip.cloud_vm.lifecycle, ip.cloud_vm.mac_address, ip.cloud_vm.owner_id, ip.cloud_vm.platform, ip.cloud_vm.private_ip, ip.cloud_vm.public_ip, ip.cloud_vm.region, ip.cloud_vm.security_groups, ip.cloud_vm.source, ip.cloud_vm.status, ip.fqdns, ip.ip_address, ip.isp, ip.location.area_code, ip.location.city, ip.location.country_code, ip.location.country_name, ip.location.postal_code, ip.location.region_code, ip.location.region_name, ip.location.timezone, ip.ptr, ip.aid, ip.services.applications.category, ip.services.applications.cpe, ip.services.applications.name, ip.services.applications.vendor, ip.services.applications.version, ip.services.cloud_provider, ip.services.cpes, ip.services.platform_name, ip.services.port, ip.services.protocol, ip.services.protocol_port, ip.services.status, ip.services.status_code, ip.services.transport, manual, perimeter, subsidiaries.id, subsidiaries.name, triage.action, triage.assigned_to, triage.status, triage.updated_by    &lt;/br&gt;Available filter fields that supports in ([v1, v2]): asset_id, asset_type, confidence, connectivity_status, criticality, criticality_username, data_providers, discovered_by, dns_domain.fqdn, dns_domain.isps, dns_domain.parent_domain, dns_domain.services.applications.category, dns_domain.services.applications.cpe, dns_domain.services.applications.name, dns_domain.services.applications.vendor, dns_domain.services.applications.version, dns_domain.services.cloud_provider, dns_domain.services.cpes, dns_domain.services.id, dns_domain.services.platform_name, dns_domain.services.port, dns_domain.services.protocol, dns_domain.services.protocol_port, dns_domain.services.status, dns_domain.services.status_code, dns_domain.services.transport, dns_domain.type, id, internet_exposure, ip.asn, ip.cloud_vm.instance_id, ip.cloud_vm.lifecycle, ip.cloud_vm.mac_address, ip.cloud_vm.owner_id, ip.cloud_vm.platform, ip.cloud_vm.region, ip.cloud_vm.security_groups, ip.cloud_vm.source, ip.cloud_vm.status, ip.fqdns, ip.isp, ip.location.area_code, ip.location.city, ip.location.country_code, ip.location.country_name, ip.location.postal_code, ip.location.region_code, ip.location.region_name, ip.location.timezone, ip.ptr, ip.aid, ip.services.applications.category, ip.services.applications.cpe, ip.services.applications.name, ip.services.applications.vendor, ip.services.applications.version, ip.services.cloud_provider, ip.services.cpes, ip.services.platform_name, ip.services.port, ip.services.protocol, ip.services.protocol_port, ip.services.status, ip.services.status_code, ip.services.transport, manual, perimeter, subsidiaries.id, subsidiaries.name, triage.action, triage.assigned_to, triage.status, triage.updated_by    &lt;/br&gt;Available filter fields that supports range comparisons (&gt;, &lt;, &gt;&#x3D;, &lt;&#x3D;): criticality_timestamp, dns_domain.resolved_ips, dns_domain.services.first_seen, dns_domain.services.last_seen, dns_domain.services.port, dns_domain.services.status_code, first_seen, ip.cloud_vm.private_ip, ip.cloud_vm.public_ip, ip.ip_address, ip.services.first_seen, ip.services.last_seen, ip.services.port, ip.services.status_code, last_seen, triage.updated_timestamp    &lt;/br&gt;All filter fields and operations supports negation (!).
    # @return [MsaspecQueryResponse]
    def query_external_assets(opts = {})
      data, _status_code, _headers = query_external_assets_with_http_info(opts)
      data
    end

    # Get a list of external asset IDs that match the provided filter conditions. Use these IDs with the /entities/external-assets/v1 endpoints
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset Starting index of result set from which to return IDs.
    # @option opts [Integer] :limit Number of IDs to return.
    # @option opts [String] :sort Order by fields.
    # @option opts [String] :filter Filter assets using an FQL query. Common filter options include:&lt;ul&gt;&lt;li&gt;asset_type:&#39;ip&#39;&lt;/li&gt;&lt;li&gt;last_seen_timestamp:&gt;&#39;now-7d&#39;&lt;/li&gt;&lt;/ul&gt;    &lt;/br&gt;Available filter fields that support exact match: asset_id, asset_type, confidence, connectivity_status, criticality, criticality_description, criticality_timestamp, criticality_username, data_providers, discovered_by, dns_domain.fqdn, dns_domain.isps, dns_domain.parent_domain, dns_domain.resolved_ips, dns_domain.services.applications.category, dns_domain.services.applications.cpe, dns_domain.services.applications.name, dns_domain.services.applications.vendor, dns_domain.services.applications.version, dns_domain.services.cloud_provider, dns_domain.services.cpes, dns_domain.services.hosting_provider, dns_domain.services.last_seen, dns_domain.services.platform_name, dns_domain.services.port, dns_domain.services.protocol, dns_domain.services.protocol_port, dns_domain.services.status, dns_domain.services.status_code, dns_domain.services.transport, dns_domain.type, first_seen, id, internet_exposure, ip.asn, ip.cloud_provider, ip.cloud_vm.description, ip.cloud_vm.instance_id, ip.cloud_vm.lifecycle, ip.cloud_vm.mac_address, ip.cloud_vm.owner_id, ip.cloud_vm.platform, ip.cloud_vm.private_ip, ip.cloud_vm.public_ip, ip.cloud_vm.region, ip.cloud_vm.security_groups, ip.cloud_vm.source, ip.cloud_vm.status, ip.fqdns, ip.ip_address, ip.isp, ip.location.area_code, ip.location.city, ip.location.country_code, ip.location.country_name, ip.location.postal_code, ip.location.region_code, ip.location.region_name, ip.location.timezone, ip.ptr, ip.aid, ip.services.applications.category, ip.services.applications.cpe, ip.services.applications.name, ip.services.applications.vendor, ip.services.applications.version, ip.services.cloud_provider, ip.services.cpes, ip.services.first_seen, ip.services.last_seen, ip.services.platform_name, ip.services.port, ip.services.protocol, ip.services.protocol_port, ip.services.status, ip.services.status_code, ip.services.transport, last_seen, manual, perimeter, subsidiaries.id, subsidiaries.name, triage.action, triage.assigned_to, triage.status, triage.updated_by, triage.updated_timestamp    &lt;/br&gt;Available filter fields that supports wildcard (*): asset_id, asset_type, confidence, connectivity_status, criticality, criticality_username, data_providers, discovered_by, dns_domain.fqdn, dns_domain.isps, dns_domain.parent_domain, dns_domain.resolved_ips, dns_domain.services.applications.category, dns_domain.services.applications.cpe, dns_domain.services.applications.name, dns_domain.services.applications.vendor, dns_domain.services.applications.version, dns_domain.services.cloud_provider, dns_domain.services.cpes, dns_domain.services.hosting_provider, dns_domain.services.id, dns_domain.services.platform_name, dns_domain.services.port, dns_domain.services.protocol, dns_domain.services.protocol_port, dns_domain.services.status, dns_domain.services.status_code, dns_domain.services.transport, dns_domain.type, id, internet_exposure, ip.asn, ip.cloud_vm.instance_id, ip.cloud_vm.lifecycle, ip.cloud_vm.mac_address, ip.cloud_vm.owner_id, ip.cloud_vm.platform, ip.cloud_vm.private_ip, ip.cloud_vm.public_ip, ip.cloud_vm.region, ip.cloud_vm.security_groups, ip.cloud_vm.source, ip.cloud_vm.status, ip.fqdns, ip.ip_address, ip.isp, ip.location.area_code, ip.location.city, ip.location.country_code, ip.location.country_name, ip.location.postal_code, ip.location.region_code, ip.location.region_name, ip.location.timezone, ip.ptr, ip.aid, ip.services.applications.category, ip.services.applications.cpe, ip.services.applications.name, ip.services.applications.vendor, ip.services.applications.version, ip.services.cloud_provider, ip.services.cpes, ip.services.platform_name, ip.services.port, ip.services.protocol, ip.services.protocol_port, ip.services.status, ip.services.status_code, ip.services.transport, manual, perimeter, subsidiaries.id, subsidiaries.name, triage.action, triage.assigned_to, triage.status, triage.updated_by    &lt;/br&gt;Available filter fields that supports in ([v1, v2]): asset_id, asset_type, confidence, connectivity_status, criticality, criticality_username, data_providers, discovered_by, dns_domain.fqdn, dns_domain.isps, dns_domain.parent_domain, dns_domain.services.applications.category, dns_domain.services.applications.cpe, dns_domain.services.applications.name, dns_domain.services.applications.vendor, dns_domain.services.applications.version, dns_domain.services.cloud_provider, dns_domain.services.cpes, dns_domain.services.id, dns_domain.services.platform_name, dns_domain.services.port, dns_domain.services.protocol, dns_domain.services.protocol_port, dns_domain.services.status, dns_domain.services.status_code, dns_domain.services.transport, dns_domain.type, id, internet_exposure, ip.asn, ip.cloud_vm.instance_id, ip.cloud_vm.lifecycle, ip.cloud_vm.mac_address, ip.cloud_vm.owner_id, ip.cloud_vm.platform, ip.cloud_vm.region, ip.cloud_vm.security_groups, ip.cloud_vm.source, ip.cloud_vm.status, ip.fqdns, ip.isp, ip.location.area_code, ip.location.city, ip.location.country_code, ip.location.country_name, ip.location.postal_code, ip.location.region_code, ip.location.region_name, ip.location.timezone, ip.ptr, ip.aid, ip.services.applications.category, ip.services.applications.cpe, ip.services.applications.name, ip.services.applications.vendor, ip.services.applications.version, ip.services.cloud_provider, ip.services.cpes, ip.services.platform_name, ip.services.port, ip.services.protocol, ip.services.protocol_port, ip.services.status, ip.services.status_code, ip.services.transport, manual, perimeter, subsidiaries.id, subsidiaries.name, triage.action, triage.assigned_to, triage.status, triage.updated_by    &lt;/br&gt;Available filter fields that supports range comparisons (&gt;, &lt;, &gt;&#x3D;, &lt;&#x3D;): criticality_timestamp, dns_domain.resolved_ips, dns_domain.services.first_seen, dns_domain.services.last_seen, dns_domain.services.port, dns_domain.services.status_code, first_seen, ip.cloud_vm.private_ip, ip.cloud_vm.public_ip, ip.ip_address, ip.services.first_seen, ip.services.last_seen, ip.services.port, ip.services.status_code, last_seen, triage.updated_timestamp    &lt;/br&gt;All filter fields and operations supports negation (!).
    # @return [Array<(MsaspecQueryResponse, Integer, Hash)>] MsaspecQueryResponse data, response status code and response headers
    def query_external_assets_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExposureManagementApi.query_external_assets ...'
      end
      # resource path
      local_var_path = '/fem/queries/external-assets/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MsaspecQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"ExposureManagementApi.query_external_assets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExposureManagementApi#query_external_assets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
