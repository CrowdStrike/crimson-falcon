=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'cgi'

module Falcon
  class FalconContainerImageApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a registry entity using the provided details
    # @param body [RegistryassessmentExternalRegistryPayload]
    # @param [Hash] opts the optional parameters
    # @return [DomainExternalRegistryResponse]
    def create_registry_entities(body, opts = {})
      data, _status_code, _headers = create_registry_entities_with_http_info(body, opts)
      data
    end

    # Create a registry entity using the provided details
    # @param body [RegistryassessmentExternalRegistryPayload]
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainExternalRegistryResponse, Integer, Hash)>] DomainExternalRegistryResponse data, response status code and response headers
    def create_registry_entities_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FalconContainerImageApi.create_registry_entities ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FalconContainerImageApi.create_registry_entities"
      end
      # resource path
      local_var_path = '/container-security/entities/registries/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainExternalRegistryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FalconContainerImageApi.create_registry_entities",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FalconContainerImageApi#create_registry_entities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the registry entity identified by the entity UUID
    # @param ids [String] Registry entity UUID
    # @param [Hash] opts the optional parameters
    # @return [DomainExternalRegistryListResponse]
    def delete_registry_entities(ids, opts = {})
      data, _status_code, _headers = delete_registry_entities_with_http_info(ids, opts)
      data
    end

    # Delete the registry entity identified by the entity UUID
    # @param ids [String] Registry entity UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainExternalRegistryListResponse, Integer, Hash)>] DomainExternalRegistryListResponse data, response status code and response headers
    def delete_registry_entities_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FalconContainerImageApi.delete_registry_entities ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling FalconContainerImageApi.delete_registry_entities"
      end
      # resource path
      local_var_path = '/container-security/entities/registries/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = ids

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainExternalRegistryListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FalconContainerImageApi.delete_registry_entities",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FalconContainerImageApi#delete_registry_entities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get image assessment results by providing an FQL filter and paging details
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter images using a query in Falcon Query Language (FQL). Supported filters:  container_running_status, cve_id, first_seen, registry, repository, tag, vulnerability_severity
    # @option opts [Integer] :limit The upper-bound on the number of records to retrieve [1-100]
    # @option opts [Integer] :offset The offset from where to begin.
    # @option opts [String] :sort The fields to sort the records on. Supported columns:  [first_seen registry repository tag vulnerability_severity]
    # @return [ImagesExtCombinedImagesResponse]
    def get_combined_images(opts = {})
      data, _status_code, _headers = get_combined_images_with_http_info(opts)
      data
    end

    # Get image assessment results by providing an FQL filter and paging details
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter images using a query in Falcon Query Language (FQL). Supported filters:  container_running_status, cve_id, first_seen, registry, repository, tag, vulnerability_severity
    # @option opts [Integer] :limit The upper-bound on the number of records to retrieve [1-100]
    # @option opts [Integer] :offset The offset from where to begin.
    # @option opts [String] :sort The fields to sort the records on. Supported columns:  [first_seen registry repository tag vulnerability_severity]
    # @return [Array<(ImagesExtCombinedImagesResponse, Integer, Hash)>] ImagesExtCombinedImagesResponse data, response status code and response headers
    def get_combined_images_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FalconContainerImageApi.get_combined_images ...'
      end
      # resource path
      local_var_path = '/container-security/combined/image-assessment/images/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ImagesExtCombinedImagesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FalconContainerImageApi.get_combined_images",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FalconContainerImageApi#get_combined_images\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve registry entities identified by the customer id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The upper-bound on the number of records to retrieve.
    # @option opts [Integer] :offset The offset from where to begin.
    # @option opts [String] :sort The field to sort on, e.g. id.desc or id.asc.
    # @return [DomainExternalQueryResponse]
    def read_registry_entities(opts = {})
      data, _status_code, _headers = read_registry_entities_with_http_info(opts)
      data
    end

    # Retrieve registry entities identified by the customer id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The upper-bound on the number of records to retrieve.
    # @option opts [Integer] :offset The offset from where to begin.
    # @option opts [String] :sort The field to sort on, e.g. id.desc or id.asc.
    # @return [Array<(DomainExternalQueryResponse, Integer, Hash)>] DomainExternalQueryResponse data, response status code and response headers
    def read_registry_entities_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FalconContainerImageApi.read_registry_entities ...'
      end
      # resource path
      local_var_path = '/container-security/queries/registries/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainExternalQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FalconContainerImageApi.read_registry_entities",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FalconContainerImageApi#read_registry_entities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the registry entity identified by the entity UUID
    # @param ids [String] Registry entity UUID
    # @param [Hash] opts the optional parameters
    # @return [DomainExternalRegistryListResponse]
    def read_registry_entities_by_uuid(ids, opts = {})
      data, _status_code, _headers = read_registry_entities_by_uuid_with_http_info(ids, opts)
      data
    end

    # Retrieve the registry entity identified by the entity UUID
    # @param ids [String] Registry entity UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainExternalRegistryListResponse, Integer, Hash)>] DomainExternalRegistryListResponse data, response status code and response headers
    def read_registry_entities_by_uuid_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FalconContainerImageApi.read_registry_entities_by_uuid ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling FalconContainerImageApi.read_registry_entities_by_uuid"
      end
      # resource path
      local_var_path = '/container-security/entities/registries/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = ids

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainExternalRegistryListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FalconContainerImageApi.read_registry_entities_by_uuid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FalconContainerImageApi#read_registry_entities_by_uuid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the registry entity, as identified by the entity UUID, using the provided details
    # @param id [String] Registry entity UUID
    # @param body [RegistryassessmentExternalRegistryPatchPayload]
    # @param [Hash] opts the optional parameters
    # @return [DomainExternalRegistryResponse]
    def update_registry_entities(id, body, opts = {})
      data, _status_code, _headers = update_registry_entities_with_http_info(id, body, opts)
      data
    end

    # Update the registry entity, as identified by the entity UUID, using the provided details
    # @param id [String] Registry entity UUID
    # @param body [RegistryassessmentExternalRegistryPatchPayload]
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainExternalRegistryResponse, Integer, Hash)>] DomainExternalRegistryResponse data, response status code and response headers
    def update_registry_entities_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FalconContainerImageApi.update_registry_entities ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FalconContainerImageApi.update_registry_entities"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FalconContainerImageApi.update_registry_entities"
      end
      # resource path
      local_var_path = '/container-security/entities/registries/v1'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainExternalRegistryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"FalconContainerImageApi.update_registry_entities",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FalconContainerImageApi#update_registry_entities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
