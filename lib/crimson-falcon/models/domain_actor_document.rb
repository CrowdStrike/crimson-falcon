=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'date'
require 'time'

module Falcon
  # JSON definition of an Actor, also known as Adversary
  class DomainActorDocument
    # Boolean field marking if actor is active
    attr_accessor :active

    # Actor type, one of: targeted, ecrime
    attr_accessor :actor_type

    # Actor's family.
    attr_accessor :animal_classifier

    # actor's capabilities, some examples: RAT,Ransomware,Spearphishing,Downloader,Backdoor,InformationStealer,exploit,CredentialHarvesting,dropper,DenialOfService,Loader,Phishing
    attr_accessor :capabilities

    attr_accessor :capability

    # Actor's document creation date when it was added to the Falcon portal in unix timestamp format
    attr_accessor :created_date

    # Actor's text description, partially containing structured data from other fields
    attr_accessor :description

    attr_accessor :description_length

    attr_accessor :develops_threats

    attr_accessor :develops_threats_count

    attr_accessor :ecrime_kill_chain

    # Field used to filter user's access to actor documents
    attr_accessor :entitlements

    # Actor's first activity observed date in unix timestamp format
    attr_accessor :first_activity_date

    attr_accessor :group

    attr_accessor :has_subgroup

    attr_accessor :has_subgroup_actors_count

    attr_accessor :has_successor

    attr_accessor :has_successor_actors_count

    # Numerical ID for the Actor
    attr_accessor :id

    attr_accessor :image

    attr_accessor :in_reports

    attr_accessor :in_reports_count

    attr_accessor :is_subgroup_of

    attr_accessor :is_subgroup_of_actors_count

    attr_accessor :is_successor_of

    attr_accessor :is_successor_of_actors_count

    attr_accessor :is_supported_by

    attr_accessor :is_supported_by_actors_count

    attr_accessor :kill_chain

    # Alternative names and community identifiers of an actor
    attr_accessor :known_as

    # Actor's last (most recent) activity observed date in unix timestamp format
    attr_accessor :last_activity_date

    # Actor's document last modified date in unix timestamp format
    attr_accessor :last_modified_date

    # Actor's activity motivation, one of: State-Sponsored, Criminal, Hacktivism
    attr_accessor :motivations

    # Actor's name, composed of 2 words
    attr_accessor :name

    # internal field
    attr_accessor :notify_users

    # Actor's activity objectives, one of: IntelligenceGathering, FinancialGain, IntellectualPropertyTheft, defacement, Destruction, DenialOfService
    attr_accessor :objectives

    # represents origin of actor's activity and/or members, some examples: China,Russian Federation,Eastern Europe,Iran,East Asia, South Asia
    attr_accessor :origins

    # Recent CrowdStrike's finished intelligence alerting date in unix timestamp format
    attr_accessor :recent_alerting

    attr_accessor :region

    # Rich text version of the description field
    attr_accessor :rich_text_description

    attr_accessor :sells_threats

    attr_accessor :sells_threats_count

    # Short version of the description field
    attr_accessor :short_description

    # Name in url friendly format, lowercased and spaces replaced with dash
    attr_accessor :slug

    # Status of an actor, one of: Active, Inactive, Retired
    attr_accessor :status

    attr_accessor :supports

    attr_accessor :supports_actors_count

    # Target countries of actor's activity and attacks, slug value is a 2 characters code for the country value, some examples: United States,United Kingdom,Germany,India,Japan,France,Australia,Canada,China
    attr_accessor :target_countries

    # Target economical industries of actor's activity and attacks. List of available values: Government, Financial Services, Technology, Telecommunications, Healthcare, Energy, Academic, Media, Aerospace, NGO, Manufacturing, Industrials and Engineering, Retail, Hospitality, Consulting and Professional Services, Opportunistic, Aviation, Defense, Transportation, Oil and Gas, Legal, Pharmaceutical, Logistics, Military, Automotive, Food and Beverage, Consumer Goods, Real Estate, Insurance, Agriculture, Chemicals, Utilities, Maritime, Extractive, Travel, Dissident, Cryptocurrency, Entertainment, National Government, Law Enforcement, Think Tanks, Local Government, Sports Organizations, Computer Gaming, Biomedical, Nonprofit, Financial Management & Hedge Funds, Political Parties, Architectural and Engineering, Emergency Services, Social Media, International Government, Nuclear, Research Entities, Vocational and Higher-Level Education, eCommerce
    attr_accessor :target_industries

    # Target geographic regions of actor's activity and attacks. List of available values: North America, Western Europe, Southeast Asia, Middle East, Eastern Europe, South Asia, South America, Oceania, East Asia, Central Africa, Northern Europe, Southern Europe, North Africa, Southern Africa, Central America, Central Asia, East Africa, West Africa, Caribbean
    attr_accessor :target_regions

    attr_accessor :thumbnail

    # URL at which actor profile can be accessed
    attr_accessor :url

    attr_accessor :uses_indicators_count

    attr_accessor :uses_mitre_attacks_count

    attr_accessor :uses_mitre_tactics_count

    attr_accessor :uses_mitre_techniques_count

    attr_accessor :uses_threats

    attr_accessor :uses_threats_count

    # Comma separated values of vulnerabilities by CVE codes that are exploited by actor
    attr_accessor :uses_vulnerabilities

    attr_accessor :vulnerabilities_count

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'active' => :'active',
        :'actor_type' => :'actor_type',
        :'animal_classifier' => :'animal_classifier',
        :'capabilities' => :'capabilities',
        :'capability' => :'capability',
        :'created_date' => :'created_date',
        :'description' => :'description',
        :'description_length' => :'description_length',
        :'develops_threats' => :'develops_threats',
        :'develops_threats_count' => :'develops_threats_count',
        :'ecrime_kill_chain' => :'ecrime_kill_chain',
        :'entitlements' => :'entitlements',
        :'first_activity_date' => :'first_activity_date',
        :'group' => :'group',
        :'has_subgroup' => :'has_subgroup',
        :'has_subgroup_actors_count' => :'has_subgroup_actors_count',
        :'has_successor' => :'has_successor',
        :'has_successor_actors_count' => :'has_successor_actors_count',
        :'id' => :'id',
        :'image' => :'image',
        :'in_reports' => :'in_reports',
        :'in_reports_count' => :'in_reports_count',
        :'is_subgroup_of' => :'is_subgroup_of',
        :'is_subgroup_of_actors_count' => :'is_subgroup_of_actors_count',
        :'is_successor_of' => :'is_successor_of',
        :'is_successor_of_actors_count' => :'is_successor_of_actors_count',
        :'is_supported_by' => :'is_supported_by',
        :'is_supported_by_actors_count' => :'is_supported_by_actors_count',
        :'kill_chain' => :'kill_chain',
        :'known_as' => :'known_as',
        :'last_activity_date' => :'last_activity_date',
        :'last_modified_date' => :'last_modified_date',
        :'motivations' => :'motivations',
        :'name' => :'name',
        :'notify_users' => :'notify_users',
        :'objectives' => :'objectives',
        :'origins' => :'origins',
        :'recent_alerting' => :'recent_alerting',
        :'region' => :'region',
        :'rich_text_description' => :'rich_text_description',
        :'sells_threats' => :'sells_threats',
        :'sells_threats_count' => :'sells_threats_count',
        :'short_description' => :'short_description',
        :'slug' => :'slug',
        :'status' => :'status',
        :'supports' => :'supports',
        :'supports_actors_count' => :'supports_actors_count',
        :'target_countries' => :'target_countries',
        :'target_industries' => :'target_industries',
        :'target_regions' => :'target_regions',
        :'thumbnail' => :'thumbnail',
        :'url' => :'url',
        :'uses_indicators_count' => :'uses_indicators_count',
        :'uses_mitre_attacks_count' => :'uses_mitre_attacks_count',
        :'uses_mitre_tactics_count' => :'uses_mitre_tactics_count',
        :'uses_mitre_techniques_count' => :'uses_mitre_techniques_count',
        :'uses_threats' => :'uses_threats',
        :'uses_threats_count' => :'uses_threats_count',
        :'uses_vulnerabilities' => :'uses_vulnerabilities',
        :'vulnerabilities_count' => :'vulnerabilities_count'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'active' => :'Boolean',
        :'actor_type' => :'String',
        :'animal_classifier' => :'String',
        :'capabilities' => :'Array<DomainEntity>',
        :'capability' => :'DomainEntity',
        :'created_date' => :'Integer',
        :'description' => :'String',
        :'description_length' => :'Integer',
        :'develops_threats' => :'Array<DomainThreatEntity>',
        :'develops_threats_count' => :'Integer',
        :'ecrime_kill_chain' => :'DomainECrimeKillChain',
        :'entitlements' => :'Array<DomainEntity>',
        :'first_activity_date' => :'Integer',
        :'group' => :'DomainEntity',
        :'has_subgroup' => :'Array<DomainActorEntity>',
        :'has_subgroup_actors_count' => :'Integer',
        :'has_successor' => :'Array<DomainActorEntity>',
        :'has_successor_actors_count' => :'Integer',
        :'id' => :'Integer',
        :'image' => :'DomainImage',
        :'in_reports' => :'Array<DomainActorNewsDocument>',
        :'in_reports_count' => :'Integer',
        :'is_subgroup_of' => :'Array<DomainActorEntity>',
        :'is_subgroup_of_actors_count' => :'Integer',
        :'is_successor_of' => :'Array<DomainActorEntity>',
        :'is_successor_of_actors_count' => :'Integer',
        :'is_supported_by' => :'Array<DomainActorEntity>',
        :'is_supported_by_actors_count' => :'Integer',
        :'kill_chain' => :'DomainKillChain',
        :'known_as' => :'String',
        :'last_activity_date' => :'Integer',
        :'last_modified_date' => :'Integer',
        :'motivations' => :'Array<DomainEntity>',
        :'name' => :'String',
        :'notify_users' => :'Boolean',
        :'objectives' => :'Array<DomainEntity>',
        :'origins' => :'Array<DomainEntity>',
        :'recent_alerting' => :'Integer',
        :'region' => :'DomainEntity',
        :'rich_text_description' => :'String',
        :'sells_threats' => :'Array<DomainThreatEntity>',
        :'sells_threats_count' => :'Integer',
        :'short_description' => :'String',
        :'slug' => :'String',
        :'status' => :'String',
        :'supports' => :'Array<DomainActorEntity>',
        :'supports_actors_count' => :'Integer',
        :'target_countries' => :'Array<DomainEntity>',
        :'target_industries' => :'Array<DomainEntity>',
        :'target_regions' => :'Array<DomainEntity>',
        :'thumbnail' => :'DomainImage',
        :'url' => :'String',
        :'uses_indicators_count' => :'Integer',
        :'uses_mitre_attacks_count' => :'Integer',
        :'uses_mitre_tactics_count' => :'Integer',
        :'uses_mitre_techniques_count' => :'Integer',
        :'uses_threats' => :'Array<DomainThreatEntity>',
        :'uses_threats_count' => :'Integer',
        :'uses_vulnerabilities' => :'Array<String>',
        :'vulnerabilities_count' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Falcon::DomainActorDocument` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Falcon::DomainActorDocument`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      end

      if attributes.key?(:'actor_type')
        self.actor_type = attributes[:'actor_type']
      end

      if attributes.key?(:'animal_classifier')
        self.animal_classifier = attributes[:'animal_classifier']
      end

      if attributes.key?(:'capabilities')
        if (value = attributes[:'capabilities']).is_a?(Array)
          self.capabilities = value
        end
      end

      if attributes.key?(:'capability')
        self.capability = attributes[:'capability']
      end

      if attributes.key?(:'created_date')
        self.created_date = attributes[:'created_date']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'description_length')
        self.description_length = attributes[:'description_length']
      end

      if attributes.key?(:'develops_threats')
        if (value = attributes[:'develops_threats']).is_a?(Array)
          self.develops_threats = value
        end
      end

      if attributes.key?(:'develops_threats_count')
        self.develops_threats_count = attributes[:'develops_threats_count']
      end

      if attributes.key?(:'ecrime_kill_chain')
        self.ecrime_kill_chain = attributes[:'ecrime_kill_chain']
      end

      if attributes.key?(:'entitlements')
        if (value = attributes[:'entitlements']).is_a?(Array)
          self.entitlements = value
        end
      end

      if attributes.key?(:'first_activity_date')
        self.first_activity_date = attributes[:'first_activity_date']
      end

      if attributes.key?(:'group')
        self.group = attributes[:'group']
      end

      if attributes.key?(:'has_subgroup')
        if (value = attributes[:'has_subgroup']).is_a?(Array)
          self.has_subgroup = value
        end
      end

      if attributes.key?(:'has_subgroup_actors_count')
        self.has_subgroup_actors_count = attributes[:'has_subgroup_actors_count']
      end

      if attributes.key?(:'has_successor')
        if (value = attributes[:'has_successor']).is_a?(Array)
          self.has_successor = value
        end
      end

      if attributes.key?(:'has_successor_actors_count')
        self.has_successor_actors_count = attributes[:'has_successor_actors_count']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'image')
        self.image = attributes[:'image']
      end

      if attributes.key?(:'in_reports')
        if (value = attributes[:'in_reports']).is_a?(Array)
          self.in_reports = value
        end
      end

      if attributes.key?(:'in_reports_count')
        self.in_reports_count = attributes[:'in_reports_count']
      end

      if attributes.key?(:'is_subgroup_of')
        if (value = attributes[:'is_subgroup_of']).is_a?(Array)
          self.is_subgroup_of = value
        end
      end

      if attributes.key?(:'is_subgroup_of_actors_count')
        self.is_subgroup_of_actors_count = attributes[:'is_subgroup_of_actors_count']
      end

      if attributes.key?(:'is_successor_of')
        if (value = attributes[:'is_successor_of']).is_a?(Array)
          self.is_successor_of = value
        end
      end

      if attributes.key?(:'is_successor_of_actors_count')
        self.is_successor_of_actors_count = attributes[:'is_successor_of_actors_count']
      end

      if attributes.key?(:'is_supported_by')
        if (value = attributes[:'is_supported_by']).is_a?(Array)
          self.is_supported_by = value
        end
      end

      if attributes.key?(:'is_supported_by_actors_count')
        self.is_supported_by_actors_count = attributes[:'is_supported_by_actors_count']
      end

      if attributes.key?(:'kill_chain')
        self.kill_chain = attributes[:'kill_chain']
      end

      if attributes.key?(:'known_as')
        self.known_as = attributes[:'known_as']
      end

      if attributes.key?(:'last_activity_date')
        self.last_activity_date = attributes[:'last_activity_date']
      end

      if attributes.key?(:'last_modified_date')
        self.last_modified_date = attributes[:'last_modified_date']
      end

      if attributes.key?(:'motivations')
        if (value = attributes[:'motivations']).is_a?(Array)
          self.motivations = value
        end
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'notify_users')
        self.notify_users = attributes[:'notify_users']
      end

      if attributes.key?(:'objectives')
        if (value = attributes[:'objectives']).is_a?(Array)
          self.objectives = value
        end
      end

      if attributes.key?(:'origins')
        if (value = attributes[:'origins']).is_a?(Array)
          self.origins = value
        end
      end

      if attributes.key?(:'recent_alerting')
        self.recent_alerting = attributes[:'recent_alerting']
      end

      if attributes.key?(:'region')
        self.region = attributes[:'region']
      end

      if attributes.key?(:'rich_text_description')
        self.rich_text_description = attributes[:'rich_text_description']
      end

      if attributes.key?(:'sells_threats')
        if (value = attributes[:'sells_threats']).is_a?(Array)
          self.sells_threats = value
        end
      end

      if attributes.key?(:'sells_threats_count')
        self.sells_threats_count = attributes[:'sells_threats_count']
      end

      if attributes.key?(:'short_description')
        self.short_description = attributes[:'short_description']
      end

      if attributes.key?(:'slug')
        self.slug = attributes[:'slug']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'supports')
        if (value = attributes[:'supports']).is_a?(Array)
          self.supports = value
        end
      end

      if attributes.key?(:'supports_actors_count')
        self.supports_actors_count = attributes[:'supports_actors_count']
      end

      if attributes.key?(:'target_countries')
        if (value = attributes[:'target_countries']).is_a?(Array)
          self.target_countries = value
        end
      end

      if attributes.key?(:'target_industries')
        if (value = attributes[:'target_industries']).is_a?(Array)
          self.target_industries = value
        end
      end

      if attributes.key?(:'target_regions')
        if (value = attributes[:'target_regions']).is_a?(Array)
          self.target_regions = value
        end
      end

      if attributes.key?(:'thumbnail')
        self.thumbnail = attributes[:'thumbnail']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'uses_indicators_count')
        self.uses_indicators_count = attributes[:'uses_indicators_count']
      end

      if attributes.key?(:'uses_mitre_attacks_count')
        self.uses_mitre_attacks_count = attributes[:'uses_mitre_attacks_count']
      end

      if attributes.key?(:'uses_mitre_tactics_count')
        self.uses_mitre_tactics_count = attributes[:'uses_mitre_tactics_count']
      end

      if attributes.key?(:'uses_mitre_techniques_count')
        self.uses_mitre_techniques_count = attributes[:'uses_mitre_techniques_count']
      end

      if attributes.key?(:'uses_threats')
        if (value = attributes[:'uses_threats']).is_a?(Array)
          self.uses_threats = value
        end
      end

      if attributes.key?(:'uses_threats_count')
        self.uses_threats_count = attributes[:'uses_threats_count']
      end

      if attributes.key?(:'uses_vulnerabilities')
        if (value = attributes[:'uses_vulnerabilities']).is_a?(Array)
          self.uses_vulnerabilities = value
        end
      end

      if attributes.key?(:'vulnerabilities_count')
        self.vulnerabilities_count = attributes[:'vulnerabilities_count']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @active.nil?
        invalid_properties.push('invalid value for "active", active cannot be nil.')
      end

      if @capabilities.nil?
        invalid_properties.push('invalid value for "capabilities", capabilities cannot be nil.')
      end

      if @created_date.nil?
        invalid_properties.push('invalid value for "created_date", created_date cannot be nil.')
      end

      if @first_activity_date.nil?
        invalid_properties.push('invalid value for "first_activity_date", first_activity_date cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @known_as.nil?
        invalid_properties.push('invalid value for "known_as", known_as cannot be nil.')
      end

      if @last_activity_date.nil?
        invalid_properties.push('invalid value for "last_activity_date", last_activity_date cannot be nil.')
      end

      if @last_modified_date.nil?
        invalid_properties.push('invalid value for "last_modified_date", last_modified_date cannot be nil.')
      end

      if @motivations.nil?
        invalid_properties.push('invalid value for "motivations", motivations cannot be nil.')
      end

      if @notify_users.nil?
        invalid_properties.push('invalid value for "notify_users", notify_users cannot be nil.')
      end

      if @objectives.nil?
        invalid_properties.push('invalid value for "objectives", objectives cannot be nil.')
      end

      if @origins.nil?
        invalid_properties.push('invalid value for "origins", origins cannot be nil.')
      end

      if @short_description.nil?
        invalid_properties.push('invalid value for "short_description", short_description cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @target_countries.nil?
        invalid_properties.push('invalid value for "target_countries", target_countries cannot be nil.')
      end

      if @target_industries.nil?
        invalid_properties.push('invalid value for "target_industries", target_industries cannot be nil.')
      end

      if @target_regions.nil?
        invalid_properties.push('invalid value for "target_regions", target_regions cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @active.nil?
      return false if @capabilities.nil?
      return false if @created_date.nil?
      return false if @first_activity_date.nil?
      return false if @id.nil?
      return false if @known_as.nil?
      return false if @last_activity_date.nil?
      return false if @last_modified_date.nil?
      return false if @motivations.nil?
      return false if @notify_users.nil?
      return false if @objectives.nil?
      return false if @origins.nil?
      return false if @short_description.nil?
      return false if @status.nil?
      return false if @target_countries.nil?
      return false if @target_industries.nil?
      return false if @target_regions.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          active == o.active &&
          actor_type == o.actor_type &&
          animal_classifier == o.animal_classifier &&
          capabilities == o.capabilities &&
          capability == o.capability &&
          created_date == o.created_date &&
          description == o.description &&
          description_length == o.description_length &&
          develops_threats == o.develops_threats &&
          develops_threats_count == o.develops_threats_count &&
          ecrime_kill_chain == o.ecrime_kill_chain &&
          entitlements == o.entitlements &&
          first_activity_date == o.first_activity_date &&
          group == o.group &&
          has_subgroup == o.has_subgroup &&
          has_subgroup_actors_count == o.has_subgroup_actors_count &&
          has_successor == o.has_successor &&
          has_successor_actors_count == o.has_successor_actors_count &&
          id == o.id &&
          image == o.image &&
          in_reports == o.in_reports &&
          in_reports_count == o.in_reports_count &&
          is_subgroup_of == o.is_subgroup_of &&
          is_subgroup_of_actors_count == o.is_subgroup_of_actors_count &&
          is_successor_of == o.is_successor_of &&
          is_successor_of_actors_count == o.is_successor_of_actors_count &&
          is_supported_by == o.is_supported_by &&
          is_supported_by_actors_count == o.is_supported_by_actors_count &&
          kill_chain == o.kill_chain &&
          known_as == o.known_as &&
          last_activity_date == o.last_activity_date &&
          last_modified_date == o.last_modified_date &&
          motivations == o.motivations &&
          name == o.name &&
          notify_users == o.notify_users &&
          objectives == o.objectives &&
          origins == o.origins &&
          recent_alerting == o.recent_alerting &&
          region == o.region &&
          rich_text_description == o.rich_text_description &&
          sells_threats == o.sells_threats &&
          sells_threats_count == o.sells_threats_count &&
          short_description == o.short_description &&
          slug == o.slug &&
          status == o.status &&
          supports == o.supports &&
          supports_actors_count == o.supports_actors_count &&
          target_countries == o.target_countries &&
          target_industries == o.target_industries &&
          target_regions == o.target_regions &&
          thumbnail == o.thumbnail &&
          url == o.url &&
          uses_indicators_count == o.uses_indicators_count &&
          uses_mitre_attacks_count == o.uses_mitre_attacks_count &&
          uses_mitre_tactics_count == o.uses_mitre_tactics_count &&
          uses_mitre_techniques_count == o.uses_mitre_techniques_count &&
          uses_threats == o.uses_threats &&
          uses_threats_count == o.uses_threats_count &&
          uses_vulnerabilities == o.uses_vulnerabilities &&
          vulnerabilities_count == o.vulnerabilities_count
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [active, actor_type, animal_classifier, capabilities, capability, created_date, description, description_length, develops_threats, develops_threats_count, ecrime_kill_chain, entitlements, first_activity_date, group, has_subgroup, has_subgroup_actors_count, has_successor, has_successor_actors_count, id, image, in_reports, in_reports_count, is_subgroup_of, is_subgroup_of_actors_count, is_successor_of, is_successor_of_actors_count, is_supported_by, is_supported_by_actors_count, kill_chain, known_as, last_activity_date, last_modified_date, motivations, name, notify_users, objectives, origins, recent_alerting, region, rich_text_description, sells_threats, sells_threats_count, short_description, slug, status, supports, supports_actors_count, target_countries, target_industries, target_regions, thumbnail, url, uses_indicators_count, uses_mitre_attacks_count, uses_mitre_tactics_count, uses_mitre_techniques_count, uses_threats, uses_threats_count, uses_vulnerabilities, vulnerabilities_count].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Falcon.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
