=begin
#CrowdStrike API Specification

#Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.

The version of the OpenAPI document: 2023-05-30T23:10:32Z

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module Falcon
  class ModelsAWSAccountV1
    attr_accessor :access_health

    # Alias/Name associated with the account. This is only updated once the account is in a registered state.
    attr_accessor :_alias

    attr_accessor :cid

    # Unique identifier for the cloudformation stack id used for provisioning.
    attr_accessor :cloudformation_stack_id

    # URL of the CloudFormation template to execute. This is returned when mode is to set 'cloudformation' when provisioning.
    attr_accessor :cloudformation_url

    # The 12 digit AWS account which is hosting the S3 bucket containing cloudtrail logs for this account. If this field is set, it takes precedence of the settings level field.
    attr_accessor :cloudtrail_bucket_owner_id

    # Region where the S3 bucket containing cloudtrail logs resides. This is only set if using cloudformation to provision and create the trail.
    attr_accessor :cloudtrail_bucket_region

    # Timestamp of when the account was first provisioned within CrowdStrike's system.'
    attr_accessor :created_timestamp

    # ID assigned for use with cross account IAM role access.
    attr_accessor :external_id

    # The full arn of the IAM role created in this account to control access.
    attr_accessor :iam_role_arn

    # 12 digit AWS provided unique identifier for the account.
    attr_accessor :id

    # Timestamp of when the account was last modified.
    attr_accessor :last_modified_timestamp

    # Timestamp of when the account was scanned.
    attr_accessor :last_scanned_timestamp

    # Current version of permissions associated with IAM role and granted access.
    attr_accessor :policy_version

    # Provisioning state of the account. Values can be; initiated, registered, unregistered.
    attr_accessor :provisioning_state

    # Rate limiting setting to control the maximum number of requests that can be made within the rate_limit_time duration.
    attr_accessor :rate_limit_reqs

    # Rate limiting setting to control the number of seconds for which rate_limit_reqs applies.
    attr_accessor :rate_limit_time

    # Current version of cloudformation template used to manage access.
    attr_accessor :template_version

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'access_health' => :'access_health',
        :'_alias' => :'alias',
        :'cid' => :'cid',
        :'cloudformation_stack_id' => :'cloudformation_stack_id',
        :'cloudformation_url' => :'cloudformation_url',
        :'cloudtrail_bucket_owner_id' => :'cloudtrail_bucket_owner_id',
        :'cloudtrail_bucket_region' => :'cloudtrail_bucket_region',
        :'created_timestamp' => :'created_timestamp',
        :'external_id' => :'external_id',
        :'iam_role_arn' => :'iam_role_arn',
        :'id' => :'id',
        :'last_modified_timestamp' => :'last_modified_timestamp',
        :'last_scanned_timestamp' => :'last_scanned_timestamp',
        :'policy_version' => :'policy_version',
        :'provisioning_state' => :'provisioning_state',
        :'rate_limit_reqs' => :'rate_limit_reqs',
        :'rate_limit_time' => :'rate_limit_time',
        :'template_version' => :'template_version'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'access_health' => :'ModelsAwsAccountAccessHealth',
        :'_alias' => :'String',
        :'cid' => :'String',
        :'cloudformation_stack_id' => :'String',
        :'cloudformation_url' => :'String',
        :'cloudtrail_bucket_owner_id' => :'String',
        :'cloudtrail_bucket_region' => :'String',
        :'created_timestamp' => :'String',
        :'external_id' => :'String',
        :'iam_role_arn' => :'String',
        :'id' => :'String',
        :'last_modified_timestamp' => :'String',
        :'last_scanned_timestamp' => :'String',
        :'policy_version' => :'String',
        :'provisioning_state' => :'String',
        :'rate_limit_reqs' => :'Integer',
        :'rate_limit_time' => :'Integer',
        :'template_version' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Falcon::ModelsAWSAccountV1` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Falcon::ModelsAWSAccountV1`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'access_health')
        self.access_health = attributes[:'access_health']
      end

      if attributes.key?(:'_alias')
        self._alias = attributes[:'_alias']
      end

      if attributes.key?(:'cid')
        self.cid = attributes[:'cid']
      end

      if attributes.key?(:'cloudformation_stack_id')
        self.cloudformation_stack_id = attributes[:'cloudformation_stack_id']
      end

      if attributes.key?(:'cloudformation_url')
        self.cloudformation_url = attributes[:'cloudformation_url']
      end

      if attributes.key?(:'cloudtrail_bucket_owner_id')
        self.cloudtrail_bucket_owner_id = attributes[:'cloudtrail_bucket_owner_id']
      end

      if attributes.key?(:'cloudtrail_bucket_region')
        self.cloudtrail_bucket_region = attributes[:'cloudtrail_bucket_region']
      end

      if attributes.key?(:'created_timestamp')
        self.created_timestamp = attributes[:'created_timestamp']
      end

      if attributes.key?(:'external_id')
        self.external_id = attributes[:'external_id']
      end

      if attributes.key?(:'iam_role_arn')
        self.iam_role_arn = attributes[:'iam_role_arn']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'last_modified_timestamp')
        self.last_modified_timestamp = attributes[:'last_modified_timestamp']
      end

      if attributes.key?(:'last_scanned_timestamp')
        self.last_scanned_timestamp = attributes[:'last_scanned_timestamp']
      end

      if attributes.key?(:'policy_version')
        self.policy_version = attributes[:'policy_version']
      end

      if attributes.key?(:'provisioning_state')
        self.provisioning_state = attributes[:'provisioning_state']
      end

      if attributes.key?(:'rate_limit_reqs')
        self.rate_limit_reqs = attributes[:'rate_limit_reqs']
      end

      if attributes.key?(:'rate_limit_time')
        self.rate_limit_time = attributes[:'rate_limit_time']
      end

      if attributes.key?(:'template_version')
        self.template_version = attributes[:'template_version']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          access_health == o.access_health &&
          _alias == o._alias &&
          cid == o.cid &&
          cloudformation_stack_id == o.cloudformation_stack_id &&
          cloudformation_url == o.cloudformation_url &&
          cloudtrail_bucket_owner_id == o.cloudtrail_bucket_owner_id &&
          cloudtrail_bucket_region == o.cloudtrail_bucket_region &&
          created_timestamp == o.created_timestamp &&
          external_id == o.external_id &&
          iam_role_arn == o.iam_role_arn &&
          id == o.id &&
          last_modified_timestamp == o.last_modified_timestamp &&
          last_scanned_timestamp == o.last_scanned_timestamp &&
          policy_version == o.policy_version &&
          provisioning_state == o.provisioning_state &&
          rate_limit_reqs == o.rate_limit_reqs &&
          rate_limit_time == o.rate_limit_time &&
          template_version == o.template_version
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [access_health, _alias, cid, cloudformation_stack_id, cloudformation_url, cloudtrail_bucket_owner_id, cloudtrail_bucket_region, created_timestamp, external_id, iam_role_arn, id, last_modified_timestamp, last_scanned_timestamp, policy_version, provisioning_state, rate_limit_reqs, rate_limit_time, template_version].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Falcon.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
