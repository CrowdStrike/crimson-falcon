=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

MIT License

Copyright (c) 2023 Crowdstrike

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end

require 'date'
require 'time'

module Falcon
  class DetectsExternalAlert
    # Device or sensor ID for which the Alert was generated
    attr_accessor :agent_id

    # Common linkage between multiple Alerts that belong to the same detection bouquet
    attr_accessor :aggregate_id

    # Name of the person this Alert is assigned to
    attr_accessor :assigned_to_name

    # UserID to which this Alert is assigned to
    attr_accessor :assigned_to_uid

    # UUID to which this Alert is assigned to
    attr_accessor :assigned_to_uuid

    # Unique ID of CrowdStrike customers
    attr_accessor :cid

    # An opaque internal identifier that can uniquely identify an Alert
    attr_accessor :composite_id

    # Confidence is a 1-100 integer value denoting the confidence that, when this Alert fires, it is indicative of malicious activity
    attr_accessor :confidence

    # indicates when ThreatGraph was crawled to gather info for this alert creation/update
    attr_accessor :crawled_timestamp

    # indicates when the Alert was first written to backend store
    attr_accessor :created_timestamp

    # Data Domains represents domains to which this alert belongs to
    attr_accessor :data_domains

    # Short, customer-visible summary of the detected activity
    attr_accessor :description

    # Customer visible name for the Alert's pattern
    attr_accessor :display_name

    # Boolean to know if we sent email regarding this Alert
    attr_accessor :email_sent

    # Boolean indicating if this Alert is internal or external
    attr_accessor :external

    # Vertex key which triggers the formation of the Alert
    attr_accessor :id

    # Linked Case Ids are cases that are associated with this alert
    attr_accessor :linked_case_ids

    # References to MITRE ATT&CK, which is a public framework for tracking and modeling adversary tools techniques and procedures
    attr_accessor :mitre_attack

    # Pattern Name coming either from Taxonomy or directly from the ingested Alert
    attr_accessor :name

    # End goal that an attack adversary intends to achieve according to MITRE
    attr_accessor :objective

    # Taxonomy patternID for this Alert
    attr_accessor :pattern_id

    # Platform that this Alert was triggered on e.g. Android, Windows, etc..
    attr_accessor :platform

    # Product specifies the SKU that this Alert belongs to e.g. mobile, idp, epp
    attr_accessor :product

    # Alert resolution. Could be one of the following values: true_positive, false_positive, ignored
    attr_accessor :resolution

    # Scenario was used pre-Handrails to display additional killchain context for UI alerts. With handrails, this field is mostly  obsolete in favor of tactic/technique. Still, it can be useful for determining specific pattern types that are not straightforward to distinguish from other fields alone
    attr_accessor :scenario

    # Seconds To Resolved represents the seconds elapsed since this alert has been resolved
    attr_accessor :seconds_to_resolved

    # Seconds To Triage represents the seconds elapsed since this alert has been triaged
    attr_accessor :seconds_to_triaged

    # Severity is also a 1-100 integer value, but unlike confidence severity impacts how a Alert is displayed in the UI
    attr_accessor :severity

    # Severity name is a UI friendly bucketing of the severity integer
    attr_accessor :severity_name

    # Boolean indicating if this Alert will be shown in the UI or if it's hidden'
    attr_accessor :show_in_ui

    # Source Products are products that produced events which contributed to this alert
    attr_accessor :source_products

    # Source Vendors are vendors that produced events which contributed to this alert
    attr_accessor :source_vendors

    # Could be one of the following - New, closed, in_progress, reopened
    attr_accessor :status

    # Tactic and Technique are references to MITRE ATT&CK, which is a public framework for tracking and modeling adversary tools techniques and procedures
    attr_accessor :tactic

    # Unique ID for the tactic seen in the Alert
    attr_accessor :tactic_id

    # Tags are string values associated with the alert that can be added or removed through the API
    attr_accessor :tags

    # Tactic and Technique are references to MITRE ATT&CK, which is a public framework for tracking and modeling adversary tools techniques and procedures
    attr_accessor :technique

    # Unique ID for the technique seen in the Alert
    attr_accessor :technique_id

    # stored value coming in directly from the ingested event or set by cloud in the absence of it
    attr_accessor :timestamp

    # Type of definition Detections Extensibility use. Keyed-off of Pattern of the incoming events/Alerts
    attr_accessor :type

    # indicates when the Alert was last modified
    attr_accessor :updated_timestamp

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'agent_id' => :'agent_id',
        :'aggregate_id' => :'aggregate_id',
        :'assigned_to_name' => :'assigned_to_name',
        :'assigned_to_uid' => :'assigned_to_uid',
        :'assigned_to_uuid' => :'assigned_to_uuid',
        :'cid' => :'cid',
        :'composite_id' => :'composite_id',
        :'confidence' => :'confidence',
        :'crawled_timestamp' => :'crawled_timestamp',
        :'created_timestamp' => :'created_timestamp',
        :'data_domains' => :'data_domains',
        :'description' => :'description',
        :'display_name' => :'display_name',
        :'email_sent' => :'email_sent',
        :'external' => :'external',
        :'id' => :'id',
        :'linked_case_ids' => :'linked_case_ids',
        :'mitre_attack' => :'mitre_attack',
        :'name' => :'name',
        :'objective' => :'objective',
        :'pattern_id' => :'pattern_id',
        :'platform' => :'platform',
        :'product' => :'product',
        :'resolution' => :'resolution',
        :'scenario' => :'scenario',
        :'seconds_to_resolved' => :'seconds_to_resolved',
        :'seconds_to_triaged' => :'seconds_to_triaged',
        :'severity' => :'severity',
        :'severity_name' => :'severity_name',
        :'show_in_ui' => :'show_in_ui',
        :'source_products' => :'source_products',
        :'source_vendors' => :'source_vendors',
        :'status' => :'status',
        :'tactic' => :'tactic',
        :'tactic_id' => :'tactic_id',
        :'tags' => :'tags',
        :'technique' => :'technique',
        :'technique_id' => :'technique_id',
        :'timestamp' => :'timestamp',
        :'type' => :'type',
        :'updated_timestamp' => :'updated_timestamp'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'agent_id' => :'String',
        :'aggregate_id' => :'String',
        :'assigned_to_name' => :'String',
        :'assigned_to_uid' => :'String',
        :'assigned_to_uuid' => :'String',
        :'cid' => :'String',
        :'composite_id' => :'String',
        :'confidence' => :'Integer',
        :'crawled_timestamp' => :'Time',
        :'created_timestamp' => :'Time',
        :'data_domains' => :'Array<String>',
        :'description' => :'String',
        :'display_name' => :'String',
        :'email_sent' => :'Boolean',
        :'external' => :'Boolean',
        :'id' => :'String',
        :'linked_case_ids' => :'Array<String>',
        :'mitre_attack' => :'Array<DetectsMitreAttackMapping>',
        :'name' => :'String',
        :'objective' => :'String',
        :'pattern_id' => :'Integer',
        :'platform' => :'String',
        :'product' => :'String',
        :'resolution' => :'String',
        :'scenario' => :'String',
        :'seconds_to_resolved' => :'Integer',
        :'seconds_to_triaged' => :'Integer',
        :'severity' => :'Integer',
        :'severity_name' => :'String',
        :'show_in_ui' => :'Boolean',
        :'source_products' => :'Array<String>',
        :'source_vendors' => :'Array<String>',
        :'status' => :'String',
        :'tactic' => :'String',
        :'tactic_id' => :'String',
        :'tags' => :'Array<String>',
        :'technique' => :'String',
        :'technique_id' => :'String',
        :'timestamp' => :'Time',
        :'type' => :'String',
        :'updated_timestamp' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Falcon::DetectsExternalAlert` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Falcon::DetectsExternalAlert`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'agent_id')
        self.agent_id = attributes[:'agent_id']
      end

      if attributes.key?(:'aggregate_id')
        self.aggregate_id = attributes[:'aggregate_id']
      end

      if attributes.key?(:'assigned_to_name')
        self.assigned_to_name = attributes[:'assigned_to_name']
      end

      if attributes.key?(:'assigned_to_uid')
        self.assigned_to_uid = attributes[:'assigned_to_uid']
      end

      if attributes.key?(:'assigned_to_uuid')
        self.assigned_to_uuid = attributes[:'assigned_to_uuid']
      end

      if attributes.key?(:'cid')
        self.cid = attributes[:'cid']
      end

      if attributes.key?(:'composite_id')
        self.composite_id = attributes[:'composite_id']
      end

      if attributes.key?(:'confidence')
        self.confidence = attributes[:'confidence']
      end

      if attributes.key?(:'crawled_timestamp')
        self.crawled_timestamp = attributes[:'crawled_timestamp']
      end

      if attributes.key?(:'created_timestamp')
        self.created_timestamp = attributes[:'created_timestamp']
      end

      if attributes.key?(:'data_domains')
        if (value = attributes[:'data_domains']).is_a?(Array)
          self.data_domains = value
        end
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'display_name')
        self.display_name = attributes[:'display_name']
      end

      if attributes.key?(:'email_sent')
        self.email_sent = attributes[:'email_sent']
      end

      if attributes.key?(:'external')
        self.external = attributes[:'external']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'linked_case_ids')
        if (value = attributes[:'linked_case_ids']).is_a?(Array)
          self.linked_case_ids = value
        end
      end

      if attributes.key?(:'mitre_attack')
        if (value = attributes[:'mitre_attack']).is_a?(Array)
          self.mitre_attack = value
        end
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'objective')
        self.objective = attributes[:'objective']
      end

      if attributes.key?(:'pattern_id')
        self.pattern_id = attributes[:'pattern_id']
      end

      if attributes.key?(:'platform')
        self.platform = attributes[:'platform']
      end

      if attributes.key?(:'product')
        self.product = attributes[:'product']
      end

      if attributes.key?(:'resolution')
        self.resolution = attributes[:'resolution']
      end

      if attributes.key?(:'scenario')
        self.scenario = attributes[:'scenario']
      end

      if attributes.key?(:'seconds_to_resolved')
        self.seconds_to_resolved = attributes[:'seconds_to_resolved']
      end

      if attributes.key?(:'seconds_to_triaged')
        self.seconds_to_triaged = attributes[:'seconds_to_triaged']
      end

      if attributes.key?(:'severity')
        self.severity = attributes[:'severity']
      end

      if attributes.key?(:'severity_name')
        self.severity_name = attributes[:'severity_name']
      end

      if attributes.key?(:'show_in_ui')
        self.show_in_ui = attributes[:'show_in_ui']
      end

      if attributes.key?(:'source_products')
        if (value = attributes[:'source_products']).is_a?(Array)
          self.source_products = value
        end
      end

      if attributes.key?(:'source_vendors')
        if (value = attributes[:'source_vendors']).is_a?(Array)
          self.source_vendors = value
        end
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'tactic')
        self.tactic = attributes[:'tactic']
      end

      if attributes.key?(:'tactic_id')
        self.tactic_id = attributes[:'tactic_id']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'technique')
        self.technique = attributes[:'technique']
      end

      if attributes.key?(:'technique_id')
        self.technique_id = attributes[:'technique_id']
      end

      if attributes.key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'updated_timestamp')
        self.updated_timestamp = attributes[:'updated_timestamp']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @agent_id.nil?
        invalid_properties.push('invalid value for "agent_id", agent_id cannot be nil.')
      end

      if @aggregate_id.nil?
        invalid_properties.push('invalid value for "aggregate_id", aggregate_id cannot be nil.')
      end

      if @assigned_to_name.nil?
        invalid_properties.push('invalid value for "assigned_to_name", assigned_to_name cannot be nil.')
      end

      if @assigned_to_uid.nil?
        invalid_properties.push('invalid value for "assigned_to_uid", assigned_to_uid cannot be nil.')
      end

      if @assigned_to_uuid.nil?
        invalid_properties.push('invalid value for "assigned_to_uuid", assigned_to_uuid cannot be nil.')
      end

      if @cid.nil?
        invalid_properties.push('invalid value for "cid", cid cannot be nil.')
      end

      if @composite_id.nil?
        invalid_properties.push('invalid value for "composite_id", composite_id cannot be nil.')
      end

      if @confidence.nil?
        invalid_properties.push('invalid value for "confidence", confidence cannot be nil.')
      end

      if @crawled_timestamp.nil?
        invalid_properties.push('invalid value for "crawled_timestamp", crawled_timestamp cannot be nil.')
      end

      if @created_timestamp.nil?
        invalid_properties.push('invalid value for "created_timestamp", created_timestamp cannot be nil.')
      end

      if @data_domains.nil?
        invalid_properties.push('invalid value for "data_domains", data_domains cannot be nil.')
      end

      if @description.nil?
        invalid_properties.push('invalid value for "description", description cannot be nil.')
      end

      if @display_name.nil?
        invalid_properties.push('invalid value for "display_name", display_name cannot be nil.')
      end

      if @email_sent.nil?
        invalid_properties.push('invalid value for "email_sent", email_sent cannot be nil.')
      end

      if @external.nil?
        invalid_properties.push('invalid value for "external", external cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @linked_case_ids.nil?
        invalid_properties.push('invalid value for "linked_case_ids", linked_case_ids cannot be nil.')
      end

      if @mitre_attack.nil?
        invalid_properties.push('invalid value for "mitre_attack", mitre_attack cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @objective.nil?
        invalid_properties.push('invalid value for "objective", objective cannot be nil.')
      end

      if @pattern_id.nil?
        invalid_properties.push('invalid value for "pattern_id", pattern_id cannot be nil.')
      end

      if @platform.nil?
        invalid_properties.push('invalid value for "platform", platform cannot be nil.')
      end

      if @product.nil?
        invalid_properties.push('invalid value for "product", product cannot be nil.')
      end

      if @resolution.nil?
        invalid_properties.push('invalid value for "resolution", resolution cannot be nil.')
      end

      if @scenario.nil?
        invalid_properties.push('invalid value for "scenario", scenario cannot be nil.')
      end

      if @seconds_to_resolved.nil?
        invalid_properties.push('invalid value for "seconds_to_resolved", seconds_to_resolved cannot be nil.')
      end

      if @seconds_to_triaged.nil?
        invalid_properties.push('invalid value for "seconds_to_triaged", seconds_to_triaged cannot be nil.')
      end

      if @severity.nil?
        invalid_properties.push('invalid value for "severity", severity cannot be nil.')
      end

      if @severity_name.nil?
        invalid_properties.push('invalid value for "severity_name", severity_name cannot be nil.')
      end

      if @show_in_ui.nil?
        invalid_properties.push('invalid value for "show_in_ui", show_in_ui cannot be nil.')
      end

      if @source_products.nil?
        invalid_properties.push('invalid value for "source_products", source_products cannot be nil.')
      end

      if @source_vendors.nil?
        invalid_properties.push('invalid value for "source_vendors", source_vendors cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @tactic.nil?
        invalid_properties.push('invalid value for "tactic", tactic cannot be nil.')
      end

      if @tactic_id.nil?
        invalid_properties.push('invalid value for "tactic_id", tactic_id cannot be nil.')
      end

      if @tags.nil?
        invalid_properties.push('invalid value for "tags", tags cannot be nil.')
      end

      if @technique.nil?
        invalid_properties.push('invalid value for "technique", technique cannot be nil.')
      end

      if @technique_id.nil?
        invalid_properties.push('invalid value for "technique_id", technique_id cannot be nil.')
      end

      if @timestamp.nil?
        invalid_properties.push('invalid value for "timestamp", timestamp cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @updated_timestamp.nil?
        invalid_properties.push('invalid value for "updated_timestamp", updated_timestamp cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @agent_id.nil?
      return false if @aggregate_id.nil?
      return false if @assigned_to_name.nil?
      return false if @assigned_to_uid.nil?
      return false if @assigned_to_uuid.nil?
      return false if @cid.nil?
      return false if @composite_id.nil?
      return false if @confidence.nil?
      return false if @crawled_timestamp.nil?
      return false if @created_timestamp.nil?
      return false if @data_domains.nil?
      return false if @description.nil?
      return false if @display_name.nil?
      return false if @email_sent.nil?
      return false if @external.nil?
      return false if @id.nil?
      return false if @linked_case_ids.nil?
      return false if @mitre_attack.nil?
      return false if @name.nil?
      return false if @objective.nil?
      return false if @pattern_id.nil?
      return false if @platform.nil?
      return false if @product.nil?
      return false if @resolution.nil?
      return false if @scenario.nil?
      return false if @seconds_to_resolved.nil?
      return false if @seconds_to_triaged.nil?
      return false if @severity.nil?
      return false if @severity_name.nil?
      return false if @show_in_ui.nil?
      return false if @source_products.nil?
      return false if @source_vendors.nil?
      return false if @status.nil?
      return false if @tactic.nil?
      return false if @tactic_id.nil?
      return false if @tags.nil?
      return false if @technique.nil?
      return false if @technique_id.nil?
      return false if @timestamp.nil?
      return false if @type.nil?
      return false if @updated_timestamp.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          agent_id == o.agent_id &&
          aggregate_id == o.aggregate_id &&
          assigned_to_name == o.assigned_to_name &&
          assigned_to_uid == o.assigned_to_uid &&
          assigned_to_uuid == o.assigned_to_uuid &&
          cid == o.cid &&
          composite_id == o.composite_id &&
          confidence == o.confidence &&
          crawled_timestamp == o.crawled_timestamp &&
          created_timestamp == o.created_timestamp &&
          data_domains == o.data_domains &&
          description == o.description &&
          display_name == o.display_name &&
          email_sent == o.email_sent &&
          external == o.external &&
          id == o.id &&
          linked_case_ids == o.linked_case_ids &&
          mitre_attack == o.mitre_attack &&
          name == o.name &&
          objective == o.objective &&
          pattern_id == o.pattern_id &&
          platform == o.platform &&
          product == o.product &&
          resolution == o.resolution &&
          scenario == o.scenario &&
          seconds_to_resolved == o.seconds_to_resolved &&
          seconds_to_triaged == o.seconds_to_triaged &&
          severity == o.severity &&
          severity_name == o.severity_name &&
          show_in_ui == o.show_in_ui &&
          source_products == o.source_products &&
          source_vendors == o.source_vendors &&
          status == o.status &&
          tactic == o.tactic &&
          tactic_id == o.tactic_id &&
          tags == o.tags &&
          technique == o.technique &&
          technique_id == o.technique_id &&
          timestamp == o.timestamp &&
          type == o.type &&
          updated_timestamp == o.updated_timestamp
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [agent_id, aggregate_id, assigned_to_name, assigned_to_uid, assigned_to_uuid, cid, composite_id, confidence, crawled_timestamp, created_timestamp, data_domains, description, display_name, email_sent, external, id, linked_case_ids, mitre_attack, name, objective, pattern_id, platform, product, resolution, scenario, seconds_to_resolved, seconds_to_triaged, severity, severity_name, show_in_ui, source_products, source_vendors, status, tactic, tactic_id, tags, technique, technique_id, timestamp, type, updated_timestamp].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Falcon.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
