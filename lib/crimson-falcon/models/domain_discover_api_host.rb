=begin
Crimson Falcon - Ruby Client SDK

Code auto-generated by OpenAPI Generator; DO NOT EDIT.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <https://unlicense.org>

CrowdStrike Swagger API Version: 2023-05-30T23:10:32Z

=end

require 'date'
require 'time'

module Falcon
  # Represents information about a managed, an unmanaged or an unsupported asset.
  class DomainDiscoverAPIHost
    # Whether the asset is account-enabled in Active Directory (Yes or No).
    attr_accessor :account_enabled

    attr_accessor :active_discovery

    # The user account control properties in Active Directory.
    attr_accessor :ad_user_account_control

    # The version of the Falcon sensor that's installed on the asset.
    attr_accessor :agent_version

    # The agent ID of the Falcon sensor installed on the asset.
    attr_accessor :aid

    # List of asset roles (computed or given by the user)
    attr_accessor :asset_roles

    # The first and last name of the person who is assigned to this asset.
    attr_accessor :assigned_to

    # The available disk space in the last 15 minutes on the host
    attr_accessor :available_disk_space

    # The available disk space percent in the last 15 minutes on the host
    attr_accessor :available_disk_space_pct

    # The average memory usage in the last 15 minutes on the host
    attr_accessor :average_memory_usage

    # The average memory usage percent in the last 15 minutes on the host
    attr_accessor :average_memory_usage_pct

    # The average processor usage in the last 15 minutes on the host
    attr_accessor :average_processor_usage

    # The list of found sha256 and their measurement types
    attr_accessor :bios_hashes_data

    # The id of the bios on the host
    attr_accessor :bios_id

    # The name of the asset's BIOS manufacturer.
    attr_accessor :bios_manufacturer

    # The asset's BIOS version.
    attr_accessor :bios_version

    # The asset's customer ID.
    attr_accessor :cid

    # The name of the city where the asset is located.
    attr_accessor :city

    # How the server is classified, such as production, development, disaster recovery, or user acceptance testing.
    attr_accessor :classification

    # The cloud provider assigned identifier of the cloud account the instance is located in.
    attr_accessor :cloud_account_id

    # The cloud provider environment the instance is located in (AWS/Azure/GCP).
    attr_accessor :cloud_provider

    # The cloud provider assigned identifier of the cloud region the instance is located in (e.g. “us-west-1”, “westeurope”, “asia-northeast1)
    attr_accessor :cloud_region

    # Whether or not the instance is located in a cloud account registered with cloud security posture.
    attr_accessor :cloud_registered

    # The cloud provider assigned identifier of the instance.
    attr_accessor :cloud_resource_id

    # List of computed asset roles
    attr_accessor :computed_asset_roles

    # The level of confidence that the asset is a corporate asset (25 = low confidence, 50 = medium confidence, 75 = high confidence).
    attr_accessor :confidence

    # The name of the country where the asset is located.
    attr_accessor :country

    # The manufacturer of the asset's CPU.
    attr_accessor :cpu_manufacturer

    # The name of the processor on the system
    attr_accessor :cpu_processor_name

    # The time the asset was created in Active Directory, according to LDAP info.
    attr_accessor :creation_timestamp

    # Asset criticality
    attr_accessor :criticality

    # The ID of the criticality rule that last matched on this host
    attr_accessor :criticality_rule_id

    # The last seen local IPv4 address of the asset.
    attr_accessor :current_local_ip

    # Where the data about the asset came from (such as CrowdStrike, ServiceNow, or Active Directory).
    attr_accessor :data_providers

    # How many services provided data about the asset.
    attr_accessor :data_providers_count

    # The department where the asset is used.
    attr_accessor :department

    # The descriptions of the asset in Active Directory (Cannot be used for filtering, sorting, or querying).
    attr_accessor :descriptions

    # The agent IDs of the Falcon sensors installed on the sources that discovered the asset.
    attr_accessor :discoverer_aids

    # The number of sources that discovered the asset.
    attr_accessor :discoverer_count

    # The platform names of the sources that discovered the asset.
    attr_accessor :discoverer_platform_names

    # The product type descriptions of the sources that discovered the asset.
    attr_accessor :discoverer_product_type_descs

    # The tags of the sources that discovered the asset.
    attr_accessor :discoverer_tags

    # Represents the status of a managed host (“Not Discovering“, “Passive“, “Active“ or both).
    attr_accessor :discovering_by

    # The names and sizes of the disks on the asset
    attr_accessor :disk_sizes

    # The email of the asset as listed in Active Directory.
    attr_accessor :email

    # The list of encrypted drives on the host
    attr_accessor :encrypted_drives

    # The count of encrypted drives on the host
    attr_accessor :encrypted_drives_count

    # The encryption status of the host
    attr_accessor :encryption_status

    # The type of asset (managed, unmanaged, unsupported).
    attr_accessor :entity_type

    # The external IPv4 address of the asset.
    attr_accessor :external_ip

    # Lists the data providers for each property in the response (Cannot be used for filtering, sorting, or querying).
    attr_accessor :field_metadata

    # The agent ID of the Falcon sensor on the source that first discovered the asset.
    attr_accessor :first_discoverer_aid

    # The first time the asset was seen in your environment.
    attr_accessor :first_seen_timestamp

    # The form factor of the host
    attr_accessor :form_factor

    # The fully qualified domain name of the asset.
    attr_accessor :fqdn

    # The host management groups the asset is part of.
    attr_accessor :groups

    # The asset's hostname.
    attr_accessor :hostname

    # The unique ID of the asset.
    attr_accessor :id

    # Whether the asset is exposed to the internet (Yes or Unknown).
    attr_accessor :internet_exposure

    # For Linux and Mac hosts: the major version, minor version, and patch version of the kernel for the asset. For Windows hosts: the build number of the asset.
    attr_accessor :kernel_version

    # The agent ID of the Falcon sensor installed on the source that most recently discovered the asset.
    attr_accessor :last_discoverer_aid

    # The most recent time the asset was seen in your environment.
    attr_accessor :last_seen_timestamp

    # Historical local IPv4 addresses associated with the asset.
    attr_accessor :local_ip_addresses

    # The number of historical local IPv4 addresses the asset has had.
    attr_accessor :local_ips_count

    # The location of the asset.
    attr_accessor :location

    # The number of logical cores available on the system
    attr_accessor :logical_core_count

    # Historical MAC addresses associated with the asset.
    attr_accessor :mac_addresses

    # The domain name the asset is currently joined to.
    attr_accessor :machine_domain

    # The first and last name of the person who manages this asset.
    attr_accessor :managed_by

    # The max memory usage in the last 15 minutes on the host
    attr_accessor :max_memory_usage

    # The max memory usage percent in the last 15 minutes on the host
    attr_accessor :max_memory_usage_pct

    # The max processor usage in the last 15 minutes on the host
    attr_accessor :max_processor_usage

    # The path, used and available space on mounted disks
    attr_accessor :mount_storage_info

    # The asset's network interfaces (Cannot be used for filtering, sorting, or querying).
    attr_accessor :network_interfaces

    # The number of active physical drives available on the system.
    attr_accessor :number_of_disk_drives

    # The globally unique identifier (GUID) of the asset in Active Directory.
    attr_accessor :object_guid

    # The security identifier (SID) of the asset in Active Directory.
    attr_accessor :object_sid

    # Whether the asset is at end of support (Yes, No, or Unknown).
    attr_accessor :os_is_eol

    attr_accessor :os_security

    # The OS service pack on the asset.
    attr_accessor :os_service_pack

    # The OS version of the asset.
    attr_accessor :os_version

    # The organizational unit of the asset.
    attr_accessor :ou

    # True if the user has override asset roles computed automatically
    attr_accessor :override_asset_roles

    # True if the host should not be evaluated against the criticality rules
    attr_accessor :override_criticality_rules

    # The first and last name of the person who owns this asset.
    attr_accessor :owned_by

    # The number of physical CPU cores available on the system.
    attr_accessor :physical_core_count

    # The platform name of the asset (Windows, Mac, Linux).
    attr_accessor :platform_name

    # The number of physical processors available on the system.
    attr_accessor :processor_package_count

    # The product type of the asset represented as a number (1 = Workstation, 2 = Domain Controller, 3 = Server).
    attr_accessor :product_type

    # The product type of the asset (Workstation, Domain Controller, Server).
    attr_accessor :product_type_desc

    # Whether the asset is in reduced functionality mode (Yes or No).
    attr_accessor :reduced_functionality_mode

    # The unique identifier of the asset from ServiceNow, if any.
    attr_accessor :servicenow_id

    # The site name of the domain the asset is joined to (applies only to Windows hosts).
    attr_accessor :site_name

    # The name of the U.S. state where the asset is located.
    attr_accessor :state

    # The asset's system manufacturer.
    attr_accessor :system_manufacturer

    # The asset's system product name.
    attr_accessor :system_product_name

    # The asset's system serial number.
    attr_accessor :system_serial_number

    # The sensor and cloud tags of the asset.
    attr_accessor :tags

    # Represents the unique identifier of an asset reported by Tenable
    attr_accessor :tenableio_id

    # The count of bios files measured by the firmware image
    attr_accessor :total_bios_files

    # Total amount of disk space available on the system
    attr_accessor :total_disk_space

    # The total memory of the asset
    attr_accessor :total_memory

    attr_accessor :triage

    # The list of unencrypted drives on the host
    attr_accessor :unencrypted_drives

    # The count of unencrypted drives on the host
    attr_accessor :unencrypted_drives_count

    # The used disk space in the last 15 minutes on the host
    attr_accessor :used_disk_space

    # The used disk space percent in the last 15 minutes on the host
    attr_accessor :used_disk_space_pct

    # What the asset is used for, such as production, staging, or QA.
    attr_accessor :used_for

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'account_enabled' => :'account_enabled',
        :'active_discovery' => :'active_discovery',
        :'ad_user_account_control' => :'ad_user_account_control',
        :'agent_version' => :'agent_version',
        :'aid' => :'aid',
        :'asset_roles' => :'asset_roles',
        :'assigned_to' => :'assigned_to',
        :'available_disk_space' => :'available_disk_space',
        :'available_disk_space_pct' => :'available_disk_space_pct',
        :'average_memory_usage' => :'average_memory_usage',
        :'average_memory_usage_pct' => :'average_memory_usage_pct',
        :'average_processor_usage' => :'average_processor_usage',
        :'bios_hashes_data' => :'bios_hashes_data',
        :'bios_id' => :'bios_id',
        :'bios_manufacturer' => :'bios_manufacturer',
        :'bios_version' => :'bios_version',
        :'cid' => :'cid',
        :'city' => :'city',
        :'classification' => :'classification',
        :'cloud_account_id' => :'cloud_account_id',
        :'cloud_provider' => :'cloud_provider',
        :'cloud_region' => :'cloud_region',
        :'cloud_registered' => :'cloud_registered',
        :'cloud_resource_id' => :'cloud_resource_id',
        :'computed_asset_roles' => :'computed_asset_roles',
        :'confidence' => :'confidence',
        :'country' => :'country',
        :'cpu_manufacturer' => :'cpu_manufacturer',
        :'cpu_processor_name' => :'cpu_processor_name',
        :'creation_timestamp' => :'creation_timestamp',
        :'criticality' => :'criticality',
        :'criticality_rule_id' => :'criticality_rule_id',
        :'current_local_ip' => :'current_local_ip',
        :'data_providers' => :'data_providers',
        :'data_providers_count' => :'data_providers_count',
        :'department' => :'department',
        :'descriptions' => :'descriptions',
        :'discoverer_aids' => :'discoverer_aids',
        :'discoverer_count' => :'discoverer_count',
        :'discoverer_platform_names' => :'discoverer_platform_names',
        :'discoverer_product_type_descs' => :'discoverer_product_type_descs',
        :'discoverer_tags' => :'discoverer_tags',
        :'discovering_by' => :'discovering_by',
        :'disk_sizes' => :'disk_sizes',
        :'email' => :'email',
        :'encrypted_drives' => :'encrypted_drives',
        :'encrypted_drives_count' => :'encrypted_drives_count',
        :'encryption_status' => :'encryption_status',
        :'entity_type' => :'entity_type',
        :'external_ip' => :'external_ip',
        :'field_metadata' => :'field_metadata',
        :'first_discoverer_aid' => :'first_discoverer_aid',
        :'first_seen_timestamp' => :'first_seen_timestamp',
        :'form_factor' => :'form_factor',
        :'fqdn' => :'fqdn',
        :'groups' => :'groups',
        :'hostname' => :'hostname',
        :'id' => :'id',
        :'internet_exposure' => :'internet_exposure',
        :'kernel_version' => :'kernel_version',
        :'last_discoverer_aid' => :'last_discoverer_aid',
        :'last_seen_timestamp' => :'last_seen_timestamp',
        :'local_ip_addresses' => :'local_ip_addresses',
        :'local_ips_count' => :'local_ips_count',
        :'location' => :'location',
        :'logical_core_count' => :'logical_core_count',
        :'mac_addresses' => :'mac_addresses',
        :'machine_domain' => :'machine_domain',
        :'managed_by' => :'managed_by',
        :'max_memory_usage' => :'max_memory_usage',
        :'max_memory_usage_pct' => :'max_memory_usage_pct',
        :'max_processor_usage' => :'max_processor_usage',
        :'mount_storage_info' => :'mount_storage_info',
        :'network_interfaces' => :'network_interfaces',
        :'number_of_disk_drives' => :'number_of_disk_drives',
        :'object_guid' => :'object_guid',
        :'object_sid' => :'object_sid',
        :'os_is_eol' => :'os_is_eol',
        :'os_security' => :'os_security',
        :'os_service_pack' => :'os_service_pack',
        :'os_version' => :'os_version',
        :'ou' => :'ou',
        :'override_asset_roles' => :'override_asset_roles',
        :'override_criticality_rules' => :'override_criticality_rules',
        :'owned_by' => :'owned_by',
        :'physical_core_count' => :'physical_core_count',
        :'platform_name' => :'platform_name',
        :'processor_package_count' => :'processor_package_count',
        :'product_type' => :'product_type',
        :'product_type_desc' => :'product_type_desc',
        :'reduced_functionality_mode' => :'reduced_functionality_mode',
        :'servicenow_id' => :'servicenow_id',
        :'site_name' => :'site_name',
        :'state' => :'state',
        :'system_manufacturer' => :'system_manufacturer',
        :'system_product_name' => :'system_product_name',
        :'system_serial_number' => :'system_serial_number',
        :'tags' => :'tags',
        :'tenableio_id' => :'tenableio_id',
        :'total_bios_files' => :'total_bios_files',
        :'total_disk_space' => :'total_disk_space',
        :'total_memory' => :'total_memory',
        :'triage' => :'triage',
        :'unencrypted_drives' => :'unencrypted_drives',
        :'unencrypted_drives_count' => :'unencrypted_drives_count',
        :'used_disk_space' => :'used_disk_space',
        :'used_disk_space_pct' => :'used_disk_space_pct',
        :'used_for' => :'used_for'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'account_enabled' => :'String',
        :'active_discovery' => :'DomainDiscoverAPIActiveDiscoveryHost',
        :'ad_user_account_control' => :'Integer',
        :'agent_version' => :'String',
        :'aid' => :'String',
        :'asset_roles' => :'Array<String>',
        :'assigned_to' => :'String',
        :'available_disk_space' => :'Integer',
        :'available_disk_space_pct' => :'Integer',
        :'average_memory_usage' => :'Integer',
        :'average_memory_usage_pct' => :'Integer',
        :'average_processor_usage' => :'Integer',
        :'bios_hashes_data' => :'Array<DomainDiscoverAPIBiosHashesData>',
        :'bios_id' => :'String',
        :'bios_manufacturer' => :'String',
        :'bios_version' => :'String',
        :'cid' => :'String',
        :'city' => :'String',
        :'classification' => :'String',
        :'cloud_account_id' => :'String',
        :'cloud_provider' => :'String',
        :'cloud_region' => :'String',
        :'cloud_registered' => :'Boolean',
        :'cloud_resource_id' => :'String',
        :'computed_asset_roles' => :'Array<String>',
        :'confidence' => :'Integer',
        :'country' => :'String',
        :'cpu_manufacturer' => :'String',
        :'cpu_processor_name' => :'String',
        :'creation_timestamp' => :'String',
        :'criticality' => :'String',
        :'criticality_rule_id' => :'String',
        :'current_local_ip' => :'String',
        :'data_providers' => :'Array<String>',
        :'data_providers_count' => :'Integer',
        :'department' => :'String',
        :'descriptions' => :'Array<String>',
        :'discoverer_aids' => :'Array<String>',
        :'discoverer_count' => :'Integer',
        :'discoverer_platform_names' => :'Array<String>',
        :'discoverer_product_type_descs' => :'Array<String>',
        :'discoverer_tags' => :'Array<String>',
        :'discovering_by' => :'Array<String>',
        :'disk_sizes' => :'Array<DomainDiscoverAPIDiskSize>',
        :'email' => :'String',
        :'encrypted_drives' => :'Array<String>',
        :'encrypted_drives_count' => :'Integer',
        :'encryption_status' => :'String',
        :'entity_type' => :'String',
        :'external_ip' => :'String',
        :'field_metadata' => :'Hash<String, DomainDiscoverAPIFieldMetadata>',
        :'first_discoverer_aid' => :'String',
        :'first_seen_timestamp' => :'String',
        :'form_factor' => :'String',
        :'fqdn' => :'String',
        :'groups' => :'Array<String>',
        :'hostname' => :'String',
        :'id' => :'String',
        :'internet_exposure' => :'String',
        :'kernel_version' => :'String',
        :'last_discoverer_aid' => :'String',
        :'last_seen_timestamp' => :'String',
        :'local_ip_addresses' => :'Array<String>',
        :'local_ips_count' => :'Integer',
        :'location' => :'String',
        :'logical_core_count' => :'Integer',
        :'mac_addresses' => :'Array<String>',
        :'machine_domain' => :'String',
        :'managed_by' => :'String',
        :'max_memory_usage' => :'Integer',
        :'max_memory_usage_pct' => :'Integer',
        :'max_processor_usage' => :'Integer',
        :'mount_storage_info' => :'Array<DomainDiscoverAPIMountStorageInfo>',
        :'network_interfaces' => :'Array<DomainDiscoverAPINetworkInterface>',
        :'number_of_disk_drives' => :'Integer',
        :'object_guid' => :'String',
        :'object_sid' => :'String',
        :'os_is_eol' => :'String',
        :'os_security' => :'DomainDiscoverAPIOsSecurity',
        :'os_service_pack' => :'String',
        :'os_version' => :'String',
        :'ou' => :'String',
        :'override_asset_roles' => :'Boolean',
        :'override_criticality_rules' => :'Boolean',
        :'owned_by' => :'String',
        :'physical_core_count' => :'Integer',
        :'platform_name' => :'String',
        :'processor_package_count' => :'Integer',
        :'product_type' => :'String',
        :'product_type_desc' => :'String',
        :'reduced_functionality_mode' => :'String',
        :'servicenow_id' => :'String',
        :'site_name' => :'String',
        :'state' => :'String',
        :'system_manufacturer' => :'String',
        :'system_product_name' => :'String',
        :'system_serial_number' => :'String',
        :'tags' => :'Array<String>',
        :'tenableio_id' => :'String',
        :'total_bios_files' => :'Integer',
        :'total_disk_space' => :'Integer',
        :'total_memory' => :'Integer',
        :'triage' => :'DomainDiscoverAPIHostTriage',
        :'unencrypted_drives' => :'Array<String>',
        :'unencrypted_drives_count' => :'Integer',
        :'used_disk_space' => :'Integer',
        :'used_disk_space_pct' => :'Integer',
        :'used_for' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Falcon::DomainDiscoverAPIHost` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Falcon::DomainDiscoverAPIHost`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'account_enabled')
        self.account_enabled = attributes[:'account_enabled']
      end

      if attributes.key?(:'active_discovery')
        self.active_discovery = attributes[:'active_discovery']
      end

      if attributes.key?(:'ad_user_account_control')
        self.ad_user_account_control = attributes[:'ad_user_account_control']
      end

      if attributes.key?(:'agent_version')
        self.agent_version = attributes[:'agent_version']
      end

      if attributes.key?(:'aid')
        self.aid = attributes[:'aid']
      end

      if attributes.key?(:'asset_roles')
        if (value = attributes[:'asset_roles']).is_a?(Array)
          self.asset_roles = value
        end
      end

      if attributes.key?(:'assigned_to')
        self.assigned_to = attributes[:'assigned_to']
      end

      if attributes.key?(:'available_disk_space')
        self.available_disk_space = attributes[:'available_disk_space']
      end

      if attributes.key?(:'available_disk_space_pct')
        self.available_disk_space_pct = attributes[:'available_disk_space_pct']
      end

      if attributes.key?(:'average_memory_usage')
        self.average_memory_usage = attributes[:'average_memory_usage']
      end

      if attributes.key?(:'average_memory_usage_pct')
        self.average_memory_usage_pct = attributes[:'average_memory_usage_pct']
      end

      if attributes.key?(:'average_processor_usage')
        self.average_processor_usage = attributes[:'average_processor_usage']
      end

      if attributes.key?(:'bios_hashes_data')
        if (value = attributes[:'bios_hashes_data']).is_a?(Array)
          self.bios_hashes_data = value
        end
      end

      if attributes.key?(:'bios_id')
        self.bios_id = attributes[:'bios_id']
      end

      if attributes.key?(:'bios_manufacturer')
        self.bios_manufacturer = attributes[:'bios_manufacturer']
      end

      if attributes.key?(:'bios_version')
        self.bios_version = attributes[:'bios_version']
      end

      if attributes.key?(:'cid')
        self.cid = attributes[:'cid']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'classification')
        self.classification = attributes[:'classification']
      end

      if attributes.key?(:'cloud_account_id')
        self.cloud_account_id = attributes[:'cloud_account_id']
      end

      if attributes.key?(:'cloud_provider')
        self.cloud_provider = attributes[:'cloud_provider']
      end

      if attributes.key?(:'cloud_region')
        self.cloud_region = attributes[:'cloud_region']
      end

      if attributes.key?(:'cloud_registered')
        self.cloud_registered = attributes[:'cloud_registered']
      end

      if attributes.key?(:'cloud_resource_id')
        self.cloud_resource_id = attributes[:'cloud_resource_id']
      end

      if attributes.key?(:'computed_asset_roles')
        if (value = attributes[:'computed_asset_roles']).is_a?(Array)
          self.computed_asset_roles = value
        end
      end

      if attributes.key?(:'confidence')
        self.confidence = attributes[:'confidence']
      end

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.key?(:'cpu_manufacturer')
        self.cpu_manufacturer = attributes[:'cpu_manufacturer']
      end

      if attributes.key?(:'cpu_processor_name')
        self.cpu_processor_name = attributes[:'cpu_processor_name']
      end

      if attributes.key?(:'creation_timestamp')
        self.creation_timestamp = attributes[:'creation_timestamp']
      end

      if attributes.key?(:'criticality')
        self.criticality = attributes[:'criticality']
      end

      if attributes.key?(:'criticality_rule_id')
        self.criticality_rule_id = attributes[:'criticality_rule_id']
      end

      if attributes.key?(:'current_local_ip')
        self.current_local_ip = attributes[:'current_local_ip']
      end

      if attributes.key?(:'data_providers')
        if (value = attributes[:'data_providers']).is_a?(Array)
          self.data_providers = value
        end
      end

      if attributes.key?(:'data_providers_count')
        self.data_providers_count = attributes[:'data_providers_count']
      end

      if attributes.key?(:'department')
        self.department = attributes[:'department']
      end

      if attributes.key?(:'descriptions')
        if (value = attributes[:'descriptions']).is_a?(Array)
          self.descriptions = value
        end
      end

      if attributes.key?(:'discoverer_aids')
        if (value = attributes[:'discoverer_aids']).is_a?(Array)
          self.discoverer_aids = value
        end
      end

      if attributes.key?(:'discoverer_count')
        self.discoverer_count = attributes[:'discoverer_count']
      end

      if attributes.key?(:'discoverer_platform_names')
        if (value = attributes[:'discoverer_platform_names']).is_a?(Array)
          self.discoverer_platform_names = value
        end
      end

      if attributes.key?(:'discoverer_product_type_descs')
        if (value = attributes[:'discoverer_product_type_descs']).is_a?(Array)
          self.discoverer_product_type_descs = value
        end
      end

      if attributes.key?(:'discoverer_tags')
        if (value = attributes[:'discoverer_tags']).is_a?(Array)
          self.discoverer_tags = value
        end
      end

      if attributes.key?(:'discovering_by')
        if (value = attributes[:'discovering_by']).is_a?(Array)
          self.discovering_by = value
        end
      end

      if attributes.key?(:'disk_sizes')
        if (value = attributes[:'disk_sizes']).is_a?(Array)
          self.disk_sizes = value
        end
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'encrypted_drives')
        if (value = attributes[:'encrypted_drives']).is_a?(Array)
          self.encrypted_drives = value
        end
      end

      if attributes.key?(:'encrypted_drives_count')
        self.encrypted_drives_count = attributes[:'encrypted_drives_count']
      end

      if attributes.key?(:'encryption_status')
        self.encryption_status = attributes[:'encryption_status']
      end

      if attributes.key?(:'entity_type')
        self.entity_type = attributes[:'entity_type']
      end

      if attributes.key?(:'external_ip')
        self.external_ip = attributes[:'external_ip']
      end

      if attributes.key?(:'field_metadata')
        if (value = attributes[:'field_metadata']).is_a?(Hash)
          self.field_metadata = value
        end
      end

      if attributes.key?(:'first_discoverer_aid')
        self.first_discoverer_aid = attributes[:'first_discoverer_aid']
      end

      if attributes.key?(:'first_seen_timestamp')
        self.first_seen_timestamp = attributes[:'first_seen_timestamp']
      end

      if attributes.key?(:'form_factor')
        self.form_factor = attributes[:'form_factor']
      end

      if attributes.key?(:'fqdn')
        self.fqdn = attributes[:'fqdn']
      end

      if attributes.key?(:'groups')
        if (value = attributes[:'groups']).is_a?(Array)
          self.groups = value
        end
      end

      if attributes.key?(:'hostname')
        self.hostname = attributes[:'hostname']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'internet_exposure')
        self.internet_exposure = attributes[:'internet_exposure']
      end

      if attributes.key?(:'kernel_version')
        self.kernel_version = attributes[:'kernel_version']
      end

      if attributes.key?(:'last_discoverer_aid')
        self.last_discoverer_aid = attributes[:'last_discoverer_aid']
      end

      if attributes.key?(:'last_seen_timestamp')
        self.last_seen_timestamp = attributes[:'last_seen_timestamp']
      end

      if attributes.key?(:'local_ip_addresses')
        if (value = attributes[:'local_ip_addresses']).is_a?(Array)
          self.local_ip_addresses = value
        end
      end

      if attributes.key?(:'local_ips_count')
        self.local_ips_count = attributes[:'local_ips_count']
      end

      if attributes.key?(:'location')
        self.location = attributes[:'location']
      end

      if attributes.key?(:'logical_core_count')
        self.logical_core_count = attributes[:'logical_core_count']
      end

      if attributes.key?(:'mac_addresses')
        if (value = attributes[:'mac_addresses']).is_a?(Array)
          self.mac_addresses = value
        end
      end

      if attributes.key?(:'machine_domain')
        self.machine_domain = attributes[:'machine_domain']
      end

      if attributes.key?(:'managed_by')
        self.managed_by = attributes[:'managed_by']
      end

      if attributes.key?(:'max_memory_usage')
        self.max_memory_usage = attributes[:'max_memory_usage']
      end

      if attributes.key?(:'max_memory_usage_pct')
        self.max_memory_usage_pct = attributes[:'max_memory_usage_pct']
      end

      if attributes.key?(:'max_processor_usage')
        self.max_processor_usage = attributes[:'max_processor_usage']
      end

      if attributes.key?(:'mount_storage_info')
        if (value = attributes[:'mount_storage_info']).is_a?(Array)
          self.mount_storage_info = value
        end
      end

      if attributes.key?(:'network_interfaces')
        if (value = attributes[:'network_interfaces']).is_a?(Array)
          self.network_interfaces = value
        end
      end

      if attributes.key?(:'number_of_disk_drives')
        self.number_of_disk_drives = attributes[:'number_of_disk_drives']
      end

      if attributes.key?(:'object_guid')
        self.object_guid = attributes[:'object_guid']
      end

      if attributes.key?(:'object_sid')
        self.object_sid = attributes[:'object_sid']
      end

      if attributes.key?(:'os_is_eol')
        self.os_is_eol = attributes[:'os_is_eol']
      end

      if attributes.key?(:'os_security')
        self.os_security = attributes[:'os_security']
      end

      if attributes.key?(:'os_service_pack')
        self.os_service_pack = attributes[:'os_service_pack']
      end

      if attributes.key?(:'os_version')
        self.os_version = attributes[:'os_version']
      end

      if attributes.key?(:'ou')
        self.ou = attributes[:'ou']
      end

      if attributes.key?(:'override_asset_roles')
        self.override_asset_roles = attributes[:'override_asset_roles']
      end

      if attributes.key?(:'override_criticality_rules')
        self.override_criticality_rules = attributes[:'override_criticality_rules']
      end

      if attributes.key?(:'owned_by')
        self.owned_by = attributes[:'owned_by']
      end

      if attributes.key?(:'physical_core_count')
        self.physical_core_count = attributes[:'physical_core_count']
      end

      if attributes.key?(:'platform_name')
        self.platform_name = attributes[:'platform_name']
      end

      if attributes.key?(:'processor_package_count')
        self.processor_package_count = attributes[:'processor_package_count']
      end

      if attributes.key?(:'product_type')
        self.product_type = attributes[:'product_type']
      end

      if attributes.key?(:'product_type_desc')
        self.product_type_desc = attributes[:'product_type_desc']
      end

      if attributes.key?(:'reduced_functionality_mode')
        self.reduced_functionality_mode = attributes[:'reduced_functionality_mode']
      end

      if attributes.key?(:'servicenow_id')
        self.servicenow_id = attributes[:'servicenow_id']
      end

      if attributes.key?(:'site_name')
        self.site_name = attributes[:'site_name']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'system_manufacturer')
        self.system_manufacturer = attributes[:'system_manufacturer']
      end

      if attributes.key?(:'system_product_name')
        self.system_product_name = attributes[:'system_product_name']
      end

      if attributes.key?(:'system_serial_number')
        self.system_serial_number = attributes[:'system_serial_number']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'tenableio_id')
        self.tenableio_id = attributes[:'tenableio_id']
      end

      if attributes.key?(:'total_bios_files')
        self.total_bios_files = attributes[:'total_bios_files']
      end

      if attributes.key?(:'total_disk_space')
        self.total_disk_space = attributes[:'total_disk_space']
      end

      if attributes.key?(:'total_memory')
        self.total_memory = attributes[:'total_memory']
      end

      if attributes.key?(:'triage')
        self.triage = attributes[:'triage']
      end

      if attributes.key?(:'unencrypted_drives')
        if (value = attributes[:'unencrypted_drives']).is_a?(Array)
          self.unencrypted_drives = value
        end
      end

      if attributes.key?(:'unencrypted_drives_count')
        self.unencrypted_drives_count = attributes[:'unencrypted_drives_count']
      end

      if attributes.key?(:'used_disk_space')
        self.used_disk_space = attributes[:'used_disk_space']
      end

      if attributes.key?(:'used_disk_space_pct')
        self.used_disk_space_pct = attributes[:'used_disk_space_pct']
      end

      if attributes.key?(:'used_for')
        self.used_for = attributes[:'used_for']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @cid.nil?
        invalid_properties.push('invalid value for "cid", cid cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @cid.nil?
      return false if @id.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account_enabled == o.account_enabled &&
          active_discovery == o.active_discovery &&
          ad_user_account_control == o.ad_user_account_control &&
          agent_version == o.agent_version &&
          aid == o.aid &&
          asset_roles == o.asset_roles &&
          assigned_to == o.assigned_to &&
          available_disk_space == o.available_disk_space &&
          available_disk_space_pct == o.available_disk_space_pct &&
          average_memory_usage == o.average_memory_usage &&
          average_memory_usage_pct == o.average_memory_usage_pct &&
          average_processor_usage == o.average_processor_usage &&
          bios_hashes_data == o.bios_hashes_data &&
          bios_id == o.bios_id &&
          bios_manufacturer == o.bios_manufacturer &&
          bios_version == o.bios_version &&
          cid == o.cid &&
          city == o.city &&
          classification == o.classification &&
          cloud_account_id == o.cloud_account_id &&
          cloud_provider == o.cloud_provider &&
          cloud_region == o.cloud_region &&
          cloud_registered == o.cloud_registered &&
          cloud_resource_id == o.cloud_resource_id &&
          computed_asset_roles == o.computed_asset_roles &&
          confidence == o.confidence &&
          country == o.country &&
          cpu_manufacturer == o.cpu_manufacturer &&
          cpu_processor_name == o.cpu_processor_name &&
          creation_timestamp == o.creation_timestamp &&
          criticality == o.criticality &&
          criticality_rule_id == o.criticality_rule_id &&
          current_local_ip == o.current_local_ip &&
          data_providers == o.data_providers &&
          data_providers_count == o.data_providers_count &&
          department == o.department &&
          descriptions == o.descriptions &&
          discoverer_aids == o.discoverer_aids &&
          discoverer_count == o.discoverer_count &&
          discoverer_platform_names == o.discoverer_platform_names &&
          discoverer_product_type_descs == o.discoverer_product_type_descs &&
          discoverer_tags == o.discoverer_tags &&
          discovering_by == o.discovering_by &&
          disk_sizes == o.disk_sizes &&
          email == o.email &&
          encrypted_drives == o.encrypted_drives &&
          encrypted_drives_count == o.encrypted_drives_count &&
          encryption_status == o.encryption_status &&
          entity_type == o.entity_type &&
          external_ip == o.external_ip &&
          field_metadata == o.field_metadata &&
          first_discoverer_aid == o.first_discoverer_aid &&
          first_seen_timestamp == o.first_seen_timestamp &&
          form_factor == o.form_factor &&
          fqdn == o.fqdn &&
          groups == o.groups &&
          hostname == o.hostname &&
          id == o.id &&
          internet_exposure == o.internet_exposure &&
          kernel_version == o.kernel_version &&
          last_discoverer_aid == o.last_discoverer_aid &&
          last_seen_timestamp == o.last_seen_timestamp &&
          local_ip_addresses == o.local_ip_addresses &&
          local_ips_count == o.local_ips_count &&
          location == o.location &&
          logical_core_count == o.logical_core_count &&
          mac_addresses == o.mac_addresses &&
          machine_domain == o.machine_domain &&
          managed_by == o.managed_by &&
          max_memory_usage == o.max_memory_usage &&
          max_memory_usage_pct == o.max_memory_usage_pct &&
          max_processor_usage == o.max_processor_usage &&
          mount_storage_info == o.mount_storage_info &&
          network_interfaces == o.network_interfaces &&
          number_of_disk_drives == o.number_of_disk_drives &&
          object_guid == o.object_guid &&
          object_sid == o.object_sid &&
          os_is_eol == o.os_is_eol &&
          os_security == o.os_security &&
          os_service_pack == o.os_service_pack &&
          os_version == o.os_version &&
          ou == o.ou &&
          override_asset_roles == o.override_asset_roles &&
          override_criticality_rules == o.override_criticality_rules &&
          owned_by == o.owned_by &&
          physical_core_count == o.physical_core_count &&
          platform_name == o.platform_name &&
          processor_package_count == o.processor_package_count &&
          product_type == o.product_type &&
          product_type_desc == o.product_type_desc &&
          reduced_functionality_mode == o.reduced_functionality_mode &&
          servicenow_id == o.servicenow_id &&
          site_name == o.site_name &&
          state == o.state &&
          system_manufacturer == o.system_manufacturer &&
          system_product_name == o.system_product_name &&
          system_serial_number == o.system_serial_number &&
          tags == o.tags &&
          tenableio_id == o.tenableio_id &&
          total_bios_files == o.total_bios_files &&
          total_disk_space == o.total_disk_space &&
          total_memory == o.total_memory &&
          triage == o.triage &&
          unencrypted_drives == o.unencrypted_drives &&
          unencrypted_drives_count == o.unencrypted_drives_count &&
          used_disk_space == o.used_disk_space &&
          used_disk_space_pct == o.used_disk_space_pct &&
          used_for == o.used_for
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [account_enabled, active_discovery, ad_user_account_control, agent_version, aid, asset_roles, assigned_to, available_disk_space, available_disk_space_pct, average_memory_usage, average_memory_usage_pct, average_processor_usage, bios_hashes_data, bios_id, bios_manufacturer, bios_version, cid, city, classification, cloud_account_id, cloud_provider, cloud_region, cloud_registered, cloud_resource_id, computed_asset_roles, confidence, country, cpu_manufacturer, cpu_processor_name, creation_timestamp, criticality, criticality_rule_id, current_local_ip, data_providers, data_providers_count, department, descriptions, discoverer_aids, discoverer_count, discoverer_platform_names, discoverer_product_type_descs, discoverer_tags, discovering_by, disk_sizes, email, encrypted_drives, encrypted_drives_count, encryption_status, entity_type, external_ip, field_metadata, first_discoverer_aid, first_seen_timestamp, form_factor, fqdn, groups, hostname, id, internet_exposure, kernel_version, last_discoverer_aid, last_seen_timestamp, local_ip_addresses, local_ips_count, location, logical_core_count, mac_addresses, machine_domain, managed_by, max_memory_usage, max_memory_usage_pct, max_processor_usage, mount_storage_info, network_interfaces, number_of_disk_drives, object_guid, object_sid, os_is_eol, os_security, os_service_pack, os_version, ou, override_asset_roles, override_criticality_rules, owned_by, physical_core_count, platform_name, processor_package_count, product_type, product_type_desc, reduced_functionality_mode, servicenow_id, site_name, state, system_manufacturer, system_product_name, system_serial_number, tags, tenableio_id, total_bios_files, total_disk_space, total_memory, triage, unencrypted_drives, unencrypted_drives_count, used_disk_space, used_disk_space_pct, used_for].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Falcon.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
