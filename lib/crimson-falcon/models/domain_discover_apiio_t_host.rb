=begin
#CrowdStrike API Specification

#Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.

The version of the OpenAPI document: 2023-05-30T23:10:32Z

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module Falcon
  # Represents information about a managed, an unmanaged or an unsupported asset.
  class DomainDiscoverAPIIoTHost
    # The version of the Falcon sensor that's installed on the asset.
    attr_accessor :agent_version

    # The agent ID of the Falcon sensor installed on the asset.
    attr_accessor :aid

    # The Amount of available disk space on the asset in GB
    attr_accessor :available_disk_space

    # The average memory usage in the last 15 minutes on the asset
    attr_accessor :average_memory_usage

    # The average processor usage in the last 15 minutes on the asset
    attr_accessor :average_processor_usage

    # The id of the bios on the asset
    attr_accessor :bios_id

    # The name of the asset's BIOS manufacturer.
    attr_accessor :bios_manufacturer

    # The asset's BIOS version.
    attr_accessor :bios_version

    # The business criticality of the IoT asset.
    attr_accessor :business_criticality

    # The asset's customer ID.
    attr_accessor :cid

    # The name of the city where the asset is located.
    attr_accessor :city

    # The external ID of the IoT Device in 3rd Party System(Claroty).
    attr_accessor :claroty_id

    # The level of confidence that the asset is a corporate asset (25 = low confidence, 50 = medium confidence, 75 = high confidence).
    attr_accessor :confidence

    # The name of the country where the asset is located.
    attr_accessor :country

    # The Detailed processor name
    attr_accessor :cpu_processor_name

    # The credential guard status of the asset
    attr_accessor :credential_guard_status

    # The last seen local IPv4 address of the asset.
    attr_accessor :current_local_ip

    # The asset's data providers.
    attr_accessor :data_providers

    # The number of data providers for the asset.
    attr_accessor :data_providers_count

    # The Device Class of IoT Asset
    attr_accessor :device_class

    # The Device Family of IoT Asset
    attr_accessor :device_family

    # The device guard status of the asset
    attr_accessor :device_guard_status

    # The slots of IoT Asset
    attr_accessor :device_slots

    # The Device Type of IoT Asset
    attr_accessor :device_type

    # The number of sources that discovered the asset.
    attr_accessor :discoverer_count

    # The product type descriptions of the sources that discovered the asset.
    attr_accessor :discoverer_product_type_descs

    # The names and sizes of the disks on the asset
    attr_accessor :disk_sizes

    # The list of encrypted drives on the asset
    attr_accessor :encrypted_drives

    # The count of encrypted drives on the asset
    attr_accessor :encrypted_drives_count

    # The encryption status of the asset
    attr_accessor :encryption_status

    # The type of asset (managed, unmanaged, unsupported).
    attr_accessor :entity_type

    # The external IPv4 address of the asset.
    attr_accessor :external_ip

    # Lists the data providers for each property in the response (Cannot be used for filtering, sorting, or querying).
    attr_accessor :field_metadata

    # The first time the asset was seen in your environment.
    attr_accessor :first_seen_timestamp

    # The host management groups the asset is part of.
    attr_accessor :groups

    # The asset's hostname .
    attr_accessor :hostname

    # The ID generated by ICS collector asset discovery mechanism
    attr_accessor :ics_id

    # The unique ID of the asset.
    attr_accessor :id

    # Whether the asset is exposed to the internet (Yes or Unknown)
    attr_accessor :internet_exposure

    # The iommu protection status of the host
    attr_accessor :iommu_protection_status

    # The kernel dma protection status of the asset
    attr_accessor :kernel_dma_protection_status

    # For Linux and Mac hosts: the major version, minor version, and patch version of the kernel for the asset. For Windows hosts: the build number of the asset.
    attr_accessor :kernel_version

    # The agent ID of the Falcon sensor installed on the source host that most recently discovered the asset via ICS Asset discovery mechanism
    attr_accessor :last_discoverer_ics_collector_id

    # The most recent time the asset was seen in your environment.
    attr_accessor :last_seen_timestamp

    # The IoT asset's IP address list
    attr_accessor :local_ip_addresses

    # The number of historical local IPv4 addresses the asset has had.
    attr_accessor :local_ips_count

    # The Number of Logical Cores on the asset
    attr_accessor :logical_core_count

    # The IoT asset's MAC address list
    attr_accessor :mac_addresses

    # The domain name the asset is currently joined to (applies only to Windows hosts).
    attr_accessor :machine_domain

    # The max memory usage in the last 15 minutes on the asset
    attr_accessor :max_memory_usage

    # The max processor usage in the last 15 minutes on the asset
    attr_accessor :max_processor_usage

    # The Total memory.
    attr_accessor :memory_total

    # The path, used and available space on mounted disks
    attr_accessor :mount_storage_info

    # The network ID to which device is connected.
    attr_accessor :network_id

    # The asset's network interfaces.
    attr_accessor :network_interfaces

    # The number of active physical drives available on the system
    attr_accessor :number_of_disk_drives

    # Whether the asset is at end of support (Yes, No, or Unknown)
    attr_accessor :os_is_eol

    # The OS version of the asset.
    attr_accessor :os_version

    # The organizational unit of the asset (applies only to Windows hosts).
    attr_accessor :ou

    # The number of physical CPU cores available on the system
    attr_accessor :physical_core_count

    # The platform name of the asset (Windows, Mac, Linux).
    attr_accessor :platform_name

    # The number of physical processors available on the system
    attr_accessor :processor_package_count

    # The product type of the asset represented as a number (1 = Workstation, 2 = Domain Controller, 3 = Server).
    attr_accessor :product_type

    # The product type of the asset (Workstation, Domain Controller, Server).
    attr_accessor :product_type_desc

    # The list of protocols supported by the device
    attr_accessor :protocols

    # The purdue level of IoT Asset
    attr_accessor :purdue_level

    # Whether the asset is in reduced functionality mode (Yes or No)
    attr_accessor :reduced_functionality_mode

    # The secure boot enabled status of the asset
    attr_accessor :secure_boot_enabled_status

    # The secure boot requested status of the asset
    attr_accessor :secure_boot_requested_status

    # The secure memory overwrite requested status of the asset
    attr_accessor :secure_memory_overwrite_requested_status

    # The site name of the domain the asset is joined to (applies only to Windows hosts).
    attr_accessor :site_name

    # The subnet to which device is connected.
    attr_accessor :subnet

    # The system guard status of the asset
    attr_accessor :system_guard_status

    # The asset's system manufacturer.
    attr_accessor :system_manufacturer

    # The asset's system product name.
    attr_accessor :system_product_name

    # The asset's system serial number.
    attr_accessor :system_serial_number

    # The sensor and cloud tags of the asset.
    attr_accessor :tags

    # The count of bios files measured by the firmware image
    attr_accessor :total_bios_files

    # The Total amount of disk space available on the asset in GB
    attr_accessor :total_disk_space

    # The uefi memory protection status of the asset
    attr_accessor :uefi_memory_protection_status

    # The list of unencrypted drives on the asset
    attr_accessor :unencrypted_drives

    # The count of unencrypted drives on the asset
    attr_accessor :unencrypted_drives_count

    # The Current amount of used disk space on the asset in GB
    attr_accessor :used_disk_space

    # The Virtual Zone name in which device is installed.
    attr_accessor :virtual_zone

    # The virtualization based security status of the asset
    attr_accessor :virtualization_based_security_status

    # The VLAN IDs to which device is connected.
    attr_accessor :vlan

    # The external ID of the IoT Device in 3rd Party System(Claroty Xdome)
    attr_accessor :xdome_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'agent_version' => :'agent_version',
        :'aid' => :'aid',
        :'available_disk_space' => :'available_disk_space',
        :'average_memory_usage' => :'average_memory_usage',
        :'average_processor_usage' => :'average_processor_usage',
        :'bios_id' => :'bios_id',
        :'bios_manufacturer' => :'bios_manufacturer',
        :'bios_version' => :'bios_version',
        :'business_criticality' => :'business_criticality',
        :'cid' => :'cid',
        :'city' => :'city',
        :'claroty_id' => :'claroty_id',
        :'confidence' => :'confidence',
        :'country' => :'country',
        :'cpu_processor_name' => :'cpu_processor_name',
        :'credential_guard_status' => :'credential_guard_status',
        :'current_local_ip' => :'current_local_ip',
        :'data_providers' => :'data_providers',
        :'data_providers_count' => :'data_providers_count',
        :'device_class' => :'device_class',
        :'device_family' => :'device_family',
        :'device_guard_status' => :'device_guard_status',
        :'device_slots' => :'device_slots',
        :'device_type' => :'device_type',
        :'discoverer_count' => :'discoverer_count',
        :'discoverer_product_type_descs' => :'discoverer_product_type_descs',
        :'disk_sizes' => :'disk_sizes',
        :'encrypted_drives' => :'encrypted_drives',
        :'encrypted_drives_count' => :'encrypted_drives_count',
        :'encryption_status' => :'encryption_status',
        :'entity_type' => :'entity_type',
        :'external_ip' => :'external_ip',
        :'field_metadata' => :'field_metadata',
        :'first_seen_timestamp' => :'first_seen_timestamp',
        :'groups' => :'groups',
        :'hostname' => :'hostname',
        :'ics_id' => :'ics_id',
        :'id' => :'id',
        :'internet_exposure' => :'internet_exposure',
        :'iommu_protection_status' => :'iommu_protection_status',
        :'kernel_dma_protection_status' => :'kernel_dma_protection_status',
        :'kernel_version' => :'kernel_version',
        :'last_discoverer_ics_collector_id' => :'last_discoverer_ics_collector_id',
        :'last_seen_timestamp' => :'last_seen_timestamp',
        :'local_ip_addresses' => :'local_ip_addresses',
        :'local_ips_count' => :'local_ips_count',
        :'logical_core_count' => :'logical_core_count',
        :'mac_addresses' => :'mac_addresses',
        :'machine_domain' => :'machine_domain',
        :'max_memory_usage' => :'max_memory_usage',
        :'max_processor_usage' => :'max_processor_usage',
        :'memory_total' => :'memory_total',
        :'mount_storage_info' => :'mount_storage_info',
        :'network_id' => :'network_id',
        :'network_interfaces' => :'network_interfaces',
        :'number_of_disk_drives' => :'number_of_disk_drives',
        :'os_is_eol' => :'os_is_eol',
        :'os_version' => :'os_version',
        :'ou' => :'ou',
        :'physical_core_count' => :'physical_core_count',
        :'platform_name' => :'platform_name',
        :'processor_package_count' => :'processor_package_count',
        :'product_type' => :'product_type',
        :'product_type_desc' => :'product_type_desc',
        :'protocols' => :'protocols',
        :'purdue_level' => :'purdue_level',
        :'reduced_functionality_mode' => :'reduced_functionality_mode',
        :'secure_boot_enabled_status' => :'secure_boot_enabled_status',
        :'secure_boot_requested_status' => :'secure_boot_requested_status',
        :'secure_memory_overwrite_requested_status' => :'secure_memory_overwrite_requested_status',
        :'site_name' => :'site_name',
        :'subnet' => :'subnet',
        :'system_guard_status' => :'system_guard_status',
        :'system_manufacturer' => :'system_manufacturer',
        :'system_product_name' => :'system_product_name',
        :'system_serial_number' => :'system_serial_number',
        :'tags' => :'tags',
        :'total_bios_files' => :'total_bios_files',
        :'total_disk_space' => :'total_disk_space',
        :'uefi_memory_protection_status' => :'uefi_memory_protection_status',
        :'unencrypted_drives' => :'unencrypted_drives',
        :'unencrypted_drives_count' => :'unencrypted_drives_count',
        :'used_disk_space' => :'used_disk_space',
        :'virtual_zone' => :'virtual_zone',
        :'virtualization_based_security_status' => :'virtualization_based_security_status',
        :'vlan' => :'vlan',
        :'xdome_id' => :'xdome_id'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'agent_version' => :'String',
        :'aid' => :'String',
        :'available_disk_space' => :'Integer',
        :'average_memory_usage' => :'Integer',
        :'average_processor_usage' => :'Integer',
        :'bios_id' => :'String',
        :'bios_manufacturer' => :'String',
        :'bios_version' => :'String',
        :'business_criticality' => :'String',
        :'cid' => :'String',
        :'city' => :'String',
        :'claroty_id' => :'String',
        :'confidence' => :'Integer',
        :'country' => :'String',
        :'cpu_processor_name' => :'String',
        :'credential_guard_status' => :'Boolean',
        :'current_local_ip' => :'String',
        :'data_providers' => :'Array<String>',
        :'data_providers_count' => :'Integer',
        :'device_class' => :'String',
        :'device_family' => :'String',
        :'device_guard_status' => :'Boolean',
        :'device_slots' => :'Array<DomainDiscoverAPIDeviceSlot>',
        :'device_type' => :'String',
        :'discoverer_count' => :'Integer',
        :'discoverer_product_type_descs' => :'Array<String>',
        :'disk_sizes' => :'Array<DomainDiscoverAPIDiskSize>',
        :'encrypted_drives' => :'Array<String>',
        :'encrypted_drives_count' => :'Integer',
        :'encryption_status' => :'String',
        :'entity_type' => :'String',
        :'external_ip' => :'String',
        :'field_metadata' => :'Hash<String, DomainDiscoverAPIFieldMetadata>',
        :'first_seen_timestamp' => :'String',
        :'groups' => :'Array<String>',
        :'hostname' => :'String',
        :'ics_id' => :'String',
        :'id' => :'String',
        :'internet_exposure' => :'String',
        :'iommu_protection_status' => :'String',
        :'kernel_dma_protection_status' => :'Boolean',
        :'kernel_version' => :'String',
        :'last_discoverer_ics_collector_id' => :'String',
        :'last_seen_timestamp' => :'String',
        :'local_ip_addresses' => :'Array<String>',
        :'local_ips_count' => :'Integer',
        :'logical_core_count' => :'Integer',
        :'mac_addresses' => :'Array<String>',
        :'machine_domain' => :'String',
        :'max_memory_usage' => :'Integer',
        :'max_processor_usage' => :'Integer',
        :'memory_total' => :'Integer',
        :'mount_storage_info' => :'Array<DomainDiscoverAPIMountStorageInfo>',
        :'network_id' => :'String',
        :'network_interfaces' => :'Array<DomainDiscoverAPINetworkInterface>',
        :'number_of_disk_drives' => :'Integer',
        :'os_is_eol' => :'String',
        :'os_version' => :'String',
        :'ou' => :'String',
        :'physical_core_count' => :'Integer',
        :'platform_name' => :'String',
        :'processor_package_count' => :'Integer',
        :'product_type' => :'String',
        :'product_type_desc' => :'String',
        :'protocols' => :'Array<String>',
        :'purdue_level' => :'String',
        :'reduced_functionality_mode' => :'String',
        :'secure_boot_enabled_status' => :'Boolean',
        :'secure_boot_requested_status' => :'Boolean',
        :'secure_memory_overwrite_requested_status' => :'String',
        :'site_name' => :'String',
        :'subnet' => :'String',
        :'system_guard_status' => :'String',
        :'system_manufacturer' => :'String',
        :'system_product_name' => :'String',
        :'system_serial_number' => :'String',
        :'tags' => :'Array<String>',
        :'total_bios_files' => :'Integer',
        :'total_disk_space' => :'Integer',
        :'uefi_memory_protection_status' => :'String',
        :'unencrypted_drives' => :'Array<String>',
        :'unencrypted_drives_count' => :'Integer',
        :'used_disk_space' => :'Integer',
        :'virtual_zone' => :'String',
        :'virtualization_based_security_status' => :'Boolean',
        :'vlan' => :'Array<String>',
        :'xdome_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Falcon::DomainDiscoverAPIIoTHost` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Falcon::DomainDiscoverAPIIoTHost`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'agent_version')
        self.agent_version = attributes[:'agent_version']
      end

      if attributes.key?(:'aid')
        self.aid = attributes[:'aid']
      end

      if attributes.key?(:'available_disk_space')
        self.available_disk_space = attributes[:'available_disk_space']
      end

      if attributes.key?(:'average_memory_usage')
        self.average_memory_usage = attributes[:'average_memory_usage']
      end

      if attributes.key?(:'average_processor_usage')
        self.average_processor_usage = attributes[:'average_processor_usage']
      end

      if attributes.key?(:'bios_id')
        self.bios_id = attributes[:'bios_id']
      end

      if attributes.key?(:'bios_manufacturer')
        self.bios_manufacturer = attributes[:'bios_manufacturer']
      end

      if attributes.key?(:'bios_version')
        self.bios_version = attributes[:'bios_version']
      end

      if attributes.key?(:'business_criticality')
        self.business_criticality = attributes[:'business_criticality']
      end

      if attributes.key?(:'cid')
        self.cid = attributes[:'cid']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'claroty_id')
        self.claroty_id = attributes[:'claroty_id']
      end

      if attributes.key?(:'confidence')
        self.confidence = attributes[:'confidence']
      end

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.key?(:'cpu_processor_name')
        self.cpu_processor_name = attributes[:'cpu_processor_name']
      end

      if attributes.key?(:'credential_guard_status')
        self.credential_guard_status = attributes[:'credential_guard_status']
      end

      if attributes.key?(:'current_local_ip')
        self.current_local_ip = attributes[:'current_local_ip']
      end

      if attributes.key?(:'data_providers')
        if (value = attributes[:'data_providers']).is_a?(Array)
          self.data_providers = value
        end
      end

      if attributes.key?(:'data_providers_count')
        self.data_providers_count = attributes[:'data_providers_count']
      end

      if attributes.key?(:'device_class')
        self.device_class = attributes[:'device_class']
      end

      if attributes.key?(:'device_family')
        self.device_family = attributes[:'device_family']
      end

      if attributes.key?(:'device_guard_status')
        self.device_guard_status = attributes[:'device_guard_status']
      end

      if attributes.key?(:'device_slots')
        if (value = attributes[:'device_slots']).is_a?(Array)
          self.device_slots = value
        end
      end

      if attributes.key?(:'device_type')
        self.device_type = attributes[:'device_type']
      end

      if attributes.key?(:'discoverer_count')
        self.discoverer_count = attributes[:'discoverer_count']
      end

      if attributes.key?(:'discoverer_product_type_descs')
        if (value = attributes[:'discoverer_product_type_descs']).is_a?(Array)
          self.discoverer_product_type_descs = value
        end
      end

      if attributes.key?(:'disk_sizes')
        if (value = attributes[:'disk_sizes']).is_a?(Array)
          self.disk_sizes = value
        end
      end

      if attributes.key?(:'encrypted_drives')
        if (value = attributes[:'encrypted_drives']).is_a?(Array)
          self.encrypted_drives = value
        end
      end

      if attributes.key?(:'encrypted_drives_count')
        self.encrypted_drives_count = attributes[:'encrypted_drives_count']
      end

      if attributes.key?(:'encryption_status')
        self.encryption_status = attributes[:'encryption_status']
      end

      if attributes.key?(:'entity_type')
        self.entity_type = attributes[:'entity_type']
      end

      if attributes.key?(:'external_ip')
        self.external_ip = attributes[:'external_ip']
      end

      if attributes.key?(:'field_metadata')
        if (value = attributes[:'field_metadata']).is_a?(Hash)
          self.field_metadata = value
        end
      end

      if attributes.key?(:'first_seen_timestamp')
        self.first_seen_timestamp = attributes[:'first_seen_timestamp']
      end

      if attributes.key?(:'groups')
        if (value = attributes[:'groups']).is_a?(Array)
          self.groups = value
        end
      end

      if attributes.key?(:'hostname')
        self.hostname = attributes[:'hostname']
      end

      if attributes.key?(:'ics_id')
        self.ics_id = attributes[:'ics_id']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'internet_exposure')
        self.internet_exposure = attributes[:'internet_exposure']
      end

      if attributes.key?(:'iommu_protection_status')
        self.iommu_protection_status = attributes[:'iommu_protection_status']
      end

      if attributes.key?(:'kernel_dma_protection_status')
        self.kernel_dma_protection_status = attributes[:'kernel_dma_protection_status']
      end

      if attributes.key?(:'kernel_version')
        self.kernel_version = attributes[:'kernel_version']
      end

      if attributes.key?(:'last_discoverer_ics_collector_id')
        self.last_discoverer_ics_collector_id = attributes[:'last_discoverer_ics_collector_id']
      end

      if attributes.key?(:'last_seen_timestamp')
        self.last_seen_timestamp = attributes[:'last_seen_timestamp']
      end

      if attributes.key?(:'local_ip_addresses')
        if (value = attributes[:'local_ip_addresses']).is_a?(Array)
          self.local_ip_addresses = value
        end
      end

      if attributes.key?(:'local_ips_count')
        self.local_ips_count = attributes[:'local_ips_count']
      end

      if attributes.key?(:'logical_core_count')
        self.logical_core_count = attributes[:'logical_core_count']
      end

      if attributes.key?(:'mac_addresses')
        if (value = attributes[:'mac_addresses']).is_a?(Array)
          self.mac_addresses = value
        end
      end

      if attributes.key?(:'machine_domain')
        self.machine_domain = attributes[:'machine_domain']
      end

      if attributes.key?(:'max_memory_usage')
        self.max_memory_usage = attributes[:'max_memory_usage']
      end

      if attributes.key?(:'max_processor_usage')
        self.max_processor_usage = attributes[:'max_processor_usage']
      end

      if attributes.key?(:'memory_total')
        self.memory_total = attributes[:'memory_total']
      end

      if attributes.key?(:'mount_storage_info')
        if (value = attributes[:'mount_storage_info']).is_a?(Array)
          self.mount_storage_info = value
        end
      end

      if attributes.key?(:'network_id')
        self.network_id = attributes[:'network_id']
      end

      if attributes.key?(:'network_interfaces')
        if (value = attributes[:'network_interfaces']).is_a?(Array)
          self.network_interfaces = value
        end
      end

      if attributes.key?(:'number_of_disk_drives')
        self.number_of_disk_drives = attributes[:'number_of_disk_drives']
      end

      if attributes.key?(:'os_is_eol')
        self.os_is_eol = attributes[:'os_is_eol']
      end

      if attributes.key?(:'os_version')
        self.os_version = attributes[:'os_version']
      end

      if attributes.key?(:'ou')
        self.ou = attributes[:'ou']
      end

      if attributes.key?(:'physical_core_count')
        self.physical_core_count = attributes[:'physical_core_count']
      end

      if attributes.key?(:'platform_name')
        self.platform_name = attributes[:'platform_name']
      end

      if attributes.key?(:'processor_package_count')
        self.processor_package_count = attributes[:'processor_package_count']
      end

      if attributes.key?(:'product_type')
        self.product_type = attributes[:'product_type']
      end

      if attributes.key?(:'product_type_desc')
        self.product_type_desc = attributes[:'product_type_desc']
      end

      if attributes.key?(:'protocols')
        if (value = attributes[:'protocols']).is_a?(Array)
          self.protocols = value
        end
      end

      if attributes.key?(:'purdue_level')
        self.purdue_level = attributes[:'purdue_level']
      end

      if attributes.key?(:'reduced_functionality_mode')
        self.reduced_functionality_mode = attributes[:'reduced_functionality_mode']
      end

      if attributes.key?(:'secure_boot_enabled_status')
        self.secure_boot_enabled_status = attributes[:'secure_boot_enabled_status']
      end

      if attributes.key?(:'secure_boot_requested_status')
        self.secure_boot_requested_status = attributes[:'secure_boot_requested_status']
      end

      if attributes.key?(:'secure_memory_overwrite_requested_status')
        self.secure_memory_overwrite_requested_status = attributes[:'secure_memory_overwrite_requested_status']
      end

      if attributes.key?(:'site_name')
        self.site_name = attributes[:'site_name']
      end

      if attributes.key?(:'subnet')
        self.subnet = attributes[:'subnet']
      end

      if attributes.key?(:'system_guard_status')
        self.system_guard_status = attributes[:'system_guard_status']
      end

      if attributes.key?(:'system_manufacturer')
        self.system_manufacturer = attributes[:'system_manufacturer']
      end

      if attributes.key?(:'system_product_name')
        self.system_product_name = attributes[:'system_product_name']
      end

      if attributes.key?(:'system_serial_number')
        self.system_serial_number = attributes[:'system_serial_number']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'total_bios_files')
        self.total_bios_files = attributes[:'total_bios_files']
      end

      if attributes.key?(:'total_disk_space')
        self.total_disk_space = attributes[:'total_disk_space']
      end

      if attributes.key?(:'uefi_memory_protection_status')
        self.uefi_memory_protection_status = attributes[:'uefi_memory_protection_status']
      end

      if attributes.key?(:'unencrypted_drives')
        if (value = attributes[:'unencrypted_drives']).is_a?(Array)
          self.unencrypted_drives = value
        end
      end

      if attributes.key?(:'unencrypted_drives_count')
        self.unencrypted_drives_count = attributes[:'unencrypted_drives_count']
      end

      if attributes.key?(:'used_disk_space')
        self.used_disk_space = attributes[:'used_disk_space']
      end

      if attributes.key?(:'virtual_zone')
        self.virtual_zone = attributes[:'virtual_zone']
      end

      if attributes.key?(:'virtualization_based_security_status')
        self.virtualization_based_security_status = attributes[:'virtualization_based_security_status']
      end

      if attributes.key?(:'vlan')
        if (value = attributes[:'vlan']).is_a?(Array)
          self.vlan = value
        end
      end

      if attributes.key?(:'xdome_id')
        self.xdome_id = attributes[:'xdome_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @cid.nil?
        invalid_properties.push('invalid value for "cid", cid cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @cid.nil?
      return false if @id.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          agent_version == o.agent_version &&
          aid == o.aid &&
          available_disk_space == o.available_disk_space &&
          average_memory_usage == o.average_memory_usage &&
          average_processor_usage == o.average_processor_usage &&
          bios_id == o.bios_id &&
          bios_manufacturer == o.bios_manufacturer &&
          bios_version == o.bios_version &&
          business_criticality == o.business_criticality &&
          cid == o.cid &&
          city == o.city &&
          claroty_id == o.claroty_id &&
          confidence == o.confidence &&
          country == o.country &&
          cpu_processor_name == o.cpu_processor_name &&
          credential_guard_status == o.credential_guard_status &&
          current_local_ip == o.current_local_ip &&
          data_providers == o.data_providers &&
          data_providers_count == o.data_providers_count &&
          device_class == o.device_class &&
          device_family == o.device_family &&
          device_guard_status == o.device_guard_status &&
          device_slots == o.device_slots &&
          device_type == o.device_type &&
          discoverer_count == o.discoverer_count &&
          discoverer_product_type_descs == o.discoverer_product_type_descs &&
          disk_sizes == o.disk_sizes &&
          encrypted_drives == o.encrypted_drives &&
          encrypted_drives_count == o.encrypted_drives_count &&
          encryption_status == o.encryption_status &&
          entity_type == o.entity_type &&
          external_ip == o.external_ip &&
          field_metadata == o.field_metadata &&
          first_seen_timestamp == o.first_seen_timestamp &&
          groups == o.groups &&
          hostname == o.hostname &&
          ics_id == o.ics_id &&
          id == o.id &&
          internet_exposure == o.internet_exposure &&
          iommu_protection_status == o.iommu_protection_status &&
          kernel_dma_protection_status == o.kernel_dma_protection_status &&
          kernel_version == o.kernel_version &&
          last_discoverer_ics_collector_id == o.last_discoverer_ics_collector_id &&
          last_seen_timestamp == o.last_seen_timestamp &&
          local_ip_addresses == o.local_ip_addresses &&
          local_ips_count == o.local_ips_count &&
          logical_core_count == o.logical_core_count &&
          mac_addresses == o.mac_addresses &&
          machine_domain == o.machine_domain &&
          max_memory_usage == o.max_memory_usage &&
          max_processor_usage == o.max_processor_usage &&
          memory_total == o.memory_total &&
          mount_storage_info == o.mount_storage_info &&
          network_id == o.network_id &&
          network_interfaces == o.network_interfaces &&
          number_of_disk_drives == o.number_of_disk_drives &&
          os_is_eol == o.os_is_eol &&
          os_version == o.os_version &&
          ou == o.ou &&
          physical_core_count == o.physical_core_count &&
          platform_name == o.platform_name &&
          processor_package_count == o.processor_package_count &&
          product_type == o.product_type &&
          product_type_desc == o.product_type_desc &&
          protocols == o.protocols &&
          purdue_level == o.purdue_level &&
          reduced_functionality_mode == o.reduced_functionality_mode &&
          secure_boot_enabled_status == o.secure_boot_enabled_status &&
          secure_boot_requested_status == o.secure_boot_requested_status &&
          secure_memory_overwrite_requested_status == o.secure_memory_overwrite_requested_status &&
          site_name == o.site_name &&
          subnet == o.subnet &&
          system_guard_status == o.system_guard_status &&
          system_manufacturer == o.system_manufacturer &&
          system_product_name == o.system_product_name &&
          system_serial_number == o.system_serial_number &&
          tags == o.tags &&
          total_bios_files == o.total_bios_files &&
          total_disk_space == o.total_disk_space &&
          uefi_memory_protection_status == o.uefi_memory_protection_status &&
          unencrypted_drives == o.unencrypted_drives &&
          unencrypted_drives_count == o.unencrypted_drives_count &&
          used_disk_space == o.used_disk_space &&
          virtual_zone == o.virtual_zone &&
          virtualization_based_security_status == o.virtualization_based_security_status &&
          vlan == o.vlan &&
          xdome_id == o.xdome_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [agent_version, aid, available_disk_space, average_memory_usage, average_processor_usage, bios_id, bios_manufacturer, bios_version, business_criticality, cid, city, claroty_id, confidence, country, cpu_processor_name, credential_guard_status, current_local_ip, data_providers, data_providers_count, device_class, device_family, device_guard_status, device_slots, device_type, discoverer_count, discoverer_product_type_descs, disk_sizes, encrypted_drives, encrypted_drives_count, encryption_status, entity_type, external_ip, field_metadata, first_seen_timestamp, groups, hostname, ics_id, id, internet_exposure, iommu_protection_status, kernel_dma_protection_status, kernel_version, last_discoverer_ics_collector_id, last_seen_timestamp, local_ip_addresses, local_ips_count, logical_core_count, mac_addresses, machine_domain, max_memory_usage, max_processor_usage, memory_total, mount_storage_info, network_id, network_interfaces, number_of_disk_drives, os_is_eol, os_version, ou, physical_core_count, platform_name, processor_package_count, product_type, product_type_desc, protocols, purdue_level, reduced_functionality_mode, secure_boot_enabled_status, secure_boot_requested_status, secure_memory_overwrite_requested_status, site_name, subnet, system_guard_status, system_manufacturer, system_product_name, system_serial_number, tags, total_bios_files, total_disk_space, uefi_memory_protection_status, unencrypted_drives, unencrypted_drives_count, used_disk_space, virtual_zone, virtualization_based_security_status, vlan, xdome_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Falcon.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
