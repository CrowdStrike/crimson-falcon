=begin
#CrowdStrike API Specification

#Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.

The version of the OpenAPI document: 2023-05-30T23:10:32Z

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module Falcon
  class DetectsBehavior
    attr_accessor :alleged_filetype

    attr_accessor :behavior_id

    attr_accessor :cmdline

    attr_accessor :confidence

    attr_accessor :container_id

    attr_accessor :control_graph_id

    attr_accessor :description

    attr_accessor :device_id

    attr_accessor :display_name

    attr_accessor :filename

    attr_accessor :filepath

    attr_accessor :ioc_description

    attr_accessor :ioc_source

    attr_accessor :ioc_type

    attr_accessor :ioc_value

    attr_accessor :md5

    attr_accessor :objective

    attr_accessor :parent_details

    attr_accessor :pattern_disposition

    attr_accessor :pattern_disposition_details

    attr_accessor :rule_instance_id

    attr_accessor :rule_instance_version

    attr_accessor :scenario

    attr_accessor :severity

    attr_accessor :sha256

    attr_accessor :tactic

    attr_accessor :tactic_id

    attr_accessor :technique

    attr_accessor :technique_id

    attr_accessor :template_instance_id

    attr_accessor :timestamp

    attr_accessor :triggering_process_graph_id

    attr_accessor :user_id

    attr_accessor :user_name

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'alleged_filetype' => :'alleged_filetype',
        :'behavior_id' => :'behavior_id',
        :'cmdline' => :'cmdline',
        :'confidence' => :'confidence',
        :'container_id' => :'container_id',
        :'control_graph_id' => :'control_graph_id',
        :'description' => :'description',
        :'device_id' => :'device_id',
        :'display_name' => :'display_name',
        :'filename' => :'filename',
        :'filepath' => :'filepath',
        :'ioc_description' => :'ioc_description',
        :'ioc_source' => :'ioc_source',
        :'ioc_type' => :'ioc_type',
        :'ioc_value' => :'ioc_value',
        :'md5' => :'md5',
        :'objective' => :'objective',
        :'parent_details' => :'parent_details',
        :'pattern_disposition' => :'pattern_disposition',
        :'pattern_disposition_details' => :'pattern_disposition_details',
        :'rule_instance_id' => :'rule_instance_id',
        :'rule_instance_version' => :'rule_instance_version',
        :'scenario' => :'scenario',
        :'severity' => :'severity',
        :'sha256' => :'sha256',
        :'tactic' => :'tactic',
        :'tactic_id' => :'tactic_id',
        :'technique' => :'technique',
        :'technique_id' => :'technique_id',
        :'template_instance_id' => :'template_instance_id',
        :'timestamp' => :'timestamp',
        :'triggering_process_graph_id' => :'triggering_process_graph_id',
        :'user_id' => :'user_id',
        :'user_name' => :'user_name'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'alleged_filetype' => :'String',
        :'behavior_id' => :'String',
        :'cmdline' => :'String',
        :'confidence' => :'Integer',
        :'container_id' => :'String',
        :'control_graph_id' => :'String',
        :'description' => :'String',
        :'device_id' => :'String',
        :'display_name' => :'String',
        :'filename' => :'String',
        :'filepath' => :'String',
        :'ioc_description' => :'String',
        :'ioc_source' => :'String',
        :'ioc_type' => :'String',
        :'ioc_value' => :'String',
        :'md5' => :'String',
        :'objective' => :'String',
        :'parent_details' => :'DetectsParentDetails',
        :'pattern_disposition' => :'Integer',
        :'pattern_disposition_details' => :'PatterndispositionPatternDisposition',
        :'rule_instance_id' => :'String',
        :'rule_instance_version' => :'Integer',
        :'scenario' => :'String',
        :'severity' => :'Integer',
        :'sha256' => :'String',
        :'tactic' => :'String',
        :'tactic_id' => :'String',
        :'technique' => :'String',
        :'technique_id' => :'String',
        :'template_instance_id' => :'String',
        :'timestamp' => :'Time',
        :'triggering_process_graph_id' => :'String',
        :'user_id' => :'String',
        :'user_name' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Falcon::DetectsBehavior` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Falcon::DetectsBehavior`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'alleged_filetype')
        self.alleged_filetype = attributes[:'alleged_filetype']
      end

      if attributes.key?(:'behavior_id')
        self.behavior_id = attributes[:'behavior_id']
      end

      if attributes.key?(:'cmdline')
        self.cmdline = attributes[:'cmdline']
      end

      if attributes.key?(:'confidence')
        self.confidence = attributes[:'confidence']
      end

      if attributes.key?(:'container_id')
        self.container_id = attributes[:'container_id']
      end

      if attributes.key?(:'control_graph_id')
        self.control_graph_id = attributes[:'control_graph_id']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'device_id')
        self.device_id = attributes[:'device_id']
      end

      if attributes.key?(:'display_name')
        self.display_name = attributes[:'display_name']
      end

      if attributes.key?(:'filename')
        self.filename = attributes[:'filename']
      end

      if attributes.key?(:'filepath')
        self.filepath = attributes[:'filepath']
      end

      if attributes.key?(:'ioc_description')
        self.ioc_description = attributes[:'ioc_description']
      end

      if attributes.key?(:'ioc_source')
        self.ioc_source = attributes[:'ioc_source']
      end

      if attributes.key?(:'ioc_type')
        self.ioc_type = attributes[:'ioc_type']
      end

      if attributes.key?(:'ioc_value')
        self.ioc_value = attributes[:'ioc_value']
      end

      if attributes.key?(:'md5')
        self.md5 = attributes[:'md5']
      end

      if attributes.key?(:'objective')
        self.objective = attributes[:'objective']
      end

      if attributes.key?(:'parent_details')
        self.parent_details = attributes[:'parent_details']
      end

      if attributes.key?(:'pattern_disposition')
        self.pattern_disposition = attributes[:'pattern_disposition']
      end

      if attributes.key?(:'pattern_disposition_details')
        self.pattern_disposition_details = attributes[:'pattern_disposition_details']
      end

      if attributes.key?(:'rule_instance_id')
        self.rule_instance_id = attributes[:'rule_instance_id']
      end

      if attributes.key?(:'rule_instance_version')
        self.rule_instance_version = attributes[:'rule_instance_version']
      end

      if attributes.key?(:'scenario')
        self.scenario = attributes[:'scenario']
      end

      if attributes.key?(:'severity')
        self.severity = attributes[:'severity']
      end

      if attributes.key?(:'sha256')
        self.sha256 = attributes[:'sha256']
      end

      if attributes.key?(:'tactic')
        self.tactic = attributes[:'tactic']
      end

      if attributes.key?(:'tactic_id')
        self.tactic_id = attributes[:'tactic_id']
      end

      if attributes.key?(:'technique')
        self.technique = attributes[:'technique']
      end

      if attributes.key?(:'technique_id')
        self.technique_id = attributes[:'technique_id']
      end

      if attributes.key?(:'template_instance_id')
        self.template_instance_id = attributes[:'template_instance_id']
      end

      if attributes.key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.key?(:'triggering_process_graph_id')
        self.triggering_process_graph_id = attributes[:'triggering_process_graph_id']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'user_name')
        self.user_name = attributes[:'user_name']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @alleged_filetype.nil?
        invalid_properties.push('invalid value for "alleged_filetype", alleged_filetype cannot be nil.')
      end

      if @behavior_id.nil?
        invalid_properties.push('invalid value for "behavior_id", behavior_id cannot be nil.')
      end

      if @cmdline.nil?
        invalid_properties.push('invalid value for "cmdline", cmdline cannot be nil.')
      end

      if @confidence.nil?
        invalid_properties.push('invalid value for "confidence", confidence cannot be nil.')
      end

      if @control_graph_id.nil?
        invalid_properties.push('invalid value for "control_graph_id", control_graph_id cannot be nil.')
      end

      if @description.nil?
        invalid_properties.push('invalid value for "description", description cannot be nil.')
      end

      if @device_id.nil?
        invalid_properties.push('invalid value for "device_id", device_id cannot be nil.')
      end

      if @display_name.nil?
        invalid_properties.push('invalid value for "display_name", display_name cannot be nil.')
      end

      if @filename.nil?
        invalid_properties.push('invalid value for "filename", filename cannot be nil.')
      end

      if @filepath.nil?
        invalid_properties.push('invalid value for "filepath", filepath cannot be nil.')
      end

      if @ioc_description.nil?
        invalid_properties.push('invalid value for "ioc_description", ioc_description cannot be nil.')
      end

      if @ioc_source.nil?
        invalid_properties.push('invalid value for "ioc_source", ioc_source cannot be nil.')
      end

      if @ioc_type.nil?
        invalid_properties.push('invalid value for "ioc_type", ioc_type cannot be nil.')
      end

      if @ioc_value.nil?
        invalid_properties.push('invalid value for "ioc_value", ioc_value cannot be nil.')
      end

      if @md5.nil?
        invalid_properties.push('invalid value for "md5", md5 cannot be nil.')
      end

      if @objective.nil?
        invalid_properties.push('invalid value for "objective", objective cannot be nil.')
      end

      if @parent_details.nil?
        invalid_properties.push('invalid value for "parent_details", parent_details cannot be nil.')
      end

      if @pattern_disposition.nil?
        invalid_properties.push('invalid value for "pattern_disposition", pattern_disposition cannot be nil.')
      end

      if @pattern_disposition_details.nil?
        invalid_properties.push('invalid value for "pattern_disposition_details", pattern_disposition_details cannot be nil.')
      end

      if @scenario.nil?
        invalid_properties.push('invalid value for "scenario", scenario cannot be nil.')
      end

      if @severity.nil?
        invalid_properties.push('invalid value for "severity", severity cannot be nil.')
      end

      if @sha256.nil?
        invalid_properties.push('invalid value for "sha256", sha256 cannot be nil.')
      end

      if @tactic.nil?
        invalid_properties.push('invalid value for "tactic", tactic cannot be nil.')
      end

      if @tactic_id.nil?
        invalid_properties.push('invalid value for "tactic_id", tactic_id cannot be nil.')
      end

      if @technique.nil?
        invalid_properties.push('invalid value for "technique", technique cannot be nil.')
      end

      if @technique_id.nil?
        invalid_properties.push('invalid value for "technique_id", technique_id cannot be nil.')
      end

      if @timestamp.nil?
        invalid_properties.push('invalid value for "timestamp", timestamp cannot be nil.')
      end

      if @triggering_process_graph_id.nil?
        invalid_properties.push('invalid value for "triggering_process_graph_id", triggering_process_graph_id cannot be nil.')
      end

      if @user_id.nil?
        invalid_properties.push('invalid value for "user_id", user_id cannot be nil.')
      end

      if @user_name.nil?
        invalid_properties.push('invalid value for "user_name", user_name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @alleged_filetype.nil?
      return false if @behavior_id.nil?
      return false if @cmdline.nil?
      return false if @confidence.nil?
      return false if @control_graph_id.nil?
      return false if @description.nil?
      return false if @device_id.nil?
      return false if @display_name.nil?
      return false if @filename.nil?
      return false if @filepath.nil?
      return false if @ioc_description.nil?
      return false if @ioc_source.nil?
      return false if @ioc_type.nil?
      return false if @ioc_value.nil?
      return false if @md5.nil?
      return false if @objective.nil?
      return false if @parent_details.nil?
      return false if @pattern_disposition.nil?
      return false if @pattern_disposition_details.nil?
      return false if @scenario.nil?
      return false if @severity.nil?
      return false if @sha256.nil?
      return false if @tactic.nil?
      return false if @tactic_id.nil?
      return false if @technique.nil?
      return false if @technique_id.nil?
      return false if @timestamp.nil?
      return false if @triggering_process_graph_id.nil?
      return false if @user_id.nil?
      return false if @user_name.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          alleged_filetype == o.alleged_filetype &&
          behavior_id == o.behavior_id &&
          cmdline == o.cmdline &&
          confidence == o.confidence &&
          container_id == o.container_id &&
          control_graph_id == o.control_graph_id &&
          description == o.description &&
          device_id == o.device_id &&
          display_name == o.display_name &&
          filename == o.filename &&
          filepath == o.filepath &&
          ioc_description == o.ioc_description &&
          ioc_source == o.ioc_source &&
          ioc_type == o.ioc_type &&
          ioc_value == o.ioc_value &&
          md5 == o.md5 &&
          objective == o.objective &&
          parent_details == o.parent_details &&
          pattern_disposition == o.pattern_disposition &&
          pattern_disposition_details == o.pattern_disposition_details &&
          rule_instance_id == o.rule_instance_id &&
          rule_instance_version == o.rule_instance_version &&
          scenario == o.scenario &&
          severity == o.severity &&
          sha256 == o.sha256 &&
          tactic == o.tactic &&
          tactic_id == o.tactic_id &&
          technique == o.technique &&
          technique_id == o.technique_id &&
          template_instance_id == o.template_instance_id &&
          timestamp == o.timestamp &&
          triggering_process_graph_id == o.triggering_process_graph_id &&
          user_id == o.user_id &&
          user_name == o.user_name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [alleged_filetype, behavior_id, cmdline, confidence, container_id, control_graph_id, description, device_id, display_name, filename, filepath, ioc_description, ioc_source, ioc_type, ioc_value, md5, objective, parent_details, pattern_disposition, pattern_disposition_details, rule_instance_id, rule_instance_version, scenario, severity, sha256, tactic, tactic_id, technique, technique_id, template_instance_id, timestamp, triggering_process_graph_id, user_id, user_name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Falcon.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
